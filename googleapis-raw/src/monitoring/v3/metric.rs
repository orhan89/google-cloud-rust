// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/monitoring/v3/metric.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Point {
    // message fields
    pub interval: ::protobuf::SingularPtrField<super::common::TimeInterval>,
    pub value: ::protobuf::SingularPtrField<super::common::TypedValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Point {
    fn default() -> &'a Point {
        <Point as ::protobuf::Message>::default_instance()
    }
}

impl Point {
    pub fn new() -> Point {
        ::std::default::Default::default()
    }

    // .google.monitoring.v3.TimeInterval interval = 1;


    pub fn get_interval(&self) -> &super::common::TimeInterval {
        self.interval.as_ref().unwrap_or_else(|| <super::common::TimeInterval as ::protobuf::Message>::default_instance())
    }
    pub fn clear_interval(&mut self) {
        self.interval.clear();
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: super::common::TimeInterval) {
        self.interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interval(&mut self) -> &mut super::common::TimeInterval {
        if self.interval.is_none() {
            self.interval.set_default();
        }
        self.interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_interval(&mut self) -> super::common::TimeInterval {
        self.interval.take().unwrap_or_else(|| super::common::TimeInterval::new())
    }

    // .google.monitoring.v3.TypedValue value = 2;


    pub fn get_value(&self) -> &super::common::TypedValue {
        self.value.as_ref().unwrap_or_else(|| <super::common::TypedValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: super::common::TypedValue) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut super::common::TypedValue {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> super::common::TypedValue {
        self.value.take().unwrap_or_else(|| super::common::TypedValue::new())
    }
}

impl ::protobuf::Message for Point {
    fn is_initialized(&self) -> bool {
        for v in &self.interval {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.interval)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.interval.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Point {
        Point::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::TimeInterval>>(
                "interval",
                |m: &Point| { &m.interval },
                |m: &mut Point| { &mut m.interval },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::TypedValue>>(
                "value",
                |m: &Point| { &m.value },
                |m: &mut Point| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Point>(
                "Point",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Point {
        static instance: ::protobuf::rt::LazyV2<Point> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Point::new)
    }
}

impl ::protobuf::Clear for Point {
    fn clear(&mut self) {
        self.interval.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Point {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Point {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TimeSeries {
    // message fields
    pub metric: ::protobuf::SingularPtrField<super::metric_api::Metric>,
    pub resource: ::protobuf::SingularPtrField<super::monitored_resource::MonitoredResource>,
    pub metadata: ::protobuf::SingularPtrField<super::monitored_resource::MonitoredResourceMetadata>,
    pub metric_kind: super::metric_api::MetricDescriptor_MetricKind,
    pub value_type: super::metric_api::MetricDescriptor_ValueType,
    pub points: ::protobuf::RepeatedField<Point>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TimeSeries {
    fn default() -> &'a TimeSeries {
        <TimeSeries as ::protobuf::Message>::default_instance()
    }
}

impl TimeSeries {
    pub fn new() -> TimeSeries {
        ::std::default::Default::default()
    }

    // .google.api.Metric metric = 1;


    pub fn get_metric(&self) -> &super::metric_api::Metric {
        self.metric.as_ref().unwrap_or_else(|| <super::metric_api::Metric as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metric(&mut self) {
        self.metric.clear();
    }

    pub fn has_metric(&self) -> bool {
        self.metric.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metric(&mut self, v: super::metric_api::Metric) {
        self.metric = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric(&mut self) -> &mut super::metric_api::Metric {
        if self.metric.is_none() {
            self.metric.set_default();
        }
        self.metric.as_mut().unwrap()
    }

    // Take field
    pub fn take_metric(&mut self) -> super::metric_api::Metric {
        self.metric.take().unwrap_or_else(|| super::metric_api::Metric::new())
    }

    // .google.api.MonitoredResource resource = 2;


    pub fn get_resource(&self) -> &super::monitored_resource::MonitoredResource {
        self.resource.as_ref().unwrap_or_else(|| <super::monitored_resource::MonitoredResource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: super::monitored_resource::MonitoredResource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut super::monitored_resource::MonitoredResource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> super::monitored_resource::MonitoredResource {
        self.resource.take().unwrap_or_else(|| super::monitored_resource::MonitoredResource::new())
    }

    // .google.api.MonitoredResourceMetadata metadata = 7;


    pub fn get_metadata(&self) -> &super::monitored_resource::MonitoredResourceMetadata {
        self.metadata.as_ref().unwrap_or_else(|| <super::monitored_resource::MonitoredResourceMetadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: super::monitored_resource::MonitoredResourceMetadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut super::monitored_resource::MonitoredResourceMetadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> super::monitored_resource::MonitoredResourceMetadata {
        self.metadata.take().unwrap_or_else(|| super::monitored_resource::MonitoredResourceMetadata::new())
    }

    // .google.api.MetricDescriptor.MetricKind metric_kind = 3;


    pub fn get_metric_kind(&self) -> super::metric_api::MetricDescriptor_MetricKind {
        self.metric_kind
    }
    pub fn clear_metric_kind(&mut self) {
        self.metric_kind = super::metric_api::MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_metric_kind(&mut self, v: super::metric_api::MetricDescriptor_MetricKind) {
        self.metric_kind = v;
    }

    // .google.api.MetricDescriptor.ValueType value_type = 4;


    pub fn get_value_type(&self) -> super::metric_api::MetricDescriptor_ValueType {
        self.value_type
    }
    pub fn clear_value_type(&mut self) {
        self.value_type = super::metric_api::MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_value_type(&mut self, v: super::metric_api::MetricDescriptor_ValueType) {
        self.value_type = v;
    }

    // repeated .google.monitoring.v3.Point points = 5;


    pub fn get_points(&self) -> &[Point] {
        &self.points
    }
    pub fn clear_points(&mut self) {
        self.points.clear();
    }

    // Param is passed by value, moved
    pub fn set_points(&mut self, v: ::protobuf::RepeatedField<Point>) {
        self.points = v;
    }

    // Mutable pointer to the field.
    pub fn mut_points(&mut self) -> &mut ::protobuf::RepeatedField<Point> {
        &mut self.points
    }

    // Take field
    pub fn take_points(&mut self) -> ::protobuf::RepeatedField<Point> {
        ::std::mem::replace(&mut self.points, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TimeSeries {
    fn is_initialized(&self) -> bool {
        for v in &self.metric {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.points {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metric)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.metric_kind, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.value_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.points)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.metric.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.metric_kind != super::metric_api::MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.metric_kind);
        }
        if self.value_type != super::metric_api::MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.value_type);
        }
        for value in &self.points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.metric.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.metric_kind != super::metric_api::MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.metric_kind))?;
        }
        if self.value_type != super::metric_api::MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.value_type))?;
        }
        for v in &self.points {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimeSeries {
        TimeSeries::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metric_api::Metric>>(
                "metric",
                |m: &TimeSeries| { &m.metric },
                |m: &mut TimeSeries| { &mut m.metric },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::monitored_resource::MonitoredResource>>(
                "resource",
                |m: &TimeSeries| { &m.resource },
                |m: &mut TimeSeries| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::monitored_resource::MonitoredResourceMetadata>>(
                "metadata",
                |m: &TimeSeries| { &m.metadata },
                |m: &mut TimeSeries| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::metric_api::MetricDescriptor_MetricKind>>(
                "metric_kind",
                |m: &TimeSeries| { &m.metric_kind },
                |m: &mut TimeSeries| { &mut m.metric_kind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::metric_api::MetricDescriptor_ValueType>>(
                "value_type",
                |m: &TimeSeries| { &m.value_type },
                |m: &mut TimeSeries| { &mut m.value_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Point>>(
                "points",
                |m: &TimeSeries| { &m.points },
                |m: &mut TimeSeries| { &mut m.points },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TimeSeries>(
                "TimeSeries",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TimeSeries {
        static instance: ::protobuf::rt::LazyV2<TimeSeries> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TimeSeries::new)
    }
}

impl ::protobuf::Clear for TimeSeries {
    fn clear(&mut self) {
        self.metric.clear();
        self.resource.clear();
        self.metadata.clear();
        self.metric_kind = super::metric_api::MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED;
        self.value_type = super::metric_api::MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED;
        self.points.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimeSeries {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeSeries {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!google/monitoring/v3/metric.proto\x12\x14google.monitoring.v3\x1a\x1d\
    google/api/distribution.proto\x1a\x16google/api/label.proto\x1a\x17googl\
    e/api/metric.proto\x1a#google/api/monitored_resource.proto\x1a!google/mo\
    nitoring/v3/common.proto\"\x7f\n\x05Point\x12>\n\x08interval\x18\x01\x20\
    \x01(\x0b2\".google.monitoring.v3.TimeIntervalR\x08interval\x126\n\x05va\
    lue\x18\x02\x20\x01(\x0b2\x20.google.monitoring.v3.TypedValueR\x05value\
    \"\xfc\x02\n\nTimeSeries\x12*\n\x06metric\x18\x01\x20\x01(\x0b2\x12.goog\
    le.api.MetricR\x06metric\x129\n\x08resource\x18\x02\x20\x01(\x0b2\x1d.go\
    ogle.api.MonitoredResourceR\x08resource\x12A\n\x08metadata\x18\x07\x20\
    \x01(\x0b2%.google.api.MonitoredResourceMetadataR\x08metadata\x12H\n\x0b\
    metric_kind\x18\x03\x20\x01(\x0e2'.google.api.MetricDescriptor.MetricKin\
    dR\nmetricKind\x12E\n\nvalue_type\x18\x04\x20\x01(\x0e2&.google.api.Metr\
    icDescriptor.ValueTypeR\tvalueType\x123\n\x06points\x18\x05\x20\x03(\x0b\
    2\x1b.google.monitoring.v3.PointR\x06pointsB\xa3\x01\n\x18com.google.mon\
    itoring.v3B\x0bMetricProtoP\x01Z>google.golang.org/genproto/googleapis/m\
    onitoring/v3;monitoring\xaa\x02\x1aGoogle.Cloud.Monitoring.V3\xca\x02\
    \x1aGoogle\\Cloud\\Monitoring\\V3J\xa7\x1f\n\x06\x12\x04\x0f\0_\x01\n\
    \xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Go\
    ogle\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Ve\
    rsion\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20t\
    his\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\
    \x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\
    \x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Un\
    less\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\
    \x20writing,\x20software\n\x20distributed\x20under\x20the\x20License\x20\
    is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20\
    WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20expres\
    s\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x1d\n\t\n\x02\x03\
    \0\x12\x03\x13\0'\n\t\n\x02\x03\x01\x12\x03\x14\0\x20\n\t\n\x02\x03\x02\
    \x12\x03\x15\0!\n\t\n\x02\x03\x03\x12\x03\x16\0-\n\t\n\x02\x03\x04\x12\
    \x03\x17\0+\n\x08\n\x01\x08\x12\x03\x19\07\n\t\n\x02\x08%\x12\x03\x19\07\
    \n\x08\n\x01\x08\x12\x03\x1a\0U\n\t\n\x02\x08\x0b\x12\x03\x1a\0U\n\x08\n\
    \x01\x08\x12\x03\x1b\0\"\n\t\n\x02\x08\n\x12\x03\x1b\0\"\n\x08\n\x01\x08\
    \x12\x03\x1c\0,\n\t\n\x02\x08\x08\x12\x03\x1c\0,\n\x08\n\x01\x08\x12\x03\
    \x1d\01\n\t\n\x02\x08\x01\x12\x03\x1d\01\n\x08\n\x01\x08\x12\x03\x1e\07\
    \n\t\n\x02\x08)\x12\x03\x1e\07\n3\n\x02\x04\0\x12\x04!\0/\x01\x1a'\x20A\
    \x20single\x20data\x20point\x20in\x20a\x20time\x20series.\n\n\n\n\x03\
    \x04\0\x01\x12\x03!\x08\r\n\xd9\x04\n\x04\x04\0\x02\0\x12\x03+\x02\x1c\
    \x1a\xcb\x04\x20The\x20time\x20interval\x20to\x20which\x20the\x20data\
    \x20point\x20applies.\x20\x20For\x20`GAUGE`\x20metrics,\n\x20the\x20star\
    t\x20time\x20is\x20optional,\x20but\x20if\x20it\x20is\x20supplied,\x20it\
    \x20must\x20equal\x20the\n\x20end\x20time.\x20\x20For\x20`DELTA`\x20metr\
    ics,\x20the\x20start\n\x20and\x20end\x20time\x20should\x20specify\x20a\
    \x20non-zero\x20interval,\x20with\x20subsequent\x20points\n\x20specifyin\
    g\x20contiguous\x20and\x20non-overlapping\x20intervals.\x20\x20For\x20`C\
    UMULATIVE`\n\x20metrics,\x20the\x20start\x20and\x20end\x20time\x20should\
    \x20specify\x20a\x20non-zero\x20interval,\x20with\n\x20subsequent\x20poi\
    nts\x20specifying\x20the\x20same\x20start\x20time\x20and\x20increasing\
    \x20end\x20times,\n\x20until\x20an\x20event\x20resets\x20the\x20cumulati\
    ve\x20value\x20to\x20zero\x20and\x20sets\x20a\x20new\x20start\n\x20time\
    \x20for\x20the\x20following\x20points.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\
    \x03+\x02\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03+\x0f\x17\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03+\x1a\x1b\n+\n\x04\x04\0\x02\x01\x12\x03.\x02\
    \x17\x1a\x1e\x20The\x20value\x20of\x20the\x20data\x20point.\n\n\x0c\n\
    \x05\x04\0\x02\x01\x06\x12\x03.\x02\x0c\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03.\r\x12\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03.\x15\x16\n\x91\x02\
    \n\x02\x04\x01\x12\x045\0_\x01\x1a\x84\x02\x20A\x20collection\x20of\x20d\
    ata\x20points\x20that\x20describes\x20the\x20time-varying\x20values\n\
    \x20of\x20a\x20metric.\x20A\x20time\x20series\x20is\x20identified\x20by\
    \x20a\x20combination\x20of\x20a\n\x20fully-specified\x20monitored\x20res\
    ource\x20and\x20a\x20fully-specified\x20metric.\n\x20This\x20type\x20is\
    \x20used\x20for\x20both\x20listing\x20and\x20creating\x20time\x20series.\
    \n\n\n\n\x03\x04\x01\x01\x12\x035\x08\x12\na\n\x04\x04\x01\x02\0\x12\x03\
    8\x02\x1f\x1aT\x20The\x20associated\x20metric.\x20A\x20fully-specified\
    \x20metric\x20used\x20to\x20identify\x20the\x20time\n\x20series.\n\n\x0c\
    \n\x05\x04\x01\x02\0\x06\x12\x038\x02\x13\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x038\x14\x1a\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x038\x1d\x1e\n\x8b\
    \x01\n\x04\x04\x01\x02\x01\x12\x03<\x02,\x1a~\x20The\x20associated\x20mo\
    nitored\x20resource.\x20\x20Custom\x20metrics\x20can\x20use\x20only\x20c\
    ertain\n\x20monitored\x20resource\x20types\x20in\x20their\x20time\x20ser\
    ies\x20data.\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03<\x02\x1e\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03<\x1f'\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03<*+\n\xee\x01\n\x04\x04\x01\x02\x02\x12\x03A\x024\x1a\xe0\x01\
    \x20Output\x20only.\x20The\x20associated\x20monitored\x20resource\x20met\
    adata.\x20When\x20reading\x20a\n\x20a\x20timeseries,\x20this\x20field\
    \x20will\x20include\x20metadata\x20labels\x20that\x20are\x20explicitly\n\
    \x20named\x20in\x20the\x20reduction.\x20When\x20creating\x20a\x20timeser\
    ies,\x20this\x20field\x20is\x20ignored.\n\n\x0c\n\x05\x04\x01\x02\x02\
    \x06\x12\x03A\x02&\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03A'/\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03A23\n\xa6\x04\n\x04\x04\x01\x02\x03\x12\
    \x03L\x029\x1a\x98\x04\x20The\x20metric\x20kind\x20of\x20the\x20time\x20\
    series.\x20When\x20listing\x20time\x20series,\x20this\x20metric\n\x20kin\
    d\x20might\x20be\x20different\x20from\x20the\x20metric\x20kind\x20of\x20\
    the\x20associated\x20metric\x20if\n\x20this\x20time\x20series\x20is\x20a\
    n\x20alignment\x20or\x20reduction\x20of\x20other\x20time\x20series.\n\n\
    \x20When\x20creating\x20a\x20time\x20series,\x20this\x20field\x20is\x20o\
    ptional.\x20If\x20present,\x20it\x20must\x20be\n\x20the\x20same\x20as\
    \x20the\x20metric\x20kind\x20of\x20the\x20associated\x20metric.\x20If\
    \x20the\x20associated\n\x20metric's\x20descriptor\x20must\x20be\x20auto-\
    created,\x20then\x20this\x20field\x20specifies\x20the\n\x20metric\x20kin\
    d\x20of\x20the\x20new\x20descriptor\x20and\x20must\x20be\x20either\x20`G\
    AUGE`\x20(the\x20default)\n\x20or\x20`CUMULATIVE`.\n\n\x0c\n\x05\x04\x01\
    \x02\x03\x06\x12\x03L\x02(\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03L)4\n\
    \x0c\n\x05\x04\x01\x02\x03\x03\x12\x03L78\n\xec\x02\n\x04\x04\x01\x02\
    \x04\x12\x03T\x027\x1a\xde\x02\x20The\x20value\x20type\x20of\x20the\x20t\
    ime\x20series.\x20When\x20listing\x20time\x20series,\x20this\x20value\n\
    \x20type\x20might\x20be\x20different\x20from\x20the\x20value\x20type\x20\
    of\x20the\x20associated\x20metric\x20if\n\x20this\x20time\x20series\x20i\
    s\x20an\x20alignment\x20or\x20reduction\x20of\x20other\x20time\x20series\
    .\n\n\x20When\x20creating\x20a\x20time\x20series,\x20this\x20field\x20is\
    \x20optional.\x20If\x20present,\x20it\x20must\x20be\n\x20the\x20same\x20\
    as\x20the\x20type\x20of\x20the\x20data\x20in\x20the\x20`points`\x20field\
    .\n\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x03T\x02'\n\x0c\n\x05\x04\x01\
    \x02\x04\x01\x12\x03T(2\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03T56\n\xda\
    \x03\n\x04\x04\x01\x02\x05\x12\x03^\x02\x1c\x1a\xcc\x03\x20The\x20data\
    \x20points\x20of\x20this\x20time\x20series.\x20When\x20listing\x20time\
    \x20series,\x20points\x20are\n\x20returned\x20in\x20reverse\x20time\x20o\
    rder.\n\n\x20When\x20creating\x20a\x20time\x20series,\x20this\x20field\
    \x20must\x20contain\x20exactly\x20one\x20point\x20and\n\x20the\x20point'\
    s\x20type\x20must\x20be\x20the\x20same\x20as\x20the\x20value\x20type\x20\
    of\x20the\x20associated\n\x20metric.\x20If\x20the\x20associated\x20metri\
    c's\x20descriptor\x20must\x20be\x20auto-created,\x20then\n\x20the\x20val\
    ue\x20type\x20of\x20the\x20descriptor\x20is\x20determined\x20by\x20the\
    \x20point's\x20type,\x20which\n\x20must\x20be\x20`BOOL`,\x20`INT64`,\x20\
    `DOUBLE`,\x20or\x20`DISTRIBUTION`.\n\n\x0c\n\x05\x04\x01\x02\x05\x04\x12\
    \x03^\x02\n\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\x03^\x0b\x10\n\x0c\n\x05\
    \x04\x01\x02\x05\x01\x12\x03^\x11\x17\n\x0c\n\x05\x04\x01\x02\x05\x03\
    \x12\x03^\x1a\x1bb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
