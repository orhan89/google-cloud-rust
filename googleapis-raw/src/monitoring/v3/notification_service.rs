// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/monitoring/v3/notification_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct ListNotificationChannelDescriptorsRequest {
    // message fields
    pub name: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListNotificationChannelDescriptorsRequest {
    fn default() -> &'a ListNotificationChannelDescriptorsRequest {
        <ListNotificationChannelDescriptorsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListNotificationChannelDescriptorsRequest {
    pub fn new() -> ListNotificationChannelDescriptorsRequest {
        ::std::default::Default::default()
    }

    // string name = 4;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 page_size = 2;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 3;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListNotificationChannelDescriptorsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.name);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(4, &self.name)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListNotificationChannelDescriptorsRequest {
        ListNotificationChannelDescriptorsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ListNotificationChannelDescriptorsRequest| { &m.name },
                |m: &mut ListNotificationChannelDescriptorsRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListNotificationChannelDescriptorsRequest| { &m.page_size },
                |m: &mut ListNotificationChannelDescriptorsRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListNotificationChannelDescriptorsRequest| { &m.page_token },
                |m: &mut ListNotificationChannelDescriptorsRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListNotificationChannelDescriptorsRequest>(
                "ListNotificationChannelDescriptorsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListNotificationChannelDescriptorsRequest {
        static instance: ::protobuf::rt::LazyV2<ListNotificationChannelDescriptorsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListNotificationChannelDescriptorsRequest::new)
    }
}

impl ::protobuf::Clear for ListNotificationChannelDescriptorsRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListNotificationChannelDescriptorsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListNotificationChannelDescriptorsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListNotificationChannelDescriptorsResponse {
    // message fields
    pub channel_descriptors: ::protobuf::RepeatedField<super::notification::NotificationChannelDescriptor>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListNotificationChannelDescriptorsResponse {
    fn default() -> &'a ListNotificationChannelDescriptorsResponse {
        <ListNotificationChannelDescriptorsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListNotificationChannelDescriptorsResponse {
    pub fn new() -> ListNotificationChannelDescriptorsResponse {
        ::std::default::Default::default()
    }

    // repeated .google.monitoring.v3.NotificationChannelDescriptor channel_descriptors = 1;


    pub fn get_channel_descriptors(&self) -> &[super::notification::NotificationChannelDescriptor] {
        &self.channel_descriptors
    }
    pub fn clear_channel_descriptors(&mut self) {
        self.channel_descriptors.clear();
    }

    // Param is passed by value, moved
    pub fn set_channel_descriptors(&mut self, v: ::protobuf::RepeatedField<super::notification::NotificationChannelDescriptor>) {
        self.channel_descriptors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_channel_descriptors(&mut self) -> &mut ::protobuf::RepeatedField<super::notification::NotificationChannelDescriptor> {
        &mut self.channel_descriptors
    }

    // Take field
    pub fn take_channel_descriptors(&mut self) -> ::protobuf::RepeatedField<super::notification::NotificationChannelDescriptor> {
        ::std::mem::replace(&mut self.channel_descriptors, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListNotificationChannelDescriptorsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.channel_descriptors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.channel_descriptors)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.channel_descriptors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.channel_descriptors {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListNotificationChannelDescriptorsResponse {
        ListNotificationChannelDescriptorsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::notification::NotificationChannelDescriptor>>(
                "channel_descriptors",
                |m: &ListNotificationChannelDescriptorsResponse| { &m.channel_descriptors },
                |m: &mut ListNotificationChannelDescriptorsResponse| { &mut m.channel_descriptors },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListNotificationChannelDescriptorsResponse| { &m.next_page_token },
                |m: &mut ListNotificationChannelDescriptorsResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListNotificationChannelDescriptorsResponse>(
                "ListNotificationChannelDescriptorsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListNotificationChannelDescriptorsResponse {
        static instance: ::protobuf::rt::LazyV2<ListNotificationChannelDescriptorsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListNotificationChannelDescriptorsResponse::new)
    }
}

impl ::protobuf::Clear for ListNotificationChannelDescriptorsResponse {
    fn clear(&mut self) {
        self.channel_descriptors.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListNotificationChannelDescriptorsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListNotificationChannelDescriptorsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetNotificationChannelDescriptorRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetNotificationChannelDescriptorRequest {
    fn default() -> &'a GetNotificationChannelDescriptorRequest {
        <GetNotificationChannelDescriptorRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetNotificationChannelDescriptorRequest {
    pub fn new() -> GetNotificationChannelDescriptorRequest {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetNotificationChannelDescriptorRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetNotificationChannelDescriptorRequest {
        GetNotificationChannelDescriptorRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetNotificationChannelDescriptorRequest| { &m.name },
                |m: &mut GetNotificationChannelDescriptorRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetNotificationChannelDescriptorRequest>(
                "GetNotificationChannelDescriptorRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetNotificationChannelDescriptorRequest {
        static instance: ::protobuf::rt::LazyV2<GetNotificationChannelDescriptorRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetNotificationChannelDescriptorRequest::new)
    }
}

impl ::protobuf::Clear for GetNotificationChannelDescriptorRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetNotificationChannelDescriptorRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNotificationChannelDescriptorRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateNotificationChannelRequest {
    // message fields
    pub name: ::std::string::String,
    pub notification_channel: ::protobuf::SingularPtrField<super::notification::NotificationChannel>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateNotificationChannelRequest {
    fn default() -> &'a CreateNotificationChannelRequest {
        <CreateNotificationChannelRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateNotificationChannelRequest {
    pub fn new() -> CreateNotificationChannelRequest {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.monitoring.v3.NotificationChannel notification_channel = 2;


    pub fn get_notification_channel(&self) -> &super::notification::NotificationChannel {
        self.notification_channel.as_ref().unwrap_or_else(|| <super::notification::NotificationChannel as ::protobuf::Message>::default_instance())
    }
    pub fn clear_notification_channel(&mut self) {
        self.notification_channel.clear();
    }

    pub fn has_notification_channel(&self) -> bool {
        self.notification_channel.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notification_channel(&mut self, v: super::notification::NotificationChannel) {
        self.notification_channel = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_notification_channel(&mut self) -> &mut super::notification::NotificationChannel {
        if self.notification_channel.is_none() {
            self.notification_channel.set_default();
        }
        self.notification_channel.as_mut().unwrap()
    }

    // Take field
    pub fn take_notification_channel(&mut self) -> super::notification::NotificationChannel {
        self.notification_channel.take().unwrap_or_else(|| super::notification::NotificationChannel::new())
    }
}

impl ::protobuf::Message for CreateNotificationChannelRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.notification_channel {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.notification_channel)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if let Some(ref v) = self.notification_channel.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if let Some(ref v) = self.notification_channel.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateNotificationChannelRequest {
        CreateNotificationChannelRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &CreateNotificationChannelRequest| { &m.name },
                |m: &mut CreateNotificationChannelRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::notification::NotificationChannel>>(
                "notification_channel",
                |m: &CreateNotificationChannelRequest| { &m.notification_channel },
                |m: &mut CreateNotificationChannelRequest| { &mut m.notification_channel },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateNotificationChannelRequest>(
                "CreateNotificationChannelRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateNotificationChannelRequest {
        static instance: ::protobuf::rt::LazyV2<CreateNotificationChannelRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateNotificationChannelRequest::new)
    }
}

impl ::protobuf::Clear for CreateNotificationChannelRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.notification_channel.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateNotificationChannelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateNotificationChannelRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListNotificationChannelsRequest {
    // message fields
    pub name: ::std::string::String,
    pub filter: ::std::string::String,
    pub order_by: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListNotificationChannelsRequest {
    fn default() -> &'a ListNotificationChannelsRequest {
        <ListNotificationChannelsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListNotificationChannelsRequest {
    pub fn new() -> ListNotificationChannelsRequest {
        ::std::default::Default::default()
    }

    // string name = 5;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string filter = 6;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // string order_by = 7;


    pub fn get_order_by(&self) -> &str {
        &self.order_by
    }
    pub fn clear_order_by(&mut self) {
        self.order_by.clear();
    }

    // Param is passed by value, moved
    pub fn set_order_by(&mut self, v: ::std::string::String) {
        self.order_by = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_order_by(&mut self) -> &mut ::std::string::String {
        &mut self.order_by
    }

    // Take field
    pub fn take_order_by(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.order_by, ::std::string::String::new())
    }

    // int32 page_size = 3;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 4;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListNotificationChannelsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.order_by)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.name);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.filter);
        }
        if !self.order_by.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.order_by);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(5, &self.name)?;
        }
        if !self.filter.is_empty() {
            os.write_string(6, &self.filter)?;
        }
        if !self.order_by.is_empty() {
            os.write_string(7, &self.order_by)?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(4, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListNotificationChannelsRequest {
        ListNotificationChannelsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ListNotificationChannelsRequest| { &m.name },
                |m: &mut ListNotificationChannelsRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &ListNotificationChannelsRequest| { &m.filter },
                |m: &mut ListNotificationChannelsRequest| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "order_by",
                |m: &ListNotificationChannelsRequest| { &m.order_by },
                |m: &mut ListNotificationChannelsRequest| { &mut m.order_by },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListNotificationChannelsRequest| { &m.page_size },
                |m: &mut ListNotificationChannelsRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListNotificationChannelsRequest| { &m.page_token },
                |m: &mut ListNotificationChannelsRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListNotificationChannelsRequest>(
                "ListNotificationChannelsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListNotificationChannelsRequest {
        static instance: ::protobuf::rt::LazyV2<ListNotificationChannelsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListNotificationChannelsRequest::new)
    }
}

impl ::protobuf::Clear for ListNotificationChannelsRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.filter.clear();
        self.order_by.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListNotificationChannelsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListNotificationChannelsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListNotificationChannelsResponse {
    // message fields
    pub notification_channels: ::protobuf::RepeatedField<super::notification::NotificationChannel>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListNotificationChannelsResponse {
    fn default() -> &'a ListNotificationChannelsResponse {
        <ListNotificationChannelsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListNotificationChannelsResponse {
    pub fn new() -> ListNotificationChannelsResponse {
        ::std::default::Default::default()
    }

    // repeated .google.monitoring.v3.NotificationChannel notification_channels = 3;


    pub fn get_notification_channels(&self) -> &[super::notification::NotificationChannel] {
        &self.notification_channels
    }
    pub fn clear_notification_channels(&mut self) {
        self.notification_channels.clear();
    }

    // Param is passed by value, moved
    pub fn set_notification_channels(&mut self, v: ::protobuf::RepeatedField<super::notification::NotificationChannel>) {
        self.notification_channels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_notification_channels(&mut self) -> &mut ::protobuf::RepeatedField<super::notification::NotificationChannel> {
        &mut self.notification_channels
    }

    // Take field
    pub fn take_notification_channels(&mut self) -> ::protobuf::RepeatedField<super::notification::NotificationChannel> {
        ::std::mem::replace(&mut self.notification_channels, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListNotificationChannelsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.notification_channels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.notification_channels)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.notification_channels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.notification_channels {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListNotificationChannelsResponse {
        ListNotificationChannelsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::notification::NotificationChannel>>(
                "notification_channels",
                |m: &ListNotificationChannelsResponse| { &m.notification_channels },
                |m: &mut ListNotificationChannelsResponse| { &mut m.notification_channels },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListNotificationChannelsResponse| { &m.next_page_token },
                |m: &mut ListNotificationChannelsResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListNotificationChannelsResponse>(
                "ListNotificationChannelsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListNotificationChannelsResponse {
        static instance: ::protobuf::rt::LazyV2<ListNotificationChannelsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListNotificationChannelsResponse::new)
    }
}

impl ::protobuf::Clear for ListNotificationChannelsResponse {
    fn clear(&mut self) {
        self.notification_channels.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListNotificationChannelsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListNotificationChannelsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetNotificationChannelRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetNotificationChannelRequest {
    fn default() -> &'a GetNotificationChannelRequest {
        <GetNotificationChannelRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetNotificationChannelRequest {
    pub fn new() -> GetNotificationChannelRequest {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetNotificationChannelRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetNotificationChannelRequest {
        GetNotificationChannelRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetNotificationChannelRequest| { &m.name },
                |m: &mut GetNotificationChannelRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetNotificationChannelRequest>(
                "GetNotificationChannelRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetNotificationChannelRequest {
        static instance: ::protobuf::rt::LazyV2<GetNotificationChannelRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetNotificationChannelRequest::new)
    }
}

impl ::protobuf::Clear for GetNotificationChannelRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetNotificationChannelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNotificationChannelRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateNotificationChannelRequest {
    // message fields
    pub update_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    pub notification_channel: ::protobuf::SingularPtrField<super::notification::NotificationChannel>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateNotificationChannelRequest {
    fn default() -> &'a UpdateNotificationChannelRequest {
        <UpdateNotificationChannelRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateNotificationChannelRequest {
    pub fn new() -> UpdateNotificationChannelRequest {
        ::std::default::Default::default()
    }

    // .google.protobuf.FieldMask update_mask = 2;


    pub fn get_update_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.update_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.update_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }

    // .google.monitoring.v3.NotificationChannel notification_channel = 3;


    pub fn get_notification_channel(&self) -> &super::notification::NotificationChannel {
        self.notification_channel.as_ref().unwrap_or_else(|| <super::notification::NotificationChannel as ::protobuf::Message>::default_instance())
    }
    pub fn clear_notification_channel(&mut self) {
        self.notification_channel.clear();
    }

    pub fn has_notification_channel(&self) -> bool {
        self.notification_channel.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notification_channel(&mut self, v: super::notification::NotificationChannel) {
        self.notification_channel = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_notification_channel(&mut self) -> &mut super::notification::NotificationChannel {
        if self.notification_channel.is_none() {
            self.notification_channel.set_default();
        }
        self.notification_channel.as_mut().unwrap()
    }

    // Take field
    pub fn take_notification_channel(&mut self) -> super::notification::NotificationChannel {
        self.notification_channel.take().unwrap_or_else(|| super::notification::NotificationChannel::new())
    }
}

impl ::protobuf::Message for UpdateNotificationChannelRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.notification_channel {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.notification_channel)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.notification_channel.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.notification_channel.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateNotificationChannelRequest {
        UpdateNotificationChannelRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "update_mask",
                |m: &UpdateNotificationChannelRequest| { &m.update_mask },
                |m: &mut UpdateNotificationChannelRequest| { &mut m.update_mask },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::notification::NotificationChannel>>(
                "notification_channel",
                |m: &UpdateNotificationChannelRequest| { &m.notification_channel },
                |m: &mut UpdateNotificationChannelRequest| { &mut m.notification_channel },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateNotificationChannelRequest>(
                "UpdateNotificationChannelRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateNotificationChannelRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateNotificationChannelRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateNotificationChannelRequest::new)
    }
}

impl ::protobuf::Clear for UpdateNotificationChannelRequest {
    fn clear(&mut self) {
        self.update_mask.clear();
        self.notification_channel.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateNotificationChannelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateNotificationChannelRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteNotificationChannelRequest {
    // message fields
    pub name: ::std::string::String,
    pub force: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteNotificationChannelRequest {
    fn default() -> &'a DeleteNotificationChannelRequest {
        <DeleteNotificationChannelRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteNotificationChannelRequest {
    pub fn new() -> DeleteNotificationChannelRequest {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bool force = 5;


    pub fn get_force(&self) -> bool {
        self.force
    }
    pub fn clear_force(&mut self) {
        self.force = false;
    }

    // Param is passed by value, moved
    pub fn set_force(&mut self, v: bool) {
        self.force = v;
    }
}

impl ::protobuf::Message for DeleteNotificationChannelRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.force = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if self.force != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if self.force != false {
            os.write_bool(5, self.force)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteNotificationChannelRequest {
        DeleteNotificationChannelRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteNotificationChannelRequest| { &m.name },
                |m: &mut DeleteNotificationChannelRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "force",
                |m: &DeleteNotificationChannelRequest| { &m.force },
                |m: &mut DeleteNotificationChannelRequest| { &mut m.force },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteNotificationChannelRequest>(
                "DeleteNotificationChannelRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteNotificationChannelRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteNotificationChannelRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteNotificationChannelRequest::new)
    }
}

impl ::protobuf::Clear for DeleteNotificationChannelRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.force = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteNotificationChannelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteNotificationChannelRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SendNotificationChannelVerificationCodeRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SendNotificationChannelVerificationCodeRequest {
    fn default() -> &'a SendNotificationChannelVerificationCodeRequest {
        <SendNotificationChannelVerificationCodeRequest as ::protobuf::Message>::default_instance()
    }
}

impl SendNotificationChannelVerificationCodeRequest {
    pub fn new() -> SendNotificationChannelVerificationCodeRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SendNotificationChannelVerificationCodeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendNotificationChannelVerificationCodeRequest {
        SendNotificationChannelVerificationCodeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &SendNotificationChannelVerificationCodeRequest| { &m.name },
                |m: &mut SendNotificationChannelVerificationCodeRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SendNotificationChannelVerificationCodeRequest>(
                "SendNotificationChannelVerificationCodeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SendNotificationChannelVerificationCodeRequest {
        static instance: ::protobuf::rt::LazyV2<SendNotificationChannelVerificationCodeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SendNotificationChannelVerificationCodeRequest::new)
    }
}

impl ::protobuf::Clear for SendNotificationChannelVerificationCodeRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendNotificationChannelVerificationCodeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendNotificationChannelVerificationCodeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetNotificationChannelVerificationCodeRequest {
    // message fields
    pub name: ::std::string::String,
    pub expire_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetNotificationChannelVerificationCodeRequest {
    fn default() -> &'a GetNotificationChannelVerificationCodeRequest {
        <GetNotificationChannelVerificationCodeRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetNotificationChannelVerificationCodeRequest {
    pub fn new() -> GetNotificationChannelVerificationCodeRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp expire_time = 2;


    pub fn get_expire_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.expire_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_expire_time(&mut self) {
        self.expire_time.clear();
    }

    pub fn has_expire_time(&self) -> bool {
        self.expire_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expire_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.expire_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expire_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.expire_time.is_none() {
            self.expire_time.set_default();
        }
        self.expire_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_expire_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.expire_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetNotificationChannelVerificationCodeRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.expire_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.expire_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.expire_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.expire_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetNotificationChannelVerificationCodeRequest {
        GetNotificationChannelVerificationCodeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetNotificationChannelVerificationCodeRequest| { &m.name },
                |m: &mut GetNotificationChannelVerificationCodeRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "expire_time",
                |m: &GetNotificationChannelVerificationCodeRequest| { &m.expire_time },
                |m: &mut GetNotificationChannelVerificationCodeRequest| { &mut m.expire_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetNotificationChannelVerificationCodeRequest>(
                "GetNotificationChannelVerificationCodeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetNotificationChannelVerificationCodeRequest {
        static instance: ::protobuf::rt::LazyV2<GetNotificationChannelVerificationCodeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetNotificationChannelVerificationCodeRequest::new)
    }
}

impl ::protobuf::Clear for GetNotificationChannelVerificationCodeRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.expire_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetNotificationChannelVerificationCodeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNotificationChannelVerificationCodeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetNotificationChannelVerificationCodeResponse {
    // message fields
    pub code: ::std::string::String,
    pub expire_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetNotificationChannelVerificationCodeResponse {
    fn default() -> &'a GetNotificationChannelVerificationCodeResponse {
        <GetNotificationChannelVerificationCodeResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetNotificationChannelVerificationCodeResponse {
    pub fn new() -> GetNotificationChannelVerificationCodeResponse {
        ::std::default::Default::default()
    }

    // string code = 1;


    pub fn get_code(&self) -> &str {
        &self.code
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::string::String) {
        self.code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::string::String {
        &mut self.code
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.code, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp expire_time = 2;


    pub fn get_expire_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.expire_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_expire_time(&mut self) {
        self.expire_time.clear();
    }

    pub fn has_expire_time(&self) -> bool {
        self.expire_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expire_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.expire_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expire_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.expire_time.is_none() {
            self.expire_time.set_default();
        }
        self.expire_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_expire_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.expire_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetNotificationChannelVerificationCodeResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.expire_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.code)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.expire_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.code);
        }
        if let Some(ref v) = self.expire_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.code.is_empty() {
            os.write_string(1, &self.code)?;
        }
        if let Some(ref v) = self.expire_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetNotificationChannelVerificationCodeResponse {
        GetNotificationChannelVerificationCodeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "code",
                |m: &GetNotificationChannelVerificationCodeResponse| { &m.code },
                |m: &mut GetNotificationChannelVerificationCodeResponse| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "expire_time",
                |m: &GetNotificationChannelVerificationCodeResponse| { &m.expire_time },
                |m: &mut GetNotificationChannelVerificationCodeResponse| { &mut m.expire_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetNotificationChannelVerificationCodeResponse>(
                "GetNotificationChannelVerificationCodeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetNotificationChannelVerificationCodeResponse {
        static instance: ::protobuf::rt::LazyV2<GetNotificationChannelVerificationCodeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetNotificationChannelVerificationCodeResponse::new)
    }
}

impl ::protobuf::Clear for GetNotificationChannelVerificationCodeResponse {
    fn clear(&mut self) {
        self.code.clear();
        self.expire_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetNotificationChannelVerificationCodeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNotificationChannelVerificationCodeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VerifyNotificationChannelRequest {
    // message fields
    pub name: ::std::string::String,
    pub code: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VerifyNotificationChannelRequest {
    fn default() -> &'a VerifyNotificationChannelRequest {
        <VerifyNotificationChannelRequest as ::protobuf::Message>::default_instance()
    }
}

impl VerifyNotificationChannelRequest {
    pub fn new() -> VerifyNotificationChannelRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string code = 2;


    pub fn get_code(&self) -> &str {
        &self.code
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::string::String) {
        self.code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::string::String {
        &mut self.code
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.code, ::std::string::String::new())
    }
}

impl ::protobuf::Message for VerifyNotificationChannelRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.code.is_empty() {
            os.write_string(2, &self.code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VerifyNotificationChannelRequest {
        VerifyNotificationChannelRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &VerifyNotificationChannelRequest| { &m.name },
                |m: &mut VerifyNotificationChannelRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "code",
                |m: &VerifyNotificationChannelRequest| { &m.code },
                |m: &mut VerifyNotificationChannelRequest| { &mut m.code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VerifyNotificationChannelRequest>(
                "VerifyNotificationChannelRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VerifyNotificationChannelRequest {
        static instance: ::protobuf::rt::LazyV2<VerifyNotificationChannelRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VerifyNotificationChannelRequest::new)
    }
}

impl ::protobuf::Clear for VerifyNotificationChannelRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VerifyNotificationChannelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerifyNotificationChannelRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/google/monitoring/v3/notification_service.proto\x12\x14google.monitor\
    ing.v3\x1a\x1cgoogle/api/annotations.proto\x1a'google/monitoring/v3/noti\
    fication.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x20google/protobuf\
    /field_mask.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/prot\
    obuf/timestamp.proto\x1a\x17google/api/client.proto\"{\n)ListNotificatio\
    nChannelDescriptorsRequest\x12\x12\n\x04name\x18\x04\x20\x01(\tR\x04name\
    \x12\x1b\n\tpage_size\x18\x02\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_\
    token\x18\x03\x20\x01(\tR\tpageToken\"\xba\x01\n*ListNotificationChannel\
    DescriptorsResponse\x12d\n\x13channel_descriptors\x18\x01\x20\x03(\x0b23\
    .google.monitoring.v3.NotificationChannelDescriptorR\x12channelDescripto\
    rs\x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnextPageToken\"=\n'Get\
    NotificationChannelDescriptorRequest\x12\x12\n\x04name\x18\x03\x20\x01(\
    \tR\x04name\"\x94\x01\n\x20CreateNotificationChannelRequest\x12\x12\n\
    \x04name\x18\x03\x20\x01(\tR\x04name\x12\\\n\x14notification_channel\x18\
    \x02\x20\x01(\x0b2).google.monitoring.v3.NotificationChannelR\x13notific\
    ationChannel\"\xa4\x01\n\x1fListNotificationChannelsRequest\x12\x12\n\
    \x04name\x18\x05\x20\x01(\tR\x04name\x12\x16\n\x06filter\x18\x06\x20\x01\
    (\tR\x06filter\x12\x19\n\x08order_by\x18\x07\x20\x01(\tR\x07orderBy\x12\
    \x1b\n\tpage_size\x18\x03\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_toke\
    n\x18\x04\x20\x01(\tR\tpageToken\"\xaa\x01\n\x20ListNotificationChannels\
    Response\x12^\n\x15notification_channels\x18\x03\x20\x03(\x0b2).google.m\
    onitoring.v3.NotificationChannelR\x14notificationChannels\x12&\n\x0fnext\
    _page_token\x18\x02\x20\x01(\tR\rnextPageToken\"3\n\x1dGetNotificationCh\
    annelRequest\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\"\xbd\x01\n\
    \x20UpdateNotificationChannelRequest\x12;\n\x0bupdate_mask\x18\x02\x20\
    \x01(\x0b2\x1a.google.protobuf.FieldMaskR\nupdateMask\x12\\\n\x14notific\
    ation_channel\x18\x03\x20\x01(\x0b2).google.monitoring.v3.NotificationCh\
    annelR\x13notificationChannel\"L\n\x20DeleteNotificationChannelRequest\
    \x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12\x14\n\x05force\x18\
    \x05\x20\x01(\x08R\x05force\"D\n.SendNotificationChannelVerificationCode\
    Request\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"\x80\x01\n-GetNot\
    ificationChannelVerificationCodeRequest\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\x12;\n\x0bexpire_time\x18\x02\x20\x01(\x0b2\x1a.google.\
    protobuf.TimestampR\nexpireTime\"\x81\x01\n.GetNotificationChannelVerifi\
    cationCodeResponse\x12\x12\n\x04code\x18\x01\x20\x01(\tR\x04code\x12;\n\
    \x0bexpire_time\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\nex\
    pireTime\"J\n\x20VerifyNotificationChannelRequest\x12\x12\n\x04name\x18\
    \x01\x20\x01(\tR\x04name\x12\x12\n\x04code\x18\x02\x20\x01(\tR\x04code2\
    \xe7\x11\n\x1aNotificationChannelService\x12\xe5\x01\n\"ListNotification\
    ChannelDescriptors\x12?.google.monitoring.v3.ListNotificationChannelDesc\
    riptorsRequest\x1a@.google.monitoring.v3.ListNotificationChannelDescript\
    orsResponse\"<\x82\xd3\xe4\x93\x026\x124/v3/{name=projects/*}/notificati\
    onChannelDescriptors\x12\xd6\x01\n\x20GetNotificationChannelDescriptor\
    \x12=.google.monitoring.v3.GetNotificationChannelDescriptorRequest\x1a3.\
    google.monitoring.v3.NotificationChannelDescriptor\">\x82\xd3\xe4\x93\
    \x028\x126/v3/{name=projects/*/notificationChannelDescriptors/*}\x12\xbd\
    \x01\n\x18ListNotificationChannels\x125.google.monitoring.v3.ListNotific\
    ationChannelsRequest\x1a6.google.monitoring.v3.ListNotificationChannelsR\
    esponse\"2\x82\xd3\xe4\x93\x02,\x12*/v3/{name=projects/*}/notificationCh\
    annels\x12\xae\x01\n\x16GetNotificationChannel\x123.google.monitoring.v3\
    .GetNotificationChannelRequest\x1a).google.monitoring.v3.NotificationCha\
    nnel\"4\x82\xd3\xe4\x93\x02.\x12,/v3/{name=projects/*/notificationChanne\
    ls/*}\x12\xc8\x01\n\x19CreateNotificationChannel\x126.google.monitoring.\
    v3.CreateNotificationChannelRequest\x1a).google.monitoring.v3.Notificati\
    onChannel\"H\x82\xd3\xe4\x93\x02B\"*/v3/{name=projects/*}/notificationCh\
    annels:\x14notification_channel\x12\xdf\x01\n\x19UpdateNotificationChann\
    el\x126.google.monitoring.v3.UpdateNotificationChannelRequest\x1a).googl\
    e.monitoring.v3.NotificationChannel\"_\x82\xd3\xe4\x93\x02Y2A/v3/{notifi\
    cation_channel.name=projects/*/notificationChannels/*}:\x14notification_\
    channel\x12\xa1\x01\n\x19DeleteNotificationChannel\x126.google.monitorin\
    g.v3.DeleteNotificationChannelRequest\x1a\x16.google.protobuf.Empty\"4\
    \x82\xd3\xe4\x93\x02.*,/v3/{name=projects/*/notificationChannels/*}\x12\
    \xd5\x01\n'SendNotificationChannelVerificationCode\x12D.google.monitorin\
    g.v3.SendNotificationChannelVerificationCodeRequest\x1a\x16.google.proto\
    buf.Empty\"L\x82\xd3\xe4\x93\x02F\"A/v3/{name=projects/*/notificationCha\
    nnels/*}:sendVerificationCode:\x01*\x12\x80\x02\n&GetNotificationChannel\
    VerificationCode\x12C.google.monitoring.v3.GetNotificationChannelVerific\
    ationCodeRequest\x1aD.google.monitoring.v3.GetNotificationChannelVerific\
    ationCodeResponse\"K\x82\xd3\xe4\x93\x02E\"@/v3/{name=projects/*/notific\
    ationChannels/*}:getVerificationCode:\x01*\x12\xbe\x01\n\x19VerifyNotifi\
    cationChannel\x126.google.monitoring.v3.VerifyNotificationChannelRequest\
    \x1a).google.monitoring.v3.NotificationChannel\">\x82\xd3\xe4\x93\x028\"\
    3/v3/{name=projects/*/notificationChannels/*}:verify:\x01*\x1a\xa9\x01\
    \xd2A\x89\x01https://www.googleapis.com/auth/cloud-platform,https://www.\
    googleapis.com/auth/monitoring,https://www.googleapis.com/auth/monitorin\
    g.read\xcaA\x19monitoring.googleapis.comB\xb0\x01\n\x18com.google.monito\
    ring.v3B\x18NotificationServiceProtoP\x01Z>google.golang.org/genproto/go\
    ogleapis/monitoring/v3;monitoring\xaa\x02\x1aGoogle.Cloud.Monitoring.V3\
    \xca\x02\x1aGoogle\\Cloud\\Monitoring\\V3J\x9de\n\x07\x12\x05\x0f\0\xd7\
    \x02\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x20\
    2019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20Lice\
    nse,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\
    \x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20\
    License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\
    \x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\
    \n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\
    \x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\
    \x1d\n\t\n\x02\x03\0\x12\x03\x13\0&\n\t\n\x02\x03\x01\x12\x03\x14\01\n\t\
    \n\x02\x03\x02\x12\x03\x15\0%\n\t\n\x02\x03\x03\x12\x03\x16\0*\n\t\n\x02\
    \x03\x04\x12\x03\x17\0&\n\t\n\x02\x03\x05\x12\x03\x18\0)\n\t\n\x02\x03\
    \x06\x12\x03\x19\0!\n\x08\n\x01\x08\x12\x03\x1b\07\n\t\n\x02\x08%\x12\
    \x03\x1b\07\n\x08\n\x01\x08\x12\x03\x1c\0U\n\t\n\x02\x08\x0b\x12\x03\x1c\
    \0U\n\x08\n\x01\x08\x12\x03\x1d\0\"\n\t\n\x02\x08\n\x12\x03\x1d\0\"\n\
    \x08\n\x01\x08\x12\x03\x1e\09\n\t\n\x02\x08\x08\x12\x03\x1e\09\n\x08\n\
    \x01\x08\x12\x03\x1f\01\n\t\n\x02\x08\x01\x12\x03\x1f\01\n\x08\n\x01\x08\
    \x12\x03\x20\07\n\t\n\x02\x08)\x12\x03\x20\07\n\x87\x01\n\x02\x06\0\x12\
    \x05$\0\x94\x01\x01\x1az\x20The\x20Notification\x20Channel\x20API\x20pro\
    vides\x20access\x20to\x20configuration\x20that\n\x20controls\x20how\x20m\
    essages\x20related\x20to\x20incidents\x20are\x20sent.\n\n\n\n\x03\x06\0\
    \x01\x12\x03$\x08\"\n\n\n\x03\x06\0\x03\x12\x03%\x02A\n\x0c\n\x05\x06\0\
    \x03\x99\x08\x12\x03%\x02A\n\x0b\n\x03\x06\0\x03\x12\x04&\x02)8\n\r\n\
    \x05\x06\0\x03\x9a\x08\x12\x04&\x02)8\n\x9c\x01\n\x04\x06\0\x02\0\x12\
    \x04-\x021\x03\x1a\x8d\x01\x20Lists\x20the\x20descriptors\x20for\x20supp\
    orted\x20channel\x20types.\x20The\x20use\x20of\x20descriptors\n\x20makes\
    \x20it\x20possible\x20for\x20new\x20channel\x20types\x20to\x20be\x20dyna\
    mically\x20added.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03-\x06(\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03-)R\n\r\n\x05\x06\0\x02\0\x03\x12\x04-]\x87\
    \x01\n\r\n\x05\x06\0\x02\0\x04\x12\x04.\x040\x06\n\x11\n\t\x06\0\x02\0\
    \x04\xb0\xca\xbc\"\x12\x04.\x040\x06\n\xa0\x01\n\x04\x06\0\x02\x01\x12\
    \x045\x029\x03\x1a\x91\x01\x20Gets\x20a\x20single\x20channel\x20descript\
    or.\x20The\x20descriptor\x20indicates\x20which\x20fields\n\x20are\x20exp\
    ected\x20/\x20permitted\x20for\x20a\x20notification\x20channel\x20of\x20\
    the\x20given\x20type.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x035\x06&\n\
    \x0c\n\x05\x06\0\x02\x01\x02\x12\x035'N\n\x0c\n\x05\x06\0\x02\x01\x03\
    \x12\x035Yv\n\r\n\x05\x06\0\x02\x01\x04\x12\x046\x048\x06\n\x11\n\t\x06\
    \0\x02\x01\x04\xb0\xca\xbc\"\x12\x046\x048\x06\nW\n\x04\x06\0\x02\x02\
    \x12\x04<\x02@\x03\x1aI\x20Lists\x20the\x20notification\x20channels\x20t\
    hat\x20have\x20been\x20created\x20for\x20the\x20project.\n\n\x0c\n\x05\
    \x06\0\x02\x02\x01\x12\x03<\x06\x1e\n\x0c\n\x05\x06\0\x02\x02\x02\x12\
    \x03<\x1f>\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03<Ii\n\r\n\x05\x06\0\x02\
    \x02\x04\x12\x04=\x04?\x06\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\
    \x04=\x04?\x06\n\xe7\x02\n\x04\x06\0\x02\x03\x12\x04G\x02K\x03\x1a\xd8\
    \x02\x20Gets\x20a\x20single\x20notification\x20channel.\x20The\x20channe\
    l\x20includes\x20the\x20relevant\n\x20configuration\x20details\x20with\
    \x20which\x20the\x20channel\x20was\x20created.\x20However,\x20the\n\x20r\
    esponse\x20may\x20truncate\x20or\x20omit\x20passwords,\x20API\x20keys,\
    \x20or\x20other\x20private\x20key\n\x20matter\x20and\x20thus\x20the\x20r\
    esponse\x20may\x20not\x20be\x20100%\x20identical\x20to\x20the\x20informa\
    tion\n\x20that\x20was\x20supplied\x20in\x20the\x20call\x20to\x20the\x20c\
    reate\x20method.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03G\x06\x1c\n\x0c\
    \n\x05\x06\0\x02\x03\x02\x12\x03G\x1d:\n\x0c\n\x05\x06\0\x02\x03\x03\x12\
    \x03GEX\n\r\n\x05\x06\0\x02\x03\x04\x12\x04H\x04J\x06\n\x11\n\t\x06\0\
    \x02\x03\x04\xb0\xca\xbc\"\x12\x04H\x04J\x06\n\x9d\x01\n\x04\x06\0\x02\
    \x04\x12\x04O\x02T\x03\x1a\x8e\x01\x20Creates\x20a\x20new\x20notificatio\
    n\x20channel,\x20representing\x20a\x20single\x20notification\n\x20endpoi\
    nt\x20such\x20as\x20an\x20email\x20address,\x20SMS\x20number,\x20or\x20P\
    agerDuty\x20service.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03O\x06\x1f\n\
    \x0c\n\x05\x06\0\x02\x04\x02\x12\x03O\x20@\n\x0c\n\x05\x06\0\x02\x04\x03\
    \x12\x03OK^\n\r\n\x05\x06\0\x02\x04\x04\x12\x04P\x04S\x06\n\x11\n\t\x06\
    \0\x02\x04\x04\xb0\xca\xbc\"\x12\x04P\x04S\x06\ni\n\x04\x06\0\x02\x05\
    \x12\x04X\x02]\x03\x1a[\x20Updates\x20a\x20notification\x20channel.\x20F\
    ields\x20not\x20specified\x20in\x20the\x20field\x20mask\n\x20remain\x20u\
    nchanged.\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03X\x06\x1f\n\x0c\n\x05\
    \x06\0\x02\x05\x02\x12\x03X\x20@\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03XK\
    ^\n\r\n\x05\x06\0\x02\x05\x04\x12\x04Y\x04\\\x06\n\x11\n\t\x06\0\x02\x05\
    \x04\xb0\xca\xbc\"\x12\x04Y\x04\\\x06\n/\n\x04\x06\0\x02\x06\x12\x04`\
    \x02d\x03\x1a!\x20Deletes\x20a\x20notification\x20channel.\n\n\x0c\n\x05\
    \x06\0\x02\x06\x01\x12\x03`\x06\x1f\n\x0c\n\x05\x06\0\x02\x06\x02\x12\
    \x03`\x20@\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03`K`\n\r\n\x05\x06\0\x02\
    \x06\x04\x12\x04a\x04c\x06\n\x11\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\x12\
    \x04a\x04c\x06\n\xa0\x01\n\x04\x06\0\x02\x07\x12\x04h\x02m\x03\x1a\x91\
    \x01\x20Causes\x20a\x20verification\x20code\x20to\x20be\x20delivered\x20\
    to\x20the\x20channel.\x20The\x20code\n\x20can\x20then\x20be\x20supplied\
    \x20in\x20`VerifyNotificationChannel`\x20to\x20verify\x20the\x20channel.\
    \n\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03h\x06-\n\x0c\n\x05\x06\0\x02\x07\
    \x02\x12\x03h.\\\n\x0c\n\x05\x06\0\x02\x07\x03\x12\x03hg|\n\r\n\x05\x06\
    \0\x02\x07\x04\x12\x04i\x04l\x06\n\x11\n\t\x06\0\x02\x07\x04\xb0\xca\xbc\
    \"\x12\x04i\x04l\x06\n\xba\n\n\x04\x06\0\x02\x08\x12\x06\x84\x01\x02\x89\
    \x01\x03\x1a\xa9\n\x20Requests\x20a\x20verification\x20code\x20for\x20an\
    \x20already\x20verified\x20channel\x20that\x20can\x20then\n\x20be\x20use\
    d\x20in\x20a\x20call\x20to\x20VerifyNotificationChannel()\x20on\x20a\x20\
    different\x20channel\n\x20with\x20an\x20equivalent\x20identity\x20in\x20\
    the\x20same\x20or\x20in\x20a\x20different\x20project.\x20This\n\x20makes\
    \x20it\x20possible\x20to\x20copy\x20a\x20channel\x20between\x20projects\
    \x20without\x20requiring\n\x20manual\x20reverification\x20of\x20the\x20c\
    hannel.\x20If\x20the\x20channel\x20is\x20not\x20in\x20the\n\x20verified\
    \x20state,\x20this\x20method\x20will\x20fail\x20(in\x20other\x20words,\
    \x20this\x20may\x20only\x20be\n\x20used\x20if\x20the\x20SendNotification\
    ChannelVerificationCode\x20and\n\x20VerifyNotificationChannel\x20paths\
    \x20have\x20already\x20been\x20used\x20to\x20put\x20the\x20given\n\x20ch\
    annel\x20into\x20the\x20verified\x20state).\n\n\x20There\x20is\x20no\x20\
    guarantee\x20that\x20the\x20verification\x20codes\x20returned\x20by\x20t\
    his\x20method\n\x20will\x20be\x20of\x20a\x20similar\x20structure\x20or\
    \x20form\x20as\x20the\x20ones\x20that\x20are\x20delivered\n\x20to\x20the\
    \x20channel\x20via\x20SendNotificationChannelVerificationCode;\x20while\
    \n\x20VerifyNotificationChannel()\x20will\x20recognize\x20both\x20the\
    \x20codes\x20delivered\x20via\n\x20SendNotificationChannelVerificationCo\
    de()\x20and\x20returned\x20from\n\x20GetNotificationChannelVerificationC\
    ode(),\x20it\x20is\x20typically\x20the\x20case\x20that\n\x20the\x20verif\
    ication\x20codes\x20delivered\x20via\n\x20SendNotificationChannelVerific\
    ationCode()\x20will\x20be\x20shorter\x20and\x20also\n\x20have\x20a\x20sh\
    orter\x20expiration\x20(e.g.\x20codes\x20such\x20as\x20\"G-123456\")\x20\
    whereas\n\x20GetVerificationCode()\x20will\x20typically\x20return\x20a\
    \x20much\x20longer,\x20websafe\x20base\n\x2064\x20encoded\x20string\x20t\
    hat\x20has\x20a\x20longer\x20expiration\x20time.\n\n\r\n\x05\x06\0\x02\
    \x08\x01\x12\x04\x84\x01\x06,\n\r\n\x05\x06\0\x02\x08\x02\x12\x04\x84\
    \x01-Z\n\x0e\n\x05\x06\0\x02\x08\x03\x12\x05\x84\x01e\x93\x01\n\x0f\n\
    \x05\x06\0\x02\x08\x04\x12\x06\x85\x01\x04\x88\x01\x06\n\x13\n\t\x06\0\
    \x02\x08\x04\xb0\xca\xbc\"\x12\x06\x85\x01\x04\x88\x01\x06\n\xaf\x01\n\
    \x04\x06\0\x02\t\x12\x06\x8e\x01\x02\x93\x01\x03\x1a\x9e\x01\x20Verifies\
    \x20a\x20`NotificationChannel`\x20by\x20proving\x20receipt\x20of\x20the\
    \x20code\n\x20delivered\x20to\x20the\x20channel\x20as\x20a\x20result\x20\
    of\x20calling\n\x20`SendNotificationChannelVerificationCode`.\n\n\r\n\
    \x05\x06\0\x02\t\x01\x12\x04\x8e\x01\x06\x1f\n\r\n\x05\x06\0\x02\t\x02\
    \x12\x04\x8e\x01\x20@\n\r\n\x05\x06\0\x02\t\x03\x12\x04\x8e\x01K^\n\x0f\
    \n\x05\x06\0\x02\t\x04\x12\x06\x8f\x01\x04\x92\x01\x06\n\x13\n\t\x06\0\
    \x02\t\x04\xb0\xca\xbc\"\x12\x06\x8f\x01\x04\x92\x01\x06\nA\n\x02\x04\0\
    \x12\x06\x97\x01\0\xac\x01\x01\x1a3\x20The\x20`ListNotificationChannelDe\
    scriptors`\x20request.\n\n\x0b\n\x03\x04\0\x01\x12\x04\x97\x01\x081\n\
    \xb6\x03\n\x04\x04\0\x02\0\x12\x04\xa1\x01\x02\x12\x1a\xa7\x03\x20The\
    \x20REST\x20resource\x20name\x20of\x20the\x20parent\x20from\x20which\x20\
    to\x20retrieve\n\x20the\x20notification\x20channel\x20descriptors.\x20Th\
    e\x20expected\x20syntax\x20is:\n\n\x20\x20\x20\x20\x20projects/[PROJECT_\
    ID]\n\n\x20Note\x20that\x20this\x20names\x20the\x20parent\x20container\
    \x20in\x20which\x20to\x20look\x20for\x20the\n\x20descriptors;\x20to\x20r\
    etrieve\x20a\x20single\x20descriptor\x20by\x20name,\x20use\x20the\n\x20[\
    GetNotificationChannelDescriptor][google.monitoring.v3.NotificationChann\
    elService.GetNotificationChannelDescriptor]\n\x20operation,\x20instead.\
    \n\n\r\n\x05\x04\0\x02\0\x05\x12\x04\xa1\x01\x02\x08\n\r\n\x05\x04\0\x02\
    \0\x01\x12\x04\xa1\x01\t\r\n\r\n\x05\x04\0\x02\0\x03\x12\x04\xa1\x01\x10\
    \x11\n\xa3\x01\n\x04\x04\0\x02\x01\x12\x04\xa6\x01\x02\x16\x1a\x94\x01\
    \x20The\x20maximum\x20number\x20of\x20results\x20to\x20return\x20in\x20a\
    \x20single\x20response.\x20If\n\x20not\x20set\x20to\x20a\x20positive\x20\
    number,\x20a\x20reasonable\x20value\x20will\x20be\x20chosen\x20by\x20the\
    \n\x20service.\n\n\r\n\x05\x04\0\x02\x01\x05\x12\x04\xa6\x01\x02\x07\n\r\
    \n\x05\x04\0\x02\x01\x01\x12\x04\xa6\x01\x08\x11\n\r\n\x05\x04\0\x02\x01\
    \x03\x12\x04\xa6\x01\x14\x15\n\x9f\x01\n\x04\x04\0\x02\x02\x12\x04\xab\
    \x01\x02\x18\x1a\x90\x01\x20If\x20non-empty,\x20`page_token`\x20must\x20\
    contain\x20a\x20value\x20returned\x20as\x20the\n\x20`next_page_token`\
    \x20in\x20a\x20previous\x20response\x20to\x20request\x20the\x20next\x20s\
    et\n\x20of\x20results.\n\n\r\n\x05\x04\0\x02\x02\x05\x12\x04\xab\x01\x02\
    \x08\n\r\n\x05\x04\0\x02\x02\x01\x12\x04\xab\x01\t\x13\n\r\n\x05\x04\0\
    \x02\x02\x03\x12\x04\xab\x01\x16\x17\nB\n\x02\x04\x01\x12\x06\xaf\x01\0\
    \xb9\x01\x01\x1a4\x20The\x20`ListNotificationChannelDescriptors`\x20resp\
    onse.\n\n\x0b\n\x03\x04\x01\x01\x12\x04\xaf\x01\x082\nm\n\x04\x04\x01\
    \x02\0\x12\x04\xb2\x01\x02A\x1a_\x20The\x20monitored\x20resource\x20desc\
    riptors\x20supported\x20for\x20the\x20specified\n\x20project,\x20optiona\
    lly\x20filtered.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\xb2\x01\x02\n\n\r\
    \n\x05\x04\x01\x02\0\x06\x12\x04\xb2\x01\x0b(\n\r\n\x05\x04\x01\x02\0\
    \x01\x12\x04\xb2\x01)<\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\xb2\x01?@\n\
    \xee\x01\n\x04\x04\x01\x02\x01\x12\x04\xb8\x01\x02\x1d\x1a\xdf\x01\x20If\
    \x20not\x20empty,\x20indicates\x20that\x20there\x20may\x20be\x20more\x20\
    results\x20that\x20match\n\x20the\x20request.\x20Use\x20the\x20value\x20\
    in\x20the\x20`page_token`\x20field\x20in\x20a\n\x20subsequent\x20request\
    \x20to\x20fetch\x20the\x20next\x20set\x20of\x20results.\x20If\x20empty,\
    \n\x20all\x20results\x20have\x20been\x20returned.\n\n\r\n\x05\x04\x01\
    \x02\x01\x05\x12\x04\xb8\x01\x02\x08\n\r\n\x05\x04\x01\x02\x01\x01\x12\
    \x04\xb8\x01\t\x18\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\xb8\x01\x1b\x1c\
    \n@\n\x02\x04\x02\x12\x06\xbc\x01\0\xc0\x01\x01\x1a2\x20The\x20`GetNotif\
    icationChannelDescriptor`\x20response.\n\n\x0b\n\x03\x04\x02\x01\x12\x04\
    \xbc\x01\x08/\n\x99\x01\n\x04\x04\x02\x02\0\x12\x04\xbf\x01\x02\x12\x1a\
    \x8a\x01\x20The\x20channel\x20type\x20for\x20which\x20to\x20execute\x20t\
    he\x20request.\x20The\x20format\x20is\n\x20`projects/[PROJECT_ID]/notifi\
    cationChannelDescriptors/{channel_type}`.\n\n\r\n\x05\x04\x02\x02\0\x05\
    \x12\x04\xbf\x01\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xbf\x01\t\r\
    \n\r\n\x05\x04\x02\x02\0\x03\x12\x04\xbf\x01\x10\x11\n8\n\x02\x04\x03\
    \x12\x06\xc3\x01\0\xd0\x01\x01\x1a*\x20The\x20`CreateNotificationChannel\
    `\x20request.\n\n\x0b\n\x03\x04\x03\x01\x12\x04\xc3\x01\x08(\n\x88\x03\n\
    \x04\x04\x03\x02\0\x12\x04\xcc\x01\x02\x12\x1a\xf9\x02\x20The\x20project\
    \x20on\x20which\x20to\x20execute\x20the\x20request.\x20The\x20format\x20\
    is:\n\n\x20\x20\x20\x20\x20projects/[PROJECT_ID]\n\n\x20Note\x20that\x20\
    this\x20names\x20the\x20container\x20into\x20which\x20the\x20channel\x20\
    will\x20be\n\x20written.\x20This\x20does\x20not\x20name\x20the\x20newly\
    \x20created\x20channel.\x20The\x20resulting\n\x20channel's\x20name\x20wi\
    ll\x20have\x20a\x20normalized\x20version\x20of\x20this\x20field\x20as\
    \x20a\x20prefix,\n\x20but\x20will\x20add\x20`/notificationChannels/[CHAN\
    NEL_ID]`\x20to\x20identify\x20the\x20channel.\n\n\r\n\x05\x04\x03\x02\0\
    \x05\x12\x04\xcc\x01\x02\x08\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\xcc\x01\
    \t\r\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xcc\x01\x10\x11\nF\n\x04\x04\
    \x03\x02\x01\x12\x04\xcf\x01\x02/\x1a8\x20The\x20definition\x20of\x20the\
    \x20`NotificationChannel`\x20to\x20create.\n\n\r\n\x05\x04\x03\x02\x01\
    \x06\x12\x04\xcf\x01\x02\x15\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\xcf\
    \x01\x16*\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\xcf\x01-.\n7\n\x02\x04\
    \x04\x12\x06\xd3\x01\0\xf5\x01\x01\x1a)\x20The\x20`ListNotificationChann\
    els`\x20request.\n\n\x0b\n\x03\x04\x04\x01\x12\x04\xd3\x01\x08'\n\x8a\
    \x03\n\x04\x04\x04\x02\0\x12\x04\xdb\x01\x02\x12\x1a\xfb\x02\x20The\x20p\
    roject\x20on\x20which\x20to\x20execute\x20the\x20request.\x20The\x20form\
    at\x20is\n\x20`projects/[PROJECT_ID]`.\x20That\x20is,\x20this\x20names\
    \x20the\x20container\n\x20in\x20which\x20to\x20look\x20for\x20the\x20not\
    ification\x20channels;\x20it\x20does\x20not\x20name\x20a\n\x20specific\
    \x20channel.\x20To\x20query\x20a\x20specific\x20channel\x20by\x20REST\
    \x20resource\x20name,\x20use\n\x20the\n\x20[`GetNotificationChannel`][go\
    ogle.monitoring.v3.NotificationChannelService.GetNotificationChannel]\n\
    \x20operation.\n\n\r\n\x05\x04\x04\x02\0\x05\x12\x04\xdb\x01\x02\x08\n\r\
    \n\x05\x04\x04\x02\0\x01\x12\x04\xdb\x01\t\r\n\r\n\x05\x04\x04\x02\0\x03\
    \x12\x04\xdb\x01\x10\x11\n\xe6\x01\n\x04\x04\x04\x02\x01\x12\x04\xe2\x01\
    \x02\x14\x1a\xd7\x01\x20If\x20provided,\x20this\x20field\x20specifies\
    \x20the\x20criteria\x20that\x20must\x20be\x20met\x20by\n\x20notification\
    \x20channels\x20to\x20be\x20included\x20in\x20the\x20response.\n\n\x20Fo\
    r\x20more\x20details,\x20see\x20[sorting\x20and\n\x20filtering](/monitor\
    ing/api/v3/sorting-and-filtering).\n\n\r\n\x05\x04\x04\x02\x01\x05\x12\
    \x04\xe2\x01\x02\x08\n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\xe2\x01\t\x0f\
    \n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\xe2\x01\x12\x13\n\xb9\x02\n\x04\
    \x04\x04\x02\x02\x12\x04\xea\x01\x02\x16\x1a\xaa\x02\x20A\x20comma-separ\
    ated\x20list\x20of\x20fields\x20by\x20which\x20to\x20sort\x20the\x20resu\
    lt.\x20Supports\n\x20the\x20same\x20set\x20of\x20fields\x20as\x20in\x20`\
    filter`.\x20Entries\x20can\x20be\x20prefixed\x20with\n\x20a\x20minus\x20\
    sign\x20to\x20sort\x20in\x20descending\x20rather\x20than\x20ascending\
    \x20order.\n\n\x20For\x20more\x20details,\x20see\x20[sorting\x20and\n\
    \x20filtering](/monitoring/api/v3/sorting-and-filtering).\n\n\r\n\x05\
    \x04\x04\x02\x02\x05\x12\x04\xea\x01\x02\x08\n\r\n\x05\x04\x04\x02\x02\
    \x01\x12\x04\xea\x01\t\x11\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\xea\x01\
    \x14\x15\n\xa3\x01\n\x04\x04\x04\x02\x03\x12\x04\xef\x01\x02\x16\x1a\x94\
    \x01\x20The\x20maximum\x20number\x20of\x20results\x20to\x20return\x20in\
    \x20a\x20single\x20response.\x20If\n\x20not\x20set\x20to\x20a\x20positiv\
    e\x20number,\x20a\x20reasonable\x20value\x20will\x20be\x20chosen\x20by\
    \x20the\n\x20service.\n\n\r\n\x05\x04\x04\x02\x03\x05\x12\x04\xef\x01\
    \x02\x07\n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\xef\x01\x08\x11\n\r\n\x05\
    \x04\x04\x02\x03\x03\x12\x04\xef\x01\x14\x15\n\x9f\x01\n\x04\x04\x04\x02\
    \x04\x12\x04\xf4\x01\x02\x18\x1a\x90\x01\x20If\x20non-empty,\x20`page_to\
    ken`\x20must\x20contain\x20a\x20value\x20returned\x20as\x20the\n\x20`nex\
    t_page_token`\x20in\x20a\x20previous\x20response\x20to\x20request\x20the\
    \x20next\x20set\n\x20of\x20results.\n\n\r\n\x05\x04\x04\x02\x04\x05\x12\
    \x04\xf4\x01\x02\x08\n\r\n\x05\x04\x04\x02\x04\x01\x12\x04\xf4\x01\t\x13\
    \n\r\n\x05\x04\x04\x02\x04\x03\x12\x04\xf4\x01\x16\x17\n8\n\x02\x04\x05\
    \x12\x06\xf8\x01\0\x81\x02\x01\x1a*\x20The\x20`ListNotificationChannels`\
    \x20response.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\xf8\x01\x08(\nL\n\x04\
    \x04\x05\x02\0\x12\x04\xfa\x01\x029\x1a>\x20The\x20notification\x20chann\
    els\x20defined\x20for\x20the\x20specified\x20project.\n\n\r\n\x05\x04\
    \x05\x02\0\x04\x12\x04\xfa\x01\x02\n\n\r\n\x05\x04\x05\x02\0\x06\x12\x04\
    \xfa\x01\x0b\x1e\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\xfa\x01\x1f4\n\r\n\
    \x05\x04\x05\x02\0\x03\x12\x04\xfa\x0178\n\xee\x01\n\x04\x04\x05\x02\x01\
    \x12\x04\x80\x02\x02\x1d\x1a\xdf\x01\x20If\x20not\x20empty,\x20indicates\
    \x20that\x20there\x20may\x20be\x20more\x20results\x20that\x20match\n\x20\
    the\x20request.\x20Use\x20the\x20value\x20in\x20the\x20`page_token`\x20f\
    ield\x20in\x20a\n\x20subsequent\x20request\x20to\x20fetch\x20the\x20next\
    \x20set\x20of\x20results.\x20If\x20empty,\n\x20all\x20results\x20have\
    \x20been\x20returned.\n\n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\x80\x02\
    \x02\x08\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\x80\x02\t\x18\n\r\n\x05\
    \x04\x05\x02\x01\x03\x12\x04\x80\x02\x1b\x1c\n5\n\x02\x04\x06\x12\x06\
    \x84\x02\0\x88\x02\x01\x1a'\x20The\x20`GetNotificationChannel`\x20reques\
    t.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\x84\x02\x08%\n\x87\x01\n\x04\x04\
    \x06\x02\0\x12\x04\x87\x02\x02\x12\x1ay\x20The\x20channel\x20for\x20whic\
    h\x20to\x20execute\x20the\x20request.\x20The\x20format\x20is\n\x20`proje\
    cts/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]`.\n\n\r\n\x05\x04\x06\
    \x02\0\x05\x12\x04\x87\x02\x02\x08\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\
    \x87\x02\t\r\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\x87\x02\x10\x11\n8\n\
    \x02\x04\x07\x12\x06\x8b\x02\0\x94\x02\x01\x1a*\x20The\x20`UpdateNotific\
    ationChannel`\x20request.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\x8b\x02\x08(\
    \n%\n\x04\x04\x07\x02\0\x12\x04\x8d\x02\x02,\x1a\x17\x20The\x20fields\
    \x20to\x20update.\n\n\r\n\x05\x04\x07\x02\0\x06\x12\x04\x8d\x02\x02\x1b\
    \n\r\n\x05\x04\x07\x02\0\x01\x12\x04\x8d\x02\x1c'\n\r\n\x05\x04\x07\x02\
    \0\x03\x12\x04\x8d\x02*+\n\xf1\x01\n\x04\x04\x07\x02\x01\x12\x04\x93\x02\
    \x02/\x1a\xe2\x01\x20A\x20description\x20of\x20the\x20changes\x20to\x20b\
    e\x20applied\x20to\x20the\x20specified\n\x20notification\x20channel.\x20\
    The\x20description\x20must\x20provide\x20a\x20definition\x20for\n\x20fie\
    lds\x20to\x20be\x20updated;\x20the\x20names\x20of\x20these\x20fields\x20\
    should\x20also\x20be\n\x20included\x20in\x20the\x20`update_mask`.\n\n\r\
    \n\x05\x04\x07\x02\x01\x06\x12\x04\x93\x02\x02\x15\n\r\n\x05\x04\x07\x02\
    \x01\x01\x12\x04\x93\x02\x16*\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\x93\
    \x02-.\n8\n\x02\x04\x08\x12\x06\x97\x02\0\xa1\x02\x01\x1a*\x20The\x20`De\
    leteNotificationChannel`\x20request.\n\n\x0b\n\x03\x04\x08\x01\x12\x04\
    \x97\x02\x08(\n\x87\x01\n\x04\x04\x08\x02\0\x12\x04\x9a\x02\x02\x12\x1ay\
    \x20The\x20channel\x20for\x20which\x20to\x20execute\x20the\x20request.\
    \x20The\x20format\x20is\n\x20`projects/[PROJECT_ID]/notificationChannels\
    /[CHANNEL_ID]`.\n\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\x9a\x02\x02\x08\n\
    \r\n\x05\x04\x08\x02\0\x01\x12\x04\x9a\x02\t\r\n\r\n\x05\x04\x08\x02\0\
    \x03\x12\x04\x9a\x02\x10\x11\n\x9e\x02\n\x04\x04\x08\x02\x01\x12\x04\xa0\
    \x02\x02\x11\x1a\x8f\x02\x20If\x20true,\x20the\x20notification\x20channe\
    l\x20will\x20be\x20deleted\x20regardless\x20of\x20its\n\x20use\x20in\x20\
    alert\x20policies\x20(the\x20policies\x20will\x20be\x20updated\x20to\x20\
    remove\x20the\n\x20channel).\x20If\x20false,\x20channels\x20that\x20are\
    \x20still\x20referenced\x20by\x20an\x20existing\n\x20alerting\x20policy\
    \x20will\x20fail\x20to\x20be\x20deleted\x20in\x20a\x20delete\x20operatio\
    n.\n\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\xa0\x02\x02\x06\n\r\n\x05\x04\
    \x08\x02\x01\x01\x12\x04\xa0\x02\x07\x0c\n\r\n\x05\x04\x08\x02\x01\x03\
    \x12\x04\xa0\x02\x0f\x10\nF\n\x02\x04\t\x12\x06\xa4\x02\0\xa7\x02\x01\
    \x1a8\x20The\x20`SendNotificationChannelVerificationCode`\x20request.\n\
    \n\x0b\n\x03\x04\t\x01\x12\x04\xa4\x02\x086\nN\n\x04\x04\t\x02\0\x12\x04\
    \xa6\x02\x02\x12\x1a@\x20The\x20notification\x20channel\x20to\x20which\
    \x20to\x20send\x20a\x20verification\x20code.\n\n\r\n\x05\x04\t\x02\0\x05\
    \x12\x04\xa6\x02\x02\x08\n\r\n\x05\x04\t\x02\0\x01\x12\x04\xa6\x02\t\r\n\
    \r\n\x05\x04\t\x02\0\x03\x12\x04\xa6\x02\x10\x11\nE\n\x02\x04\n\x12\x06\
    \xaa\x02\0\xba\x02\x01\x1a7\x20The\x20`GetNotificationChannelVerificatio\
    nCode`\x20request.\n\n\x0b\n\x03\x04\n\x01\x12\x04\xaa\x02\x085\n\xdf\
    \x01\n\x04\x04\n\x02\0\x12\x04\xae\x02\x02\x12\x1a\xd0\x01\x20The\x20not\
    ification\x20channel\x20for\x20which\x20a\x20verification\x20code\x20is\
    \x20to\x20be\x20generated\n\x20and\x20retrieved.\x20This\x20must\x20name\
    \x20a\x20channel\x20that\x20is\x20already\x20verified;\x20if\n\x20the\
    \x20specified\x20channel\x20is\x20not\x20verified,\x20the\x20request\x20\
    will\x20fail.\n\n\r\n\x05\x04\n\x02\0\x05\x12\x04\xae\x02\x02\x08\n\r\n\
    \x05\x04\n\x02\0\x01\x12\x04\xae\x02\t\r\n\r\n\x05\x04\n\x02\0\x03\x12\
    \x04\xae\x02\x10\x11\n\x82\x05\n\x04\x04\n\x02\x01\x12\x04\xb9\x02\x02,\
    \x1a\xf3\x04\x20The\x20desired\x20expiration\x20time.\x20If\x20specified\
    ,\x20the\x20API\x20will\x20guarantee\x20that\n\x20the\x20returned\x20cod\
    e\x20will\x20not\x20be\x20valid\x20after\x20the\x20specified\x20timestam\
    p;\n\x20however,\x20the\x20API\x20cannot\x20guarantee\x20that\x20the\x20\
    returned\x20code\x20will\x20be\n\x20valid\x20for\x20at\x20least\x20as\
    \x20long\x20as\x20the\x20requested\x20time\x20(the\x20API\x20puts\x20an\
    \x20upper\n\x20bound\x20on\x20the\x20amount\x20of\x20time\x20for\x20whic\
    h\x20a\x20code\x20may\x20be\x20valid).\x20If\x20omitted,\n\x20a\x20defau\
    lt\x20expiration\x20will\x20be\x20used,\x20which\x20may\x20be\x20less\
    \x20than\x20the\x20max\n\x20permissible\x20expiration\x20(so\x20specifyi\
    ng\x20an\x20expiration\x20may\x20extend\x20the\n\x20code's\x20lifetime\
    \x20over\x20omitting\x20an\x20expiration,\x20even\x20though\x20the\x20AP\
    I\x20does\n\x20impose\x20an\x20upper\x20limit\x20on\x20the\x20maximum\
    \x20expiration\x20that\x20is\x20permitted).\n\n\r\n\x05\x04\n\x02\x01\
    \x06\x12\x04\xb9\x02\x02\x1b\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\xb9\x02\
    \x1c'\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\xb9\x02*+\nE\n\x02\x04\x0b\x12\
    \x06\xbd\x02\0\xc8\x02\x01\x1a7\x20The\x20`GetNotificationChannelVerific\
    ationCode`\x20request.\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\xbd\x02\x086\n\
    \x9c\x02\n\x04\x04\x0b\x02\0\x12\x04\xc2\x02\x02\x12\x1a\x8d\x02\x20The\
    \x20verification\x20code,\x20which\x20may\x20be\x20used\x20to\x20verify\
    \x20other\x20channels\n\x20that\x20have\x20an\x20equivalent\x20identity\
    \x20(i.e.\x20other\x20channels\x20of\x20the\x20same\n\x20type\x20with\
    \x20the\x20same\x20fingerprint\x20such\x20as\x20other\x20email\x20channe\
    ls\x20with\n\x20the\x20same\x20email\x20address\x20or\x20other\x20sms\
    \x20channels\x20with\x20the\x20same\x20number).\n\n\r\n\x05\x04\x0b\x02\
    \0\x05\x12\x04\xc2\x02\x02\x08\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\xc2\
    \x02\t\r\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xc2\x02\x10\x11\n\xe1\x01\n\
    \x04\x04\x0b\x02\x01\x12\x04\xc7\x02\x02,\x1a\xd2\x01\x20The\x20expirati\
    on\x20time\x20associated\x20with\x20the\x20code\x20that\x20was\x20return\
    ed.\x20If\n\x20an\x20expiration\x20was\x20provided\x20in\x20the\x20reque\
    st,\x20this\x20is\x20the\x20minimum\x20of\x20the\n\x20requested\x20expir\
    ation\x20in\x20the\x20request\x20and\x20the\x20max\x20permitted\x20expir\
    ation.\n\n\r\n\x05\x04\x0b\x02\x01\x06\x12\x04\xc7\x02\x02\x1b\n\r\n\x05\
    \x04\x0b\x02\x01\x01\x12\x04\xc7\x02\x1c'\n\r\n\x05\x04\x0b\x02\x01\x03\
    \x12\x04\xc7\x02*+\n8\n\x02\x04\x0c\x12\x06\xcb\x02\0\xd7\x02\x01\x1a*\
    \x20The\x20`VerifyNotificationChannel`\x20request.\n\n\x0b\n\x03\x04\x0c\
    \x01\x12\x04\xcb\x02\x08(\n3\n\x04\x04\x0c\x02\0\x12\x04\xcd\x02\x02\x12\
    \x1a%\x20The\x20notification\x20channel\x20to\x20verify.\n\n\r\n\x05\x04\
    \x0c\x02\0\x05\x12\x04\xcd\x02\x02\x08\n\r\n\x05\x04\x0c\x02\0\x01\x12\
    \x04\xcd\x02\t\r\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\xcd\x02\x10\x11\n\
    \xd5\x03\n\x04\x04\x0c\x02\x01\x12\x04\xd6\x02\x02\x12\x1a\xc6\x03\x20Th\
    e\x20verification\x20code\x20that\x20was\x20delivered\x20to\x20the\x20ch\
    annel\x20as\n\x20a\x20result\x20of\x20invoking\x20the\x20`SendNotificati\
    onChannelVerificationCode`\x20API\n\x20method\x20or\x20that\x20was\x20re\
    trieved\x20from\x20a\x20verified\x20channel\x20via\n\x20`GetNotification\
    ChannelVerificationCode`.\x20For\x20example,\x20one\x20might\x20have\n\
    \x20\"G-123456\"\x20or\x20\"TKNZGhhd2EyN3I1MnRnMjRv\"\x20(in\x20general,\
    \x20one\x20is\x20only\n\x20guaranteed\x20that\x20the\x20code\x20is\x20va\
    lid\x20UTF-8;\x20one\x20should\x20not\n\x20make\x20any\x20assumptions\
    \x20regarding\x20the\x20structure\x20or\x20format\x20of\x20the\x20code).\
    \n\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xd6\x02\x02\x08\n\r\n\x05\x04\
    \x0c\x02\x01\x01\x12\x04\xd6\x02\t\r\n\r\n\x05\x04\x0c\x02\x01\x03\x12\
    \x04\xd6\x02\x10\x11b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
