// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/monitoring/v3/dropped_labels.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct DroppedLabels {
    // message fields
    pub label: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DroppedLabels {
    fn default() -> &'a DroppedLabels {
        <DroppedLabels as ::protobuf::Message>::default_instance()
    }
}

impl DroppedLabels {
    pub fn new() -> DroppedLabels {
        ::std::default::Default::default()
    }

    // repeated .google.monitoring.v3.DroppedLabels.LabelEntry label = 1;


    pub fn get_label(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.label = v;
    }

    // Mutable pointer to the field.
    pub fn mut_label(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.label, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for DroppedLabels {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.label)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.label);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.label, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DroppedLabels {
        DroppedLabels::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &DroppedLabels| { &m.label },
                |m: &mut DroppedLabels| { &mut m.label },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DroppedLabels>(
                "DroppedLabels",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DroppedLabels {
        static instance: ::protobuf::rt::LazyV2<DroppedLabels> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DroppedLabels::new)
    }
}

impl ::protobuf::Clear for DroppedLabels {
    fn clear(&mut self) {
        self.label.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DroppedLabels {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DroppedLabels {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)google/monitoring/v3/dropped_labels.proto\x12\x14google.monitoring.v3\
    \"\x8f\x01\n\rDroppedLabels\x12D\n\x05label\x18\x01\x20\x03(\x0b2..googl\
    e.monitoring.v3.DroppedLabels.LabelEntryR\x05label\x1a8\n\nLabelEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\
    \x20\x01(\tR\x05value:\x028\x01B\xaa\x01\n\x18com.google.monitoring.v3B\
    \x12DroppedLabelsProtoP\x01Z>google.golang.org/genproto/googleapis/monit\
    oring/v3;monitoring\xaa\x02\x1aGoogle.Cloud.Monitoring.V3\xca\x02\x1aGoo\
    gle\\Cloud\\Monitoring\\V3J\xa1\r\n\x06\x12\x04\x0f\0,\x01\n\xbe\x04\n\
    \x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LL\
    C.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202\
    .0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20fil\
    e\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20m\
    ay\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x1d\n\x08\n\x01\x08\x12\
    \x03\x13\07\n\t\n\x02\x08%\x12\x03\x13\07\n\x08\n\x01\x08\x12\x03\x14\0U\
    \n\t\n\x02\x08\x0b\x12\x03\x14\0U\n\x08\n\x01\x08\x12\x03\x15\0\"\n\t\n\
    \x02\x08\n\x12\x03\x15\0\"\n\x08\n\x01\x08\x12\x03\x16\03\n\t\n\x02\x08\
    \x08\x12\x03\x16\03\n\x08\n\x01\x08\x12\x03\x17\01\n\t\n\x02\x08\x01\x12\
    \x03\x17\01\n\x08\n\x01\x08\x12\x03\x18\07\n\t\n\x02\x08)\x12\x03\x18\07\
    \n\xbf\x06\n\x02\x04\0\x12\x04)\0,\x01\x1a\xb2\x06\x20A\x20set\x20of\x20\
    (label,\x20value)\x20pairs\x20which\x20were\x20dropped\x20during\x20aggr\
    egation,\x20attached\n\x20to\x20google.api.Distribution.Exemplars\x20in\
    \x20google.api.Distribution\x20values\x20during\n\x20aggregation.\n\n\
    \x20These\x20values\x20are\x20used\x20in\x20combination\x20with\x20the\
    \x20label\x20values\x20that\x20remain\x20on\x20the\n\x20aggregated\x20Di\
    stribution\x20timeseries\x20to\x20construct\x20the\x20full\x20label\x20s\
    et\x20for\x20the\n\x20exemplar\x20values.\x20\x20The\x20resulting\x20ful\
    l\x20label\x20set\x20may\x20be\x20used\x20to\x20identify\x20the\n\x20spe\
    cific\x20task/job/instance\x20(for\x20example)\x20which\x20may\x20be\x20\
    contributing\x20to\x20a\n\x20long-tail,\x20while\x20allowing\x20the\x20s\
    torage\x20savings\x20of\x20only\x20storing\x20aggregated\n\x20distributi\
    on\x20values\x20for\x20a\x20large\x20group.\n\n\x20Note\x20that\x20there\
    \x20are\x20no\x20guarantees\x20on\x20ordering\x20of\x20the\x20labels\x20\
    from\n\x20exemplar-to-exemplar\x20and\x20from\x20distribution-to-distrib\
    ution\x20in\x20the\x20same\n\x20stream,\x20and\x20there\x20may\x20be\x20\
    duplicates.\x20\x20It\x20is\x20up\x20to\x20clients\x20to\x20resolve\x20a\
    ny\n\x20ambiguities.\n\n\n\n\x03\x04\0\x01\x12\x03)\x08\x15\nV\n\x04\x04\
    \0\x02\0\x12\x03+\x02\x20\x1aI\x20Map\x20from\x20label\x20to\x20its\x20v\
    alue,\x20for\x20all\x20labels\x20dropped\x20in\x20any\x20aggregation.\n\
    \n\x0c\n\x05\x04\0\x02\0\x06\x12\x03+\x02\x15\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03+\x16\x1b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03+\x1e\x1fb\x06p\
    roto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
