// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/monitoring/v3/metric_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct ListMonitoredResourceDescriptorsRequest {
    // message fields
    pub name: ::std::string::String,
    pub filter: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListMonitoredResourceDescriptorsRequest {
    fn default() -> &'a ListMonitoredResourceDescriptorsRequest {
        <ListMonitoredResourceDescriptorsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListMonitoredResourceDescriptorsRequest {
    pub fn new() -> ListMonitoredResourceDescriptorsRequest {
        ::std::default::Default::default()
    }

    // string name = 5;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string filter = 2;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // int32 page_size = 3;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 4;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListMonitoredResourceDescriptorsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.name);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.filter);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(5, &self.name)?;
        }
        if !self.filter.is_empty() {
            os.write_string(2, &self.filter)?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(4, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListMonitoredResourceDescriptorsRequest {
        ListMonitoredResourceDescriptorsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ListMonitoredResourceDescriptorsRequest| { &m.name },
                |m: &mut ListMonitoredResourceDescriptorsRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &ListMonitoredResourceDescriptorsRequest| { &m.filter },
                |m: &mut ListMonitoredResourceDescriptorsRequest| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListMonitoredResourceDescriptorsRequest| { &m.page_size },
                |m: &mut ListMonitoredResourceDescriptorsRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListMonitoredResourceDescriptorsRequest| { &m.page_token },
                |m: &mut ListMonitoredResourceDescriptorsRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListMonitoredResourceDescriptorsRequest>(
                "ListMonitoredResourceDescriptorsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListMonitoredResourceDescriptorsRequest {
        static instance: ::protobuf::rt::LazyV2<ListMonitoredResourceDescriptorsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListMonitoredResourceDescriptorsRequest::new)
    }
}

impl ::protobuf::Clear for ListMonitoredResourceDescriptorsRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.filter.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListMonitoredResourceDescriptorsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListMonitoredResourceDescriptorsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListMonitoredResourceDescriptorsResponse {
    // message fields
    pub resource_descriptors: ::protobuf::RepeatedField<super::monitored_resource::MonitoredResourceDescriptor>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListMonitoredResourceDescriptorsResponse {
    fn default() -> &'a ListMonitoredResourceDescriptorsResponse {
        <ListMonitoredResourceDescriptorsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListMonitoredResourceDescriptorsResponse {
    pub fn new() -> ListMonitoredResourceDescriptorsResponse {
        ::std::default::Default::default()
    }

    // repeated .google.api.MonitoredResourceDescriptor resource_descriptors = 1;


    pub fn get_resource_descriptors(&self) -> &[super::monitored_resource::MonitoredResourceDescriptor] {
        &self.resource_descriptors
    }
    pub fn clear_resource_descriptors(&mut self) {
        self.resource_descriptors.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_descriptors(&mut self, v: ::protobuf::RepeatedField<super::monitored_resource::MonitoredResourceDescriptor>) {
        self.resource_descriptors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resource_descriptors(&mut self) -> &mut ::protobuf::RepeatedField<super::monitored_resource::MonitoredResourceDescriptor> {
        &mut self.resource_descriptors
    }

    // Take field
    pub fn take_resource_descriptors(&mut self) -> ::protobuf::RepeatedField<super::monitored_resource::MonitoredResourceDescriptor> {
        ::std::mem::replace(&mut self.resource_descriptors, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListMonitoredResourceDescriptorsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.resource_descriptors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.resource_descriptors)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.resource_descriptors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.resource_descriptors {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListMonitoredResourceDescriptorsResponse {
        ListMonitoredResourceDescriptorsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::monitored_resource::MonitoredResourceDescriptor>>(
                "resource_descriptors",
                |m: &ListMonitoredResourceDescriptorsResponse| { &m.resource_descriptors },
                |m: &mut ListMonitoredResourceDescriptorsResponse| { &mut m.resource_descriptors },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListMonitoredResourceDescriptorsResponse| { &m.next_page_token },
                |m: &mut ListMonitoredResourceDescriptorsResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListMonitoredResourceDescriptorsResponse>(
                "ListMonitoredResourceDescriptorsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListMonitoredResourceDescriptorsResponse {
        static instance: ::protobuf::rt::LazyV2<ListMonitoredResourceDescriptorsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListMonitoredResourceDescriptorsResponse::new)
    }
}

impl ::protobuf::Clear for ListMonitoredResourceDescriptorsResponse {
    fn clear(&mut self) {
        self.resource_descriptors.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListMonitoredResourceDescriptorsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListMonitoredResourceDescriptorsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMonitoredResourceDescriptorRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMonitoredResourceDescriptorRequest {
    fn default() -> &'a GetMonitoredResourceDescriptorRequest {
        <GetMonitoredResourceDescriptorRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMonitoredResourceDescriptorRequest {
    pub fn new() -> GetMonitoredResourceDescriptorRequest {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetMonitoredResourceDescriptorRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMonitoredResourceDescriptorRequest {
        GetMonitoredResourceDescriptorRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetMonitoredResourceDescriptorRequest| { &m.name },
                |m: &mut GetMonitoredResourceDescriptorRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetMonitoredResourceDescriptorRequest>(
                "GetMonitoredResourceDescriptorRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetMonitoredResourceDescriptorRequest {
        static instance: ::protobuf::rt::LazyV2<GetMonitoredResourceDescriptorRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetMonitoredResourceDescriptorRequest::new)
    }
}

impl ::protobuf::Clear for GetMonitoredResourceDescriptorRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMonitoredResourceDescriptorRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMonitoredResourceDescriptorRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListMetricDescriptorsRequest {
    // message fields
    pub name: ::std::string::String,
    pub filter: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListMetricDescriptorsRequest {
    fn default() -> &'a ListMetricDescriptorsRequest {
        <ListMetricDescriptorsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListMetricDescriptorsRequest {
    pub fn new() -> ListMetricDescriptorsRequest {
        ::std::default::Default::default()
    }

    // string name = 5;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string filter = 2;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // int32 page_size = 3;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 4;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListMetricDescriptorsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.name);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.filter);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(5, &self.name)?;
        }
        if !self.filter.is_empty() {
            os.write_string(2, &self.filter)?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(4, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListMetricDescriptorsRequest {
        ListMetricDescriptorsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ListMetricDescriptorsRequest| { &m.name },
                |m: &mut ListMetricDescriptorsRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &ListMetricDescriptorsRequest| { &m.filter },
                |m: &mut ListMetricDescriptorsRequest| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListMetricDescriptorsRequest| { &m.page_size },
                |m: &mut ListMetricDescriptorsRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListMetricDescriptorsRequest| { &m.page_token },
                |m: &mut ListMetricDescriptorsRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListMetricDescriptorsRequest>(
                "ListMetricDescriptorsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListMetricDescriptorsRequest {
        static instance: ::protobuf::rt::LazyV2<ListMetricDescriptorsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListMetricDescriptorsRequest::new)
    }
}

impl ::protobuf::Clear for ListMetricDescriptorsRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.filter.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListMetricDescriptorsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListMetricDescriptorsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListMetricDescriptorsResponse {
    // message fields
    pub metric_descriptors: ::protobuf::RepeatedField<super::metric_api::MetricDescriptor>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListMetricDescriptorsResponse {
    fn default() -> &'a ListMetricDescriptorsResponse {
        <ListMetricDescriptorsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListMetricDescriptorsResponse {
    pub fn new() -> ListMetricDescriptorsResponse {
        ::std::default::Default::default()
    }

    // repeated .google.api.MetricDescriptor metric_descriptors = 1;


    pub fn get_metric_descriptors(&self) -> &[super::metric_api::MetricDescriptor] {
        &self.metric_descriptors
    }
    pub fn clear_metric_descriptors(&mut self) {
        self.metric_descriptors.clear();
    }

    // Param is passed by value, moved
    pub fn set_metric_descriptors(&mut self, v: ::protobuf::RepeatedField<super::metric_api::MetricDescriptor>) {
        self.metric_descriptors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metric_descriptors(&mut self) -> &mut ::protobuf::RepeatedField<super::metric_api::MetricDescriptor> {
        &mut self.metric_descriptors
    }

    // Take field
    pub fn take_metric_descriptors(&mut self) -> ::protobuf::RepeatedField<super::metric_api::MetricDescriptor> {
        ::std::mem::replace(&mut self.metric_descriptors, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListMetricDescriptorsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.metric_descriptors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.metric_descriptors)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.metric_descriptors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.metric_descriptors {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListMetricDescriptorsResponse {
        ListMetricDescriptorsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metric_api::MetricDescriptor>>(
                "metric_descriptors",
                |m: &ListMetricDescriptorsResponse| { &m.metric_descriptors },
                |m: &mut ListMetricDescriptorsResponse| { &mut m.metric_descriptors },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListMetricDescriptorsResponse| { &m.next_page_token },
                |m: &mut ListMetricDescriptorsResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListMetricDescriptorsResponse>(
                "ListMetricDescriptorsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListMetricDescriptorsResponse {
        static instance: ::protobuf::rt::LazyV2<ListMetricDescriptorsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListMetricDescriptorsResponse::new)
    }
}

impl ::protobuf::Clear for ListMetricDescriptorsResponse {
    fn clear(&mut self) {
        self.metric_descriptors.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListMetricDescriptorsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListMetricDescriptorsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMetricDescriptorRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMetricDescriptorRequest {
    fn default() -> &'a GetMetricDescriptorRequest {
        <GetMetricDescriptorRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMetricDescriptorRequest {
    pub fn new() -> GetMetricDescriptorRequest {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetMetricDescriptorRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMetricDescriptorRequest {
        GetMetricDescriptorRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetMetricDescriptorRequest| { &m.name },
                |m: &mut GetMetricDescriptorRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetMetricDescriptorRequest>(
                "GetMetricDescriptorRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetMetricDescriptorRequest {
        static instance: ::protobuf::rt::LazyV2<GetMetricDescriptorRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetMetricDescriptorRequest::new)
    }
}

impl ::protobuf::Clear for GetMetricDescriptorRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMetricDescriptorRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMetricDescriptorRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateMetricDescriptorRequest {
    // message fields
    pub name: ::std::string::String,
    pub metric_descriptor: ::protobuf::SingularPtrField<super::metric_api::MetricDescriptor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateMetricDescriptorRequest {
    fn default() -> &'a CreateMetricDescriptorRequest {
        <CreateMetricDescriptorRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateMetricDescriptorRequest {
    pub fn new() -> CreateMetricDescriptorRequest {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.api.MetricDescriptor metric_descriptor = 2;


    pub fn get_metric_descriptor(&self) -> &super::metric_api::MetricDescriptor {
        self.metric_descriptor.as_ref().unwrap_or_else(|| <super::metric_api::MetricDescriptor as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metric_descriptor(&mut self) {
        self.metric_descriptor.clear();
    }

    pub fn has_metric_descriptor(&self) -> bool {
        self.metric_descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metric_descriptor(&mut self, v: super::metric_api::MetricDescriptor) {
        self.metric_descriptor = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric_descriptor(&mut self) -> &mut super::metric_api::MetricDescriptor {
        if self.metric_descriptor.is_none() {
            self.metric_descriptor.set_default();
        }
        self.metric_descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_metric_descriptor(&mut self) -> super::metric_api::MetricDescriptor {
        self.metric_descriptor.take().unwrap_or_else(|| super::metric_api::MetricDescriptor::new())
    }
}

impl ::protobuf::Message for CreateMetricDescriptorRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.metric_descriptor {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metric_descriptor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if let Some(ref v) = self.metric_descriptor.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if let Some(ref v) = self.metric_descriptor.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateMetricDescriptorRequest {
        CreateMetricDescriptorRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &CreateMetricDescriptorRequest| { &m.name },
                |m: &mut CreateMetricDescriptorRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metric_api::MetricDescriptor>>(
                "metric_descriptor",
                |m: &CreateMetricDescriptorRequest| { &m.metric_descriptor },
                |m: &mut CreateMetricDescriptorRequest| { &mut m.metric_descriptor },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateMetricDescriptorRequest>(
                "CreateMetricDescriptorRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateMetricDescriptorRequest {
        static instance: ::protobuf::rt::LazyV2<CreateMetricDescriptorRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateMetricDescriptorRequest::new)
    }
}

impl ::protobuf::Clear for CreateMetricDescriptorRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.metric_descriptor.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateMetricDescriptorRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateMetricDescriptorRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteMetricDescriptorRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteMetricDescriptorRequest {
    fn default() -> &'a DeleteMetricDescriptorRequest {
        <DeleteMetricDescriptorRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteMetricDescriptorRequest {
    pub fn new() -> DeleteMetricDescriptorRequest {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteMetricDescriptorRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteMetricDescriptorRequest {
        DeleteMetricDescriptorRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteMetricDescriptorRequest| { &m.name },
                |m: &mut DeleteMetricDescriptorRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteMetricDescriptorRequest>(
                "DeleteMetricDescriptorRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteMetricDescriptorRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteMetricDescriptorRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteMetricDescriptorRequest::new)
    }
}

impl ::protobuf::Clear for DeleteMetricDescriptorRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteMetricDescriptorRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteMetricDescriptorRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListTimeSeriesRequest {
    // message fields
    pub name: ::std::string::String,
    pub filter: ::std::string::String,
    pub interval: ::protobuf::SingularPtrField<super::common::TimeInterval>,
    pub aggregation: ::protobuf::SingularPtrField<super::common::Aggregation>,
    pub order_by: ::std::string::String,
    pub view: ListTimeSeriesRequest_TimeSeriesView,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListTimeSeriesRequest {
    fn default() -> &'a ListTimeSeriesRequest {
        <ListTimeSeriesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListTimeSeriesRequest {
    pub fn new() -> ListTimeSeriesRequest {
        ::std::default::Default::default()
    }

    // string name = 10;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string filter = 2;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // .google.monitoring.v3.TimeInterval interval = 4;


    pub fn get_interval(&self) -> &super::common::TimeInterval {
        self.interval.as_ref().unwrap_or_else(|| <super::common::TimeInterval as ::protobuf::Message>::default_instance())
    }
    pub fn clear_interval(&mut self) {
        self.interval.clear();
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: super::common::TimeInterval) {
        self.interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interval(&mut self) -> &mut super::common::TimeInterval {
        if self.interval.is_none() {
            self.interval.set_default();
        }
        self.interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_interval(&mut self) -> super::common::TimeInterval {
        self.interval.take().unwrap_or_else(|| super::common::TimeInterval::new())
    }

    // .google.monitoring.v3.Aggregation aggregation = 5;


    pub fn get_aggregation(&self) -> &super::common::Aggregation {
        self.aggregation.as_ref().unwrap_or_else(|| <super::common::Aggregation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_aggregation(&mut self) {
        self.aggregation.clear();
    }

    pub fn has_aggregation(&self) -> bool {
        self.aggregation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_aggregation(&mut self, v: super::common::Aggregation) {
        self.aggregation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_aggregation(&mut self) -> &mut super::common::Aggregation {
        if self.aggregation.is_none() {
            self.aggregation.set_default();
        }
        self.aggregation.as_mut().unwrap()
    }

    // Take field
    pub fn take_aggregation(&mut self) -> super::common::Aggregation {
        self.aggregation.take().unwrap_or_else(|| super::common::Aggregation::new())
    }

    // string order_by = 6;


    pub fn get_order_by(&self) -> &str {
        &self.order_by
    }
    pub fn clear_order_by(&mut self) {
        self.order_by.clear();
    }

    // Param is passed by value, moved
    pub fn set_order_by(&mut self, v: ::std::string::String) {
        self.order_by = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_order_by(&mut self) -> &mut ::std::string::String {
        &mut self.order_by
    }

    // Take field
    pub fn take_order_by(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.order_by, ::std::string::String::new())
    }

    // .google.monitoring.v3.ListTimeSeriesRequest.TimeSeriesView view = 7;


    pub fn get_view(&self) -> ListTimeSeriesRequest_TimeSeriesView {
        self.view
    }
    pub fn clear_view(&mut self) {
        self.view = ListTimeSeriesRequest_TimeSeriesView::FULL;
    }

    // Param is passed by value, moved
    pub fn set_view(&mut self, v: ListTimeSeriesRequest_TimeSeriesView) {
        self.view = v;
    }

    // int32 page_size = 8;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 9;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListTimeSeriesRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.interval {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.aggregation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.interval)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.aggregation)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.order_by)?;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.view, 7, &mut self.unknown_fields)?
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.name);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.filter);
        }
        if let Some(ref v) = self.interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.aggregation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.order_by.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.order_by);
        }
        if self.view != ListTimeSeriesRequest_TimeSeriesView::FULL {
            my_size += ::protobuf::rt::enum_size(7, self.view);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(8, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(10, &self.name)?;
        }
        if !self.filter.is_empty() {
            os.write_string(2, &self.filter)?;
        }
        if let Some(ref v) = self.interval.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.aggregation.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.order_by.is_empty() {
            os.write_string(6, &self.order_by)?;
        }
        if self.view != ListTimeSeriesRequest_TimeSeriesView::FULL {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&self.view))?;
        }
        if self.page_size != 0 {
            os.write_int32(8, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(9, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListTimeSeriesRequest {
        ListTimeSeriesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ListTimeSeriesRequest| { &m.name },
                |m: &mut ListTimeSeriesRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &ListTimeSeriesRequest| { &m.filter },
                |m: &mut ListTimeSeriesRequest| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::TimeInterval>>(
                "interval",
                |m: &ListTimeSeriesRequest| { &m.interval },
                |m: &mut ListTimeSeriesRequest| { &mut m.interval },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Aggregation>>(
                "aggregation",
                |m: &ListTimeSeriesRequest| { &m.aggregation },
                |m: &mut ListTimeSeriesRequest| { &mut m.aggregation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "order_by",
                |m: &ListTimeSeriesRequest| { &m.order_by },
                |m: &mut ListTimeSeriesRequest| { &mut m.order_by },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ListTimeSeriesRequest_TimeSeriesView>>(
                "view",
                |m: &ListTimeSeriesRequest| { &m.view },
                |m: &mut ListTimeSeriesRequest| { &mut m.view },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListTimeSeriesRequest| { &m.page_size },
                |m: &mut ListTimeSeriesRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListTimeSeriesRequest| { &m.page_token },
                |m: &mut ListTimeSeriesRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListTimeSeriesRequest>(
                "ListTimeSeriesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListTimeSeriesRequest {
        static instance: ::protobuf::rt::LazyV2<ListTimeSeriesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListTimeSeriesRequest::new)
    }
}

impl ::protobuf::Clear for ListTimeSeriesRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.filter.clear();
        self.interval.clear();
        self.aggregation.clear();
        self.order_by.clear();
        self.view = ListTimeSeriesRequest_TimeSeriesView::FULL;
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListTimeSeriesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListTimeSeriesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ListTimeSeriesRequest_TimeSeriesView {
    FULL = 0,
    HEADERS = 1,
}

impl ::protobuf::ProtobufEnum for ListTimeSeriesRequest_TimeSeriesView {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ListTimeSeriesRequest_TimeSeriesView> {
        match value {
            0 => ::std::option::Option::Some(ListTimeSeriesRequest_TimeSeriesView::FULL),
            1 => ::std::option::Option::Some(ListTimeSeriesRequest_TimeSeriesView::HEADERS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ListTimeSeriesRequest_TimeSeriesView] = &[
            ListTimeSeriesRequest_TimeSeriesView::FULL,
            ListTimeSeriesRequest_TimeSeriesView::HEADERS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ListTimeSeriesRequest_TimeSeriesView>("ListTimeSeriesRequest.TimeSeriesView", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ListTimeSeriesRequest_TimeSeriesView {
}

impl ::std::default::Default for ListTimeSeriesRequest_TimeSeriesView {
    fn default() -> Self {
        ListTimeSeriesRequest_TimeSeriesView::FULL
    }
}

impl ::protobuf::reflect::ProtobufValue for ListTimeSeriesRequest_TimeSeriesView {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListTimeSeriesResponse {
    // message fields
    pub time_series: ::protobuf::RepeatedField<super::metric::TimeSeries>,
    pub next_page_token: ::std::string::String,
    pub execution_errors: ::protobuf::RepeatedField<super::status::Status>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListTimeSeriesResponse {
    fn default() -> &'a ListTimeSeriesResponse {
        <ListTimeSeriesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListTimeSeriesResponse {
    pub fn new() -> ListTimeSeriesResponse {
        ::std::default::Default::default()
    }

    // repeated .google.monitoring.v3.TimeSeries time_series = 1;


    pub fn get_time_series(&self) -> &[super::metric::TimeSeries] {
        &self.time_series
    }
    pub fn clear_time_series(&mut self) {
        self.time_series.clear();
    }

    // Param is passed by value, moved
    pub fn set_time_series(&mut self, v: ::protobuf::RepeatedField<super::metric::TimeSeries>) {
        self.time_series = v;
    }

    // Mutable pointer to the field.
    pub fn mut_time_series(&mut self) -> &mut ::protobuf::RepeatedField<super::metric::TimeSeries> {
        &mut self.time_series
    }

    // Take field
    pub fn take_time_series(&mut self) -> ::protobuf::RepeatedField<super::metric::TimeSeries> {
        ::std::mem::replace(&mut self.time_series, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }

    // repeated .google.rpc.Status execution_errors = 3;


    pub fn get_execution_errors(&self) -> &[super::status::Status] {
        &self.execution_errors
    }
    pub fn clear_execution_errors(&mut self) {
        self.execution_errors.clear();
    }

    // Param is passed by value, moved
    pub fn set_execution_errors(&mut self, v: ::protobuf::RepeatedField<super::status::Status>) {
        self.execution_errors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_execution_errors(&mut self) -> &mut ::protobuf::RepeatedField<super::status::Status> {
        &mut self.execution_errors
    }

    // Take field
    pub fn take_execution_errors(&mut self) -> ::protobuf::RepeatedField<super::status::Status> {
        ::std::mem::replace(&mut self.execution_errors, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListTimeSeriesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.time_series {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.execution_errors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.time_series)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.execution_errors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.time_series {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        for value in &self.execution_errors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.time_series {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        for v in &self.execution_errors {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListTimeSeriesResponse {
        ListTimeSeriesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metric::TimeSeries>>(
                "time_series",
                |m: &ListTimeSeriesResponse| { &m.time_series },
                |m: &mut ListTimeSeriesResponse| { &mut m.time_series },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListTimeSeriesResponse| { &m.next_page_token },
                |m: &mut ListTimeSeriesResponse| { &mut m.next_page_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::Status>>(
                "execution_errors",
                |m: &ListTimeSeriesResponse| { &m.execution_errors },
                |m: &mut ListTimeSeriesResponse| { &mut m.execution_errors },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListTimeSeriesResponse>(
                "ListTimeSeriesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListTimeSeriesResponse {
        static instance: ::protobuf::rt::LazyV2<ListTimeSeriesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListTimeSeriesResponse::new)
    }
}

impl ::protobuf::Clear for ListTimeSeriesResponse {
    fn clear(&mut self) {
        self.time_series.clear();
        self.next_page_token.clear();
        self.execution_errors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListTimeSeriesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListTimeSeriesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateTimeSeriesRequest {
    // message fields
    pub name: ::std::string::String,
    pub time_series: ::protobuf::RepeatedField<super::metric::TimeSeries>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateTimeSeriesRequest {
    fn default() -> &'a CreateTimeSeriesRequest {
        <CreateTimeSeriesRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateTimeSeriesRequest {
    pub fn new() -> CreateTimeSeriesRequest {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .google.monitoring.v3.TimeSeries time_series = 2;


    pub fn get_time_series(&self) -> &[super::metric::TimeSeries] {
        &self.time_series
    }
    pub fn clear_time_series(&mut self) {
        self.time_series.clear();
    }

    // Param is passed by value, moved
    pub fn set_time_series(&mut self, v: ::protobuf::RepeatedField<super::metric::TimeSeries>) {
        self.time_series = v;
    }

    // Mutable pointer to the field.
    pub fn mut_time_series(&mut self) -> &mut ::protobuf::RepeatedField<super::metric::TimeSeries> {
        &mut self.time_series
    }

    // Take field
    pub fn take_time_series(&mut self) -> ::protobuf::RepeatedField<super::metric::TimeSeries> {
        ::std::mem::replace(&mut self.time_series, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CreateTimeSeriesRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.time_series {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.time_series)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        for value in &self.time_series {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        for v in &self.time_series {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateTimeSeriesRequest {
        CreateTimeSeriesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &CreateTimeSeriesRequest| { &m.name },
                |m: &mut CreateTimeSeriesRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metric::TimeSeries>>(
                "time_series",
                |m: &CreateTimeSeriesRequest| { &m.time_series },
                |m: &mut CreateTimeSeriesRequest| { &mut m.time_series },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateTimeSeriesRequest>(
                "CreateTimeSeriesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateTimeSeriesRequest {
        static instance: ::protobuf::rt::LazyV2<CreateTimeSeriesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateTimeSeriesRequest::new)
    }
}

impl ::protobuf::Clear for CreateTimeSeriesRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.time_series.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateTimeSeriesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateTimeSeriesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateTimeSeriesError {
    // message fields
    pub time_series: ::protobuf::SingularPtrField<super::metric::TimeSeries>,
    pub status: ::protobuf::SingularPtrField<super::status::Status>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateTimeSeriesError {
    fn default() -> &'a CreateTimeSeriesError {
        <CreateTimeSeriesError as ::protobuf::Message>::default_instance()
    }
}

impl CreateTimeSeriesError {
    pub fn new() -> CreateTimeSeriesError {
        ::std::default::Default::default()
    }

    // .google.monitoring.v3.TimeSeries time_series = 1;


    pub fn get_time_series(&self) -> &super::metric::TimeSeries {
        self.time_series.as_ref().unwrap_or_else(|| <super::metric::TimeSeries as ::protobuf::Message>::default_instance())
    }
    pub fn clear_time_series(&mut self) {
        self.time_series.clear();
    }

    pub fn has_time_series(&self) -> bool {
        self.time_series.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_series(&mut self, v: super::metric::TimeSeries) {
        self.time_series = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time_series(&mut self) -> &mut super::metric::TimeSeries {
        if self.time_series.is_none() {
            self.time_series.set_default();
        }
        self.time_series.as_mut().unwrap()
    }

    // Take field
    pub fn take_time_series(&mut self) -> super::metric::TimeSeries {
        self.time_series.take().unwrap_or_else(|| super::metric::TimeSeries::new())
    }

    // .google.rpc.Status status = 2;


    pub fn get_status(&self) -> &super::status::Status {
        self.status.as_ref().unwrap_or_else(|| <super::status::Status as ::protobuf::Message>::default_instance())
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::status::Status) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut super::status::Status {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> super::status::Status {
        self.status.take().unwrap_or_else(|| super::status::Status::new())
    }
}

impl ::protobuf::Message for CreateTimeSeriesError {
    fn is_initialized(&self) -> bool {
        for v in &self.time_series {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time_series)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.time_series.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.time_series.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.status.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateTimeSeriesError {
        CreateTimeSeriesError::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metric::TimeSeries>>(
                "time_series",
                |m: &CreateTimeSeriesError| { &m.time_series },
                |m: &mut CreateTimeSeriesError| { &mut m.time_series },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::Status>>(
                "status",
                |m: &CreateTimeSeriesError| { &m.status },
                |m: &mut CreateTimeSeriesError| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateTimeSeriesError>(
                "CreateTimeSeriesError",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateTimeSeriesError {
        static instance: ::protobuf::rt::LazyV2<CreateTimeSeriesError> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateTimeSeriesError::new)
    }
}

impl ::protobuf::Clear for CreateTimeSeriesError {
    fn clear(&mut self) {
        self.time_series.clear();
        self.status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateTimeSeriesError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateTimeSeriesError {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateTimeSeriesSummary {
    // message fields
    pub total_point_count: i32,
    pub success_point_count: i32,
    pub errors: ::protobuf::RepeatedField<CreateTimeSeriesSummary_Error>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateTimeSeriesSummary {
    fn default() -> &'a CreateTimeSeriesSummary {
        <CreateTimeSeriesSummary as ::protobuf::Message>::default_instance()
    }
}

impl CreateTimeSeriesSummary {
    pub fn new() -> CreateTimeSeriesSummary {
        ::std::default::Default::default()
    }

    // int32 total_point_count = 1;


    pub fn get_total_point_count(&self) -> i32 {
        self.total_point_count
    }
    pub fn clear_total_point_count(&mut self) {
        self.total_point_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_point_count(&mut self, v: i32) {
        self.total_point_count = v;
    }

    // int32 success_point_count = 2;


    pub fn get_success_point_count(&self) -> i32 {
        self.success_point_count
    }
    pub fn clear_success_point_count(&mut self) {
        self.success_point_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_success_point_count(&mut self, v: i32) {
        self.success_point_count = v;
    }

    // repeated .google.monitoring.v3.CreateTimeSeriesSummary.Error errors = 3;


    pub fn get_errors(&self) -> &[CreateTimeSeriesSummary_Error] {
        &self.errors
    }
    pub fn clear_errors(&mut self) {
        self.errors.clear();
    }

    // Param is passed by value, moved
    pub fn set_errors(&mut self, v: ::protobuf::RepeatedField<CreateTimeSeriesSummary_Error>) {
        self.errors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_errors(&mut self) -> &mut ::protobuf::RepeatedField<CreateTimeSeriesSummary_Error> {
        &mut self.errors
    }

    // Take field
    pub fn take_errors(&mut self) -> ::protobuf::RepeatedField<CreateTimeSeriesSummary_Error> {
        ::std::mem::replace(&mut self.errors, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CreateTimeSeriesSummary {
    fn is_initialized(&self) -> bool {
        for v in &self.errors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.total_point_count = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.success_point_count = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.errors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total_point_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total_point_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.success_point_count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.success_point_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.errors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total_point_count != 0 {
            os.write_int32(1, self.total_point_count)?;
        }
        if self.success_point_count != 0 {
            os.write_int32(2, self.success_point_count)?;
        }
        for v in &self.errors {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateTimeSeriesSummary {
        CreateTimeSeriesSummary::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "total_point_count",
                |m: &CreateTimeSeriesSummary| { &m.total_point_count },
                |m: &mut CreateTimeSeriesSummary| { &mut m.total_point_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "success_point_count",
                |m: &CreateTimeSeriesSummary| { &m.success_point_count },
                |m: &mut CreateTimeSeriesSummary| { &mut m.success_point_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateTimeSeriesSummary_Error>>(
                "errors",
                |m: &CreateTimeSeriesSummary| { &m.errors },
                |m: &mut CreateTimeSeriesSummary| { &mut m.errors },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateTimeSeriesSummary>(
                "CreateTimeSeriesSummary",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateTimeSeriesSummary {
        static instance: ::protobuf::rt::LazyV2<CreateTimeSeriesSummary> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateTimeSeriesSummary::new)
    }
}

impl ::protobuf::Clear for CreateTimeSeriesSummary {
    fn clear(&mut self) {
        self.total_point_count = 0;
        self.success_point_count = 0;
        self.errors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateTimeSeriesSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateTimeSeriesSummary {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateTimeSeriesSummary_Error {
    // message fields
    pub status: ::protobuf::SingularPtrField<super::status::Status>,
    pub point_count: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateTimeSeriesSummary_Error {
    fn default() -> &'a CreateTimeSeriesSummary_Error {
        <CreateTimeSeriesSummary_Error as ::protobuf::Message>::default_instance()
    }
}

impl CreateTimeSeriesSummary_Error {
    pub fn new() -> CreateTimeSeriesSummary_Error {
        ::std::default::Default::default()
    }

    // .google.rpc.Status status = 1;


    pub fn get_status(&self) -> &super::status::Status {
        self.status.as_ref().unwrap_or_else(|| <super::status::Status as ::protobuf::Message>::default_instance())
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::status::Status) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut super::status::Status {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> super::status::Status {
        self.status.take().unwrap_or_else(|| super::status::Status::new())
    }

    // int32 point_count = 2;


    pub fn get_point_count(&self) -> i32 {
        self.point_count
    }
    pub fn clear_point_count(&mut self) {
        self.point_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_point_count(&mut self, v: i32) {
        self.point_count = v;
    }
}

impl ::protobuf::Message for CreateTimeSeriesSummary_Error {
    fn is_initialized(&self) -> bool {
        for v in &self.status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.point_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.point_count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.point_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.status.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.point_count != 0 {
            os.write_int32(2, self.point_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateTimeSeriesSummary_Error {
        CreateTimeSeriesSummary_Error::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::Status>>(
                "status",
                |m: &CreateTimeSeriesSummary_Error| { &m.status },
                |m: &mut CreateTimeSeriesSummary_Error| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "point_count",
                |m: &CreateTimeSeriesSummary_Error| { &m.point_count },
                |m: &mut CreateTimeSeriesSummary_Error| { &mut m.point_count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateTimeSeriesSummary_Error>(
                "CreateTimeSeriesSummary.Error",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateTimeSeriesSummary_Error {
        static instance: ::protobuf::rt::LazyV2<CreateTimeSeriesSummary_Error> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateTimeSeriesSummary_Error::new)
    }
}

impl ::protobuf::Clear for CreateTimeSeriesSummary_Error {
    fn clear(&mut self) {
        self.status.clear();
        self.point_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateTimeSeriesSummary_Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateTimeSeriesSummary_Error {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)google/monitoring/v3/metric_service.proto\x12\x14google.monitoring.v3\
    \x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/metric.proto\x1a#\
    google/api/monitored_resource.proto\x1a\x20google/monitoring/v3/alert.pr\
    oto\x1a!google/monitoring/v3/common.proto\x1a!google/monitoring/v3/metri\
    c.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/emp\
    ty.proto\x1a\x17google/rpc/status.proto\x1a\x17google/api/client.proto\"\
    \x91\x01\n'ListMonitoredResourceDescriptorsRequest\x12\x12\n\x04name\x18\
    \x05\x20\x01(\tR\x04name\x12\x16\n\x06filter\x18\x02\x20\x01(\tR\x06filt\
    er\x12\x1b\n\tpage_size\x18\x03\x20\x01(\x05R\x08pageSize\x12\x1d\n\npag\
    e_token\x18\x04\x20\x01(\tR\tpageToken\"\xae\x01\n(ListMonitoredResource\
    DescriptorsResponse\x12Z\n\x14resource_descriptors\x18\x01\x20\x03(\x0b2\
    '.google.api.MonitoredResourceDescriptorR\x13resourceDescriptors\x12&\n\
    \x0fnext_page_token\x18\x02\x20\x01(\tR\rnextPageToken\";\n%GetMonitored\
    ResourceDescriptorRequest\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\
    \"\x86\x01\n\x1cListMetricDescriptorsRequest\x12\x12\n\x04name\x18\x05\
    \x20\x01(\tR\x04name\x12\x16\n\x06filter\x18\x02\x20\x01(\tR\x06filter\
    \x12\x1b\n\tpage_size\x18\x03\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_\
    token\x18\x04\x20\x01(\tR\tpageToken\"\x94\x01\n\x1dListMetricDescriptor\
    sResponse\x12K\n\x12metric_descriptors\x18\x01\x20\x03(\x0b2\x1c.google.\
    api.MetricDescriptorR\x11metricDescriptors\x12&\n\x0fnext_page_token\x18\
    \x02\x20\x01(\tR\rnextPageToken\"0\n\x1aGetMetricDescriptorRequest\x12\
    \x12\n\x04name\x18\x03\x20\x01(\tR\x04name\"~\n\x1dCreateMetricDescripto\
    rRequest\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12I\n\x11metric_\
    descriptor\x18\x02\x20\x01(\x0b2\x1c.google.api.MetricDescriptorR\x10met\
    ricDescriptor\"3\n\x1dDeleteMetricDescriptorRequest\x12\x12\n\x04name\
    \x18\x03\x20\x01(\tR\x04name\"\x98\x03\n\x15ListTimeSeriesRequest\x12\
    \x12\n\x04name\x18\n\x20\x01(\tR\x04name\x12\x16\n\x06filter\x18\x02\x20\
    \x01(\tR\x06filter\x12>\n\x08interval\x18\x04\x20\x01(\x0b2\".google.mon\
    itoring.v3.TimeIntervalR\x08interval\x12C\n\x0baggregation\x18\x05\x20\
    \x01(\x0b2!.google.monitoring.v3.AggregationR\x0baggregation\x12\x19\n\
    \x08order_by\x18\x06\x20\x01(\tR\x07orderBy\x12N\n\x04view\x18\x07\x20\
    \x01(\x0e2:.google.monitoring.v3.ListTimeSeriesRequest.TimeSeriesViewR\
    \x04view\x12\x1b\n\tpage_size\x18\x08\x20\x01(\x05R\x08pageSize\x12\x1d\
    \n\npage_token\x18\t\x20\x01(\tR\tpageToken\"'\n\x0eTimeSeriesView\x12\
    \x08\n\x04FULL\x10\0\x12\x0b\n\x07HEADERS\x10\x01\"\xc2\x01\n\x16ListTim\
    eSeriesResponse\x12A\n\x0btime_series\x18\x01\x20\x03(\x0b2\x20.google.m\
    onitoring.v3.TimeSeriesR\ntimeSeries\x12&\n\x0fnext_page_token\x18\x02\
    \x20\x01(\tR\rnextPageToken\x12=\n\x10execution_errors\x18\x03\x20\x03(\
    \x0b2\x12.google.rpc.StatusR\x0fexecutionErrors\"p\n\x17CreateTimeSeries\
    Request\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12A\n\x0btime_ser\
    ies\x18\x02\x20\x03(\x0b2\x20.google.monitoring.v3.TimeSeriesR\ntimeSeri\
    es\"\x8e\x01\n\x15CreateTimeSeriesError\x12E\n\x0btime_series\x18\x01\
    \x20\x01(\x0b2\x20.google.monitoring.v3.TimeSeriesR\ntimeSeriesB\x02\x18\
    \x01\x12.\n\x06status\x18\x02\x20\x01(\x0b2\x12.google.rpc.StatusR\x06st\
    atusB\x02\x18\x01\"\x98\x02\n\x17CreateTimeSeriesSummary\x12*\n\x11total\
    _point_count\x18\x01\x20\x01(\x05R\x0ftotalPointCount\x12.\n\x13success_\
    point_count\x18\x02\x20\x01(\x05R\x11successPointCount\x12K\n\x06errors\
    \x18\x03\x20\x03(\x0b23.google.monitoring.v3.CreateTimeSeriesSummary.Err\
    orR\x06errors\x1aT\n\x05Error\x12*\n\x06status\x18\x01\x20\x01(\x0b2\x12\
    .google.rpc.StatusR\x06status\x12\x1f\n\x0bpoint_count\x18\x02\x20\x01(\
    \x05R\npointCount2\xd2\x0c\n\rMetricService\x12\xdd\x01\n\x20ListMonitor\
    edResourceDescriptors\x12=.google.monitoring.v3.ListMonitoredResourceDes\
    criptorsRequest\x1a>.google.monitoring.v3.ListMonitoredResourceDescripto\
    rsResponse\":\x82\xd3\xe4\x93\x024\x122/v3/{name=projects/*}/monitoredRe\
    sourceDescriptors\x12\xc4\x01\n\x1eGetMonitoredResourceDescriptor\x12;.g\
    oogle.monitoring.v3.GetMonitoredResourceDescriptorRequest\x1a'.google.ap\
    i.MonitoredResourceDescriptor\"<\x82\xd3\xe4\x93\x026\x124/v3/{name=proj\
    ects/*/monitoredResourceDescriptors/*}\x12\xb1\x01\n\x15ListMetricDescri\
    ptors\x122.google.monitoring.v3.ListMetricDescriptorsRequest\x1a3.google\
    .monitoring.v3.ListMetricDescriptorsResponse\"/\x82\xd3\xe4\x93\x02)\x12\
    '/v3/{name=projects/*}/metricDescriptors\x12\x99\x01\n\x13GetMetricDescr\
    iptor\x120.google.monitoring.v3.GetMetricDescriptorRequest\x1a\x1c.googl\
    e.api.MetricDescriptor\"2\x82\xd3\xe4\x93\x02,\x12*/v3/{name=projects/*/\
    metricDescriptors/**}\x12\xaf\x01\n\x16CreateMetricDescriptor\x123.googl\
    e.monitoring.v3.CreateMetricDescriptorRequest\x1a\x1c.google.api.MetricD\
    escriptor\"B\x82\xd3\xe4\x93\x02<\"'/v3/{name=projects/*}/metricDescript\
    ors:\x11metric_descriptor\x12\x99\x01\n\x16DeleteMetricDescriptor\x123.g\
    oogle.monitoring.v3.DeleteMetricDescriptorRequest\x1a\x16.google.protobu\
    f.Empty\"2\x82\xd3\xe4\x93\x02,**/v3/{name=projects/*/metricDescriptors/\
    **}\x12\x95\x01\n\x0eListTimeSeries\x12+.google.monitoring.v3.ListTimeSe\
    riesRequest\x1a,.google.monitoring.v3.ListTimeSeriesResponse\"(\x82\xd3\
    \xe4\x93\x02\"\x12\x20/v3/{name=projects/*}/timeSeries\x12\x86\x01\n\x10\
    CreateTimeSeries\x12-.google.monitoring.v3.CreateTimeSeriesRequest\x1a\
    \x16.google.protobuf.Empty\"+\x82\xd3\xe4\x93\x02%\"\x20/v3/{name=projec\
    ts/*}/timeSeries:\x01*\x1a\xda\x01\xd2A\xba\x01https://www.googleapis.co\
    m/auth/cloud-platform,https://www.googleapis.com/auth/monitoring,https:/\
    /www.googleapis.com/auth/monitoring.read,https://www.googleapis.com/auth\
    /monitoring.write\xcaA\x19monitoring.googleapis.comB\xaa\x01\n\x18com.go\
    ogle.monitoring.v3B\x12MetricServiceProtoP\x01Z>google.golang.org/genpro\
    to/googleapis/monitoring/v3;monitoring\xaa\x02\x1aGoogle.Cloud.Monitorin\
    g.V3\xca\x02\x1aGoogle\\Cloud\\Monitoring\\V3J\x92`\n\x07\x12\x05\x0f\0\
    \xd4\x02\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\
    \x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20\
    License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20n\
    ot\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\
    \x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20Lice\
    nse\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-\
    2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\
    \x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\
    \x1d\n\t\n\x02\x03\0\x12\x03\x13\0&\n\t\n\x02\x03\x01\x12\x03\x14\0!\n\t\
    \n\x02\x03\x02\x12\x03\x15\0-\n\t\n\x02\x03\x03\x12\x03\x16\0*\n\t\n\x02\
    \x03\x04\x12\x03\x17\0+\n\t\n\x02\x03\x05\x12\x03\x18\0+\n\t\n\x02\x03\
    \x06\x12\x03\x19\0(\n\t\n\x02\x03\x07\x12\x03\x1a\0%\n\t\n\x02\x03\x08\
    \x12\x03\x1b\0!\n\t\n\x02\x03\t\x12\x03\x1c\0!\n\x08\n\x01\x08\x12\x03\
    \x1e\07\n\t\n\x02\x08%\x12\x03\x1e\07\n\x08\n\x01\x08\x12\x03\x1f\0U\n\t\
    \n\x02\x08\x0b\x12\x03\x1f\0U\n\x08\n\x01\x08\x12\x03\x20\0\"\n\t\n\x02\
    \x08\n\x12\x03\x20\0\"\n\x08\n\x01\x08\x12\x03!\03\n\t\n\x02\x08\x08\x12\
    \x03!\03\n\x08\n\x01\x08\x12\x03\"\01\n\t\n\x02\x08\x01\x12\x03\"\01\n\
    \x08\n\x01\x08\x12\x03#\07\n\t\n\x02\x08)\x12\x03#\07\n`\n\x02\x06\0\x12\
    \x04'\0n\x01\x1aT\x20Manages\x20metric\x20descriptors,\x20monitored\x20r\
    esource\x20descriptors,\x20and\n\x20time\x20series\x20data.\n\n\n\n\x03\
    \x06\0\x01\x12\x03'\x08\x15\n\n\n\x03\x06\0\x03\x12\x03(\x02A\n\x0c\n\
    \x05\x06\0\x03\x99\x08\x12\x03(\x02A\n\x0b\n\x03\x06\0\x03\x12\x04)\x02-\
    9\n\r\n\x05\x06\0\x03\x9a\x08\x12\x04)\x02-9\n}\n\x04\x06\0\x02\0\x12\
    \x040\x024\x03\x1ao\x20Lists\x20monitored\x20resource\x20descriptors\x20\
    that\x20match\x20a\x20filter.\x20This\x20method\x20does\x20not\x20requir\
    e\x20a\x20Stackdriver\x20account.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x030\
    \x06&\n\x0c\n\x05\x06\0\x02\0\x02\x12\x030'N\n\r\n\x05\x06\0\x02\0\x03\
    \x12\x040Y\x81\x01\n\r\n\x05\x06\0\x02\0\x04\x12\x041\x043\x06\n\x11\n\t\
    \x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x041\x043\x06\np\n\x04\x06\0\x02\x01\
    \x12\x047\x02;\x03\x1ab\x20Gets\x20a\x20single\x20monitored\x20resource\
    \x20descriptor.\x20This\x20method\x20does\x20not\x20require\x20a\x20Stac\
    kdriver\x20account.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x037\x06$\n\x0c\
    \n\x05\x06\0\x02\x01\x02\x12\x037%J\n\x0c\n\x05\x06\0\x02\x01\x03\x12\
    \x037U{\n\r\n\x05\x06\0\x02\x01\x04\x12\x048\x04:\x06\n\x11\n\t\x06\0\
    \x02\x01\x04\xb0\xca\xbc\"\x12\x048\x04:\x06\nq\n\x04\x06\0\x02\x02\x12\
    \x04>\x02B\x03\x1ac\x20Lists\x20metric\x20descriptors\x20that\x20match\
    \x20a\x20filter.\x20This\x20method\x20does\x20not\x20require\x20a\x20Sta\
    ckdriver\x20account.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03>\x06\x1b\n\
    \x0c\n\x05\x06\0\x02\x02\x02\x12\x03>\x1c8\n\x0c\n\x05\x06\0\x02\x02\x03\
    \x12\x03>C`\n\r\n\x05\x06\0\x02\x02\x04\x12\x04?\x04A\x06\n\x11\n\t\x06\
    \0\x02\x02\x04\xb0\xca\xbc\"\x12\x04?\x04A\x06\nd\n\x04\x06\0\x02\x03\
    \x12\x04E\x02I\x03\x1aV\x20Gets\x20a\x20single\x20metric\x20descriptor.\
    \x20This\x20method\x20does\x20not\x20require\x20a\x20Stackdriver\x20acco\
    unt.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03E\x06\x19\n\x0c\n\x05\x06\0\
    \x02\x03\x02\x12\x03E\x1a4\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03E?Z\n\r\
    \n\x05\x06\0\x02\x03\x04\x12\x04F\x04H\x06\n\x11\n\t\x06\0\x02\x03\x04\
    \xb0\xca\xbc\"\x12\x04F\x04H\x06\n\x87\x01\n\x04\x06\0\x02\x04\x12\x04N\
    \x02S\x03\x1ay\x20Creates\x20a\x20new\x20metric\x20descriptor.\n\x20User\
    -created\x20metric\x20descriptors\x20define\n\x20[custom\x20metrics](/mo\
    nitoring/custom-metrics).\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03N\x06\
    \x1c\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03N\x1d:\n\x0c\n\x05\x06\0\x02\
    \x04\x03\x12\x03NE`\n\r\n\x05\x06\0\x02\x04\x04\x12\x04O\x04R\x06\n\x11\
    \n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x04O\x04R\x06\n|\n\x04\x06\0\
    \x02\x05\x12\x04W\x02[\x03\x1an\x20Deletes\x20a\x20metric\x20descriptor.\
    \x20Only\x20user-created\n\x20[custom\x20metrics](/monitoring/custom-met\
    rics)\x20can\x20be\x20deleted.\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03W\
    \x06\x1c\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03W\x1d:\n\x0c\n\x05\x06\0\
    \x02\x05\x03\x12\x03WEZ\n\r\n\x05\x06\0\x02\x05\x04\x12\x04X\x04Z\x06\n\
    \x11\n\t\x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\x04X\x04Z\x06\nj\n\x04\x06\
    \0\x02\x06\x12\x04^\x02b\x03\x1a\\\x20Lists\x20time\x20series\x20that\
    \x20match\x20a\x20filter.\x20This\x20method\x20does\x20not\x20require\
    \x20a\x20Stackdriver\x20account.\n\n\x0c\n\x05\x06\0\x02\x06\x01\x12\x03\
    ^\x06\x14\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03^\x15*\n\x0c\n\x05\x06\0\
    \x02\x06\x03\x12\x03^5K\n\r\n\x05\x06\0\x02\x06\x04\x12\x04_\x04a\x06\n\
    \x11\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\x12\x04_\x04a\x06\n\xf6\x01\n\
    \x04\x06\0\x02\x07\x12\x04h\x02m\x03\x1a\xe7\x01\x20Creates\x20or\x20add\
    s\x20data\x20to\x20one\x20or\x20more\x20time\x20series.\n\x20The\x20resp\
    onse\x20is\x20empty\x20if\x20all\x20time\x20series\x20in\x20the\x20reque\
    st\x20were\x20written.\n\x20If\x20any\x20time\x20series\x20could\x20not\
    \x20be\x20written,\x20a\x20corresponding\x20failure\x20message\x20is\n\
    \x20included\x20in\x20the\x20error\x20response.\n\n\x0c\n\x05\x06\0\x02\
    \x07\x01\x12\x03h\x06\x16\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03h\x17.\n\
    \x0c\n\x05\x06\0\x02\x07\x03\x12\x03h9N\n\r\n\x05\x06\0\x02\x07\x04\x12\
    \x04i\x04l\x06\n\x11\n\t\x06\0\x02\x07\x04\xb0\xca\xbc\"\x12\x04i\x04l\
    \x06\n>\n\x02\x04\0\x12\x05q\0\x86\x01\x01\x1a1\x20The\x20`ListMonitored\
    ResourceDescriptors`\x20request.\n\n\n\n\x03\x04\0\x01\x12\x03q\x08/\no\
    \n\x04\x04\0\x02\0\x12\x03t\x02\x12\x1ab\x20The\x20project\x20on\x20whic\
    h\x20to\x20execute\x20the\x20request.\x20The\x20format\x20is\n\x20`\"pro\
    jects/{project_id_or_number}\"`.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03t\
    \x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03t\t\r\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03t\x10\x11\n\xd5\x02\n\x04\x04\0\x02\x01\x12\x03}\x02\x14\
    \x1a\xc7\x02\x20An\x20optional\x20[filter](/monitoring/api/v3/filters)\
    \x20describing\n\x20the\x20descriptors\x20to\x20be\x20returned.\x20\x20T\
    he\x20filter\x20can\x20reference\n\x20the\x20descriptor's\x20type\x20and\
    \x20labels.\x20For\x20example,\x20the\n\x20following\x20filter\x20return\
    s\x20only\x20Google\x20Compute\x20Engine\x20descriptors\n\x20that\x20hav\
    e\x20an\x20`id`\x20label:\n\n\x20\x20\x20\x20\x20resource.type\x20=\x20s\
    tarts_with(\"gce_\")\x20AND\x20resource.label:id\n\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03}\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03}\t\x0f\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03}\x12\x13\nR\n\x04\x04\0\x02\x02\x12\
    \x04\x80\x01\x02\x16\x1aD\x20A\x20positive\x20number\x20that\x20is\x20th\
    e\x20maximum\x20number\x20of\x20results\x20to\x20return.\n\n\r\n\x05\x04\
    \0\x02\x02\x05\x12\x04\x80\x01\x02\x07\n\r\n\x05\x04\0\x02\x02\x01\x12\
    \x04\x80\x01\x08\x11\n\r\n\x05\x04\0\x02\x02\x03\x12\x04\x80\x01\x14\x15\
    \n\xe8\x01\n\x04\x04\0\x02\x03\x12\x04\x85\x01\x02\x18\x1a\xd9\x01\x20If\
    \x20this\x20field\x20is\x20not\x20empty\x20then\x20it\x20must\x20contain\
    \x20the\x20`nextPageToken`\x20value\n\x20returned\x20by\x20a\x20previous\
    \x20call\x20to\x20this\x20method.\x20\x20Using\x20this\x20field\x20cause\
    s\x20the\n\x20method\x20to\x20return\x20additional\x20results\x20from\
    \x20the\x20previous\x20method\x20call.\n\n\r\n\x05\x04\0\x02\x03\x05\x12\
    \x04\x85\x01\x02\x08\n\r\n\x05\x04\0\x02\x03\x01\x12\x04\x85\x01\t\x13\n\
    \r\n\x05\x04\0\x02\x03\x03\x12\x04\x85\x01\x16\x17\n@\n\x02\x04\x01\x12\
    \x06\x89\x01\0\x92\x01\x01\x1a2\x20The\x20`ListMonitoredResourceDescript\
    ors`\x20response.\n\n\x0b\n\x03\x04\x01\x01\x12\x04\x89\x01\x080\n{\n\
    \x04\x04\x01\x02\0\x12\x04\x8c\x01\x02K\x1am\x20The\x20monitored\x20reso\
    urce\x20descriptors\x20that\x20are\x20available\x20to\x20this\x20project\
    \n\x20and\x20that\x20match\x20`filter`,\x20if\x20present.\n\n\r\n\x05\
    \x04\x01\x02\0\x04\x12\x04\x8c\x01\x02\n\n\r\n\x05\x04\x01\x02\0\x06\x12\
    \x04\x8c\x01\x0b1\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\x8c\x012F\n\r\n\
    \x05\x04\x01\x02\0\x03\x12\x04\x8c\x01IJ\n\xd1\x01\n\x04\x04\x01\x02\x01\
    \x12\x04\x91\x01\x02\x1d\x1a\xc2\x01\x20If\x20there\x20are\x20more\x20re\
    sults\x20than\x20have\x20been\x20returned,\x20then\x20this\x20field\x20i\
    s\x20set\n\x20to\x20a\x20non-empty\x20value.\x20\x20To\x20see\x20the\x20\
    additional\x20results,\n\x20use\x20that\x20value\x20as\x20`pageToken`\
    \x20in\x20the\x20next\x20call\x20to\x20this\x20method.\n\n\r\n\x05\x04\
    \x01\x02\x01\x05\x12\x04\x91\x01\x02\x08\n\r\n\x05\x04\x01\x02\x01\x01\
    \x12\x04\x91\x01\t\x18\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\x91\x01\x1b\
    \x1c\n=\n\x02\x04\x02\x12\x06\x95\x01\0\x9b\x01\x01\x1a/\x20The\x20`GetM\
    onitoredResourceDescriptor`\x20request.\n\n\x0b\n\x03\x04\x02\x01\x12\
    \x04\x95\x01\x08-\n\xe7\x01\n\x04\x04\x02\x02\0\x12\x04\x9a\x01\x02\x12\
    \x1a\xd8\x01\x20The\x20monitored\x20resource\x20descriptor\x20to\x20get.\
    \x20\x20The\x20format\x20is\n\x20`\"projects/{project_id_or_number}/moni\
    toredResourceDescriptors/{resource_type}\"`.\n\x20The\x20`{resource_type\
    }`\x20is\x20a\x20predefined\x20type,\x20such\x20as\n\x20`cloudsql_databa\
    se`.\n\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\x9a\x01\x02\x08\n\r\n\x05\x04\
    \x02\x02\0\x01\x12\x04\x9a\x01\t\r\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\
    \x9a\x01\x10\x11\n4\n\x02\x04\x03\x12\x06\x9e\x01\0\xb4\x01\x01\x1a&\x20\
    The\x20`ListMetricDescriptors`\x20request.\n\n\x0b\n\x03\x04\x03\x01\x12\
    \x04\x9e\x01\x08$\np\n\x04\x04\x03\x02\0\x12\x04\xa1\x01\x02\x12\x1ab\
    \x20The\x20project\x20on\x20which\x20to\x20execute\x20the\x20request.\
    \x20The\x20format\x20is\n\x20`\"projects/{project_id_or_number}\"`.\n\n\
    \r\n\x05\x04\x03\x02\0\x05\x12\x04\xa1\x01\x02\x08\n\r\n\x05\x04\x03\x02\
    \0\x01\x12\x04\xa1\x01\t\r\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xa1\x01\
    \x10\x11\n\xed\x02\n\x04\x04\x03\x02\x01\x12\x04\xab\x01\x02\x14\x1a\xde\
    \x02\x20If\x20this\x20field\x20is\x20empty,\x20all\x20custom\x20and\n\
    \x20system-defined\x20metric\x20descriptors\x20are\x20returned.\n\x20Oth\
    erwise,\x20the\x20[filter](/monitoring/api/v3/filters)\n\x20specifies\
    \x20which\x20metric\x20descriptors\x20are\x20to\x20be\n\x20returned.\x20\
    For\x20example,\x20the\x20following\x20filter\x20matches\x20all\n\x20[cu\
    stom\x20metrics](/monitoring/custom-metrics):\n\n\x20\x20\x20\x20\x20met\
    ric.type\x20=\x20starts_with(\"custom.googleapis.com/\")\n\n\r\n\x05\x04\
    \x03\x02\x01\x05\x12\x04\xab\x01\x02\x08\n\r\n\x05\x04\x03\x02\x01\x01\
    \x12\x04\xab\x01\t\x0f\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\xab\x01\x12\
    \x13\nR\n\x04\x04\x03\x02\x02\x12\x04\xae\x01\x02\x16\x1aD\x20A\x20posit\
    ive\x20number\x20that\x20is\x20the\x20maximum\x20number\x20of\x20results\
    \x20to\x20return.\n\n\r\n\x05\x04\x03\x02\x02\x05\x12\x04\xae\x01\x02\
    \x07\n\r\n\x05\x04\x03\x02\x02\x01\x12\x04\xae\x01\x08\x11\n\r\n\x05\x04\
    \x03\x02\x02\x03\x12\x04\xae\x01\x14\x15\n\xe8\x01\n\x04\x04\x03\x02\x03\
    \x12\x04\xb3\x01\x02\x18\x1a\xd9\x01\x20If\x20this\x20field\x20is\x20not\
    \x20empty\x20then\x20it\x20must\x20contain\x20the\x20`nextPageToken`\x20\
    value\n\x20returned\x20by\x20a\x20previous\x20call\x20to\x20this\x20meth\
    od.\x20\x20Using\x20this\x20field\x20causes\x20the\n\x20method\x20to\x20\
    return\x20additional\x20results\x20from\x20the\x20previous\x20method\x20\
    call.\n\n\r\n\x05\x04\x03\x02\x03\x05\x12\x04\xb3\x01\x02\x08\n\r\n\x05\
    \x04\x03\x02\x03\x01\x12\x04\xb3\x01\t\x13\n\r\n\x05\x04\x03\x02\x03\x03\
    \x12\x04\xb3\x01\x16\x17\n5\n\x02\x04\x04\x12\x06\xb7\x01\0\xc0\x01\x01\
    \x1a'\x20The\x20`ListMetricDescriptors`\x20response.\n\n\x0b\n\x03\x04\
    \x04\x01\x12\x04\xb7\x01\x08%\n{\n\x04\x04\x04\x02\0\x12\x04\xba\x01\x02\
    >\x1am\x20The\x20metric\x20descriptors\x20that\x20are\x20available\x20to\
    \x20the\x20project\n\x20and\x20that\x20match\x20the\x20value\x20of\x20`f\
    ilter`,\x20if\x20present.\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\xba\x01\
    \x02\n\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\xba\x01\x0b&\n\r\n\x05\x04\
    \x04\x02\0\x01\x12\x04\xba\x01'9\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\xba\
    \x01<=\n\xd1\x01\n\x04\x04\x04\x02\x01\x12\x04\xbf\x01\x02\x1d\x1a\xc2\
    \x01\x20If\x20there\x20are\x20more\x20results\x20than\x20have\x20been\
    \x20returned,\x20then\x20this\x20field\x20is\x20set\n\x20to\x20a\x20non-\
    empty\x20value.\x20\x20To\x20see\x20the\x20additional\x20results,\n\x20u\
    se\x20that\x20value\x20as\x20`pageToken`\x20in\x20the\x20next\x20call\
    \x20to\x20this\x20method.\n\n\r\n\x05\x04\x04\x02\x01\x05\x12\x04\xbf\
    \x01\x02\x08\n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\xbf\x01\t\x18\n\r\n\
    \x05\x04\x04\x02\x01\x03\x12\x04\xbf\x01\x1b\x1c\n2\n\x02\x04\x05\x12\
    \x06\xc3\x01\0\xc9\x01\x01\x1a$\x20The\x20`GetMetricDescriptor`\x20reque\
    st.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\xc3\x01\x08\"\n\xfb\x01\n\x04\x04\
    \x05\x02\0\x12\x04\xc8\x01\x02\x12\x1a\xec\x01\x20The\x20metric\x20descr\
    iptor\x20on\x20which\x20to\x20execute\x20the\x20request.\x20The\x20forma\
    t\x20is\n\x20`\"projects/{project_id_or_number}/metricDescriptors/{metri\
    c_id}\"`.\n\x20An\x20example\x20value\x20of\x20`{metric_id}`\x20is\n\x20\
    `\"compute.googleapis.com/instance/disk/read_bytes_count\"`.\n\n\r\n\x05\
    \x04\x05\x02\0\x05\x12\x04\xc8\x01\x02\x08\n\r\n\x05\x04\x05\x02\0\x01\
    \x12\x04\xc8\x01\t\r\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xc8\x01\x10\x11\
    \n5\n\x02\x04\x06\x12\x06\xcc\x01\0\xd4\x01\x01\x1a'\x20The\x20`CreateMe\
    tricDescriptor`\x20request.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\xcc\x01\
    \x08%\np\n\x04\x04\x06\x02\0\x12\x04\xcf\x01\x02\x12\x1ab\x20The\x20proj\
    ect\x20on\x20which\x20to\x20execute\x20the\x20request.\x20The\x20format\
    \x20is\n\x20`\"projects/{project_id_or_number}\"`.\n\n\r\n\x05\x04\x06\
    \x02\0\x05\x12\x04\xcf\x01\x02\x08\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\
    \xcf\x01\t\r\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xcf\x01\x10\x11\nP\n\
    \x04\x04\x06\x02\x01\x12\x04\xd3\x01\x024\x1aB\x20The\x20new\x20[custom\
    \x20metric](/monitoring/custom-metrics)\n\x20descriptor.\n\n\r\n\x05\x04\
    \x06\x02\x01\x06\x12\x04\xd3\x01\x02\x1d\n\r\n\x05\x04\x06\x02\x01\x01\
    \x12\x04\xd3\x01\x1e/\n\r\n\x05\x04\x06\x02\x01\x03\x12\x04\xd3\x0123\n5\
    \n\x02\x04\x07\x12\x06\xd7\x01\0\xdd\x01\x01\x1a'\x20The\x20`DeleteMetri\
    cDescriptor`\x20request.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xd7\x01\x08%\
    \n\xe5\x01\n\x04\x04\x07\x02\0\x12\x04\xdc\x01\x02\x12\x1a\xd6\x01\x20Th\
    e\x20metric\x20descriptor\x20on\x20which\x20to\x20execute\x20the\x20requ\
    est.\x20The\x20format\x20is\n\x20`\"projects/{project_id_or_number}/metr\
    icDescriptors/{metric_id}\"`.\n\x20An\x20example\x20of\x20`{metric_id}`\
    \x20is:\n\x20`\"custom.googleapis.com/my_test_metric\"`.\n\n\r\n\x05\x04\
    \x07\x02\0\x05\x12\x04\xdc\x01\x02\x08\n\r\n\x05\x04\x07\x02\0\x01\x12\
    \x04\xdc\x01\t\r\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\xdc\x01\x10\x11\n-\
    \n\x02\x04\x08\x12\x06\xe0\x01\0\x97\x02\x01\x1a\x1f\x20The\x20`ListTime\
    Series`\x20request.\n\n\x0b\n\x03\x04\x08\x01\x12\x04\xe0\x01\x08\x1d\nI\
    \n\x04\x04\x08\x04\0\x12\x06\xe2\x01\x02\xea\x01\x03\x1a9\x20Controls\
    \x20which\x20fields\x20are\x20returned\x20by\x20`ListTimeSeries`.\n\n\r\
    \n\x05\x04\x08\x04\0\x01\x12\x04\xe2\x01\x07\x15\nd\n\x06\x04\x08\x04\0\
    \x02\0\x12\x04\xe5\x01\x04\r\x1aT\x20Returns\x20the\x20identity\x20of\
    \x20the\x20metric(s),\x20the\x20time\x20series,\n\x20and\x20the\x20time\
    \x20series\x20data.\n\n\x0f\n\x07\x04\x08\x04\0\x02\0\x01\x12\x04\xe5\
    \x01\x04\x08\n\x0f\n\x07\x04\x08\x04\0\x02\0\x02\x12\x04\xe5\x01\x0b\x0c\
    \nq\n\x06\x04\x08\x04\0\x02\x01\x12\x04\xe9\x01\x04\x10\x1aa\x20Returns\
    \x20the\x20identity\x20of\x20the\x20metric\x20and\x20the\x20time\x20seri\
    es\x20resource,\n\x20but\x20not\x20the\x20time\x20series\x20data.\n\n\
    \x0f\n\x07\x04\x08\x04\0\x02\x01\x01\x12\x04\xe9\x01\x04\x0b\n\x0f\n\x07\
    \x04\x08\x04\0\x02\x01\x02\x12\x04\xe9\x01\x0e\x0f\nn\n\x04\x04\x08\x02\
    \0\x12\x04\xee\x01\x02\x13\x1a`\x20The\x20project\x20on\x20which\x20to\
    \x20execute\x20the\x20request.\x20The\x20format\x20is\n\x20\"projects/{p\
    roject_id_or_number}\".\n\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xee\x01\
    \x02\x08\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\xee\x01\t\r\n\r\n\x05\x04\
    \x08\x02\0\x03\x12\x04\xee\x01\x10\x12\n\xfb\x02\n\x04\x04\x08\x02\x01\
    \x12\x04\xf7\x01\x02\x14\x1a\xec\x02\x20A\x20[monitoring\x20filter](/mon\
    itoring/api/v3/filters)\x20that\x20specifies\x20which\x20time\n\x20serie\
    s\x20should\x20be\x20returned.\x20\x20The\x20filter\x20must\x20specify\
    \x20a\x20single\x20metric\x20type,\n\x20and\x20can\x20additionally\x20sp\
    ecify\x20metric\x20labels\x20and\x20other\x20information.\x20For\n\x20ex\
    ample:\n\n\x20\x20\x20\x20\x20metric.type\x20=\x20\"compute.googleapis.c\
    om/instance/cpu/usage_time\"\x20AND\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20metric.labels.instance_name\x20=\x20\"my-instance-name\"\n\n\r\n\x05\
    \x04\x08\x02\x01\x05\x12\x04\xf7\x01\x02\x08\n\r\n\x05\x04\x08\x02\x01\
    \x01\x12\x04\xf7\x01\t\x0f\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\xf7\x01\
    \x12\x13\n\xac\x01\n\x04\x04\x08\x02\x02\x12\x04\xfc\x01\x02\x1c\x1a\x9d\
    \x01\x20The\x20time\x20interval\x20for\x20which\x20results\x20should\x20\
    be\x20returned.\x20Only\x20time\x20series\n\x20that\x20contain\x20data\
    \x20points\x20in\x20the\x20specified\x20interval\x20are\x20included\n\
    \x20in\x20the\x20response.\n\n\r\n\x05\x04\x08\x02\x02\x06\x12\x04\xfc\
    \x01\x02\x0e\n\r\n\x05\x04\x08\x02\x02\x01\x12\x04\xfc\x01\x0f\x17\n\r\n\
    \x05\x04\x08\x02\x02\x03\x12\x04\xfc\x01\x1a\x1b\n\x82\x02\n\x04\x04\x08\
    \x02\x03\x12\x04\x83\x02\x02\x1e\x1a\xf3\x01\x20Specifies\x20the\x20alig\
    nment\x20of\x20data\x20points\x20in\x20individual\x20time\x20series\x20a\
    s\n\x20well\x20as\x20how\x20to\x20combine\x20the\x20retrieved\x20time\
    \x20series\x20across\x20specified\x20labels.\n\n\x20By\x20default\x20(if\
    \x20no\x20`aggregation`\x20is\x20explicitly\x20specified),\x20the\x20raw\
    \x20time\n\x20series\x20data\x20is\x20returned.\n\n\r\n\x05\x04\x08\x02\
    \x03\x06\x12\x04\x83\x02\x02\r\n\r\n\x05\x04\x08\x02\x03\x01\x12\x04\x83\
    \x02\x0e\x19\n\r\n\x05\x04\x08\x02\x03\x03\x12\x04\x83\x02\x1c\x1d\n\x97\
    \x01\n\x04\x04\x08\x02\x04\x12\x04\x87\x02\x02\x16\x1a\x88\x01\x20Unsupp\
    orted:\x20must\x20be\x20left\x20blank.\x20The\x20points\x20in\x20each\
    \x20time\x20series\x20are\n\x20currently\x20returned\x20in\x20reverse\
    \x20time\x20order\x20(most\x20recent\x20to\x20oldest).\n\n\r\n\x05\x04\
    \x08\x02\x04\x05\x12\x04\x87\x02\x02\x08\n\r\n\x05\x04\x08\x02\x04\x01\
    \x12\x04\x87\x02\t\x11\n\r\n\x05\x04\x08\x02\x04\x03\x12\x04\x87\x02\x14\
    \x15\nN\n\x04\x04\x08\x02\x05\x12\x04\x8a\x02\x02\x1a\x1a@\x20Specifies\
    \x20which\x20information\x20is\x20returned\x20about\x20the\x20time\x20se\
    ries.\n\n\r\n\x05\x04\x08\x02\x05\x06\x12\x04\x8a\x02\x02\x10\n\r\n\x05\
    \x04\x08\x02\x05\x01\x12\x04\x8a\x02\x11\x15\n\r\n\x05\x04\x08\x02\x05\
    \x03\x12\x04\x8a\x02\x18\x19\n\xdc\x02\n\x04\x04\x08\x02\x06\x12\x04\x91\
    \x02\x02\x16\x1a\xcd\x02\x20A\x20positive\x20number\x20that\x20is\x20the\
    \x20maximum\x20number\x20of\x20results\x20to\x20return.\x20If\n\x20`page\
    _size`\x20is\x20empty\x20or\x20more\x20than\x20100,000\x20results,\x20th\
    e\x20effective\n\x20`page_size`\x20is\x20100,000\x20results.\x20If\x20`v\
    iew`\x20is\x20set\x20to\x20`FULL`,\x20this\x20is\x20the\n\x20maximum\x20\
    number\x20of\x20`Points`\x20returned.\x20If\x20`view`\x20is\x20set\x20to\
    \x20`HEADERS`,\x20this\x20is\n\x20the\x20maximum\x20number\x20of\x20`Tim\
    eSeries`\x20returned.\n\n\r\n\x05\x04\x08\x02\x06\x05\x12\x04\x91\x02\
    \x02\x07\n\r\n\x05\x04\x08\x02\x06\x01\x12\x04\x91\x02\x08\x11\n\r\n\x05\
    \x04\x08\x02\x06\x03\x12\x04\x91\x02\x14\x15\n\xe8\x01\n\x04\x04\x08\x02\
    \x07\x12\x04\x96\x02\x02\x18\x1a\xd9\x01\x20If\x20this\x20field\x20is\
    \x20not\x20empty\x20then\x20it\x20must\x20contain\x20the\x20`nextPageTok\
    en`\x20value\n\x20returned\x20by\x20a\x20previous\x20call\x20to\x20this\
    \x20method.\x20\x20Using\x20this\x20field\x20causes\x20the\n\x20method\
    \x20to\x20return\x20additional\x20results\x20from\x20the\x20previous\x20\
    method\x20call.\n\n\r\n\x05\x04\x08\x02\x07\x05\x12\x04\x96\x02\x02\x08\
    \n\r\n\x05\x04\x08\x02\x07\x01\x12\x04\x96\x02\t\x13\n\r\n\x05\x04\x08\
    \x02\x07\x03\x12\x04\x96\x02\x16\x17\n.\n\x02\x04\t\x12\x06\x9a\x02\0\
    \xa6\x02\x01\x1a\x20\x20The\x20`ListTimeSeries`\x20response.\n\n\x0b\n\
    \x03\x04\t\x01\x12\x04\x9a\x02\x08\x1e\nV\n\x04\x04\t\x02\0\x12\x04\x9c\
    \x02\x02&\x1aH\x20One\x20or\x20more\x20time\x20series\x20that\x20match\
    \x20the\x20filter\x20included\x20in\x20the\x20request.\n\n\r\n\x05\x04\t\
    \x02\0\x04\x12\x04\x9c\x02\x02\n\n\r\n\x05\x04\t\x02\0\x06\x12\x04\x9c\
    \x02\x0b\x15\n\r\n\x05\x04\t\x02\0\x01\x12\x04\x9c\x02\x16!\n\r\n\x05\
    \x04\t\x02\0\x03\x12\x04\x9c\x02$%\n\xd1\x01\n\x04\x04\t\x02\x01\x12\x04\
    \xa1\x02\x02\x1d\x1a\xc2\x01\x20If\x20there\x20are\x20more\x20results\
    \x20than\x20have\x20been\x20returned,\x20then\x20this\x20field\x20is\x20\
    set\n\x20to\x20a\x20non-empty\x20value.\x20\x20To\x20see\x20the\x20addit\
    ional\x20results,\n\x20use\x20that\x20value\x20as\x20`pageToken`\x20in\
    \x20the\x20next\x20call\x20to\x20this\x20method.\n\n\r\n\x05\x04\t\x02\
    \x01\x05\x12\x04\xa1\x02\x02\x08\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\xa1\
    \x02\t\x18\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\xa1\x02\x1b\x1c\nl\n\x04\
    \x04\t\x02\x02\x12\x04\xa5\x02\x022\x1a^\x20Query\x20execution\x20errors\
    \x20that\x20may\x20have\x20caused\x20the\x20time\x20series\x20data\x20re\
    turned\n\x20to\x20be\x20incomplete.\n\n\r\n\x05\x04\t\x02\x02\x04\x12\
    \x04\xa5\x02\x02\n\n\r\n\x05\x04\t\x02\x02\x06\x12\x04\xa5\x02\x0b\x1c\n\
    \r\n\x05\x04\t\x02\x02\x01\x12\x04\xa5\x02\x1d-\n\r\n\x05\x04\t\x02\x02\
    \x03\x12\x04\xa5\x0201\n/\n\x02\x04\n\x12\x06\xa9\x02\0\xb6\x02\x01\x1a!\
    \x20The\x20`CreateTimeSeries`\x20request.\n\n\x0b\n\x03\x04\n\x01\x12\
    \x04\xa9\x02\x08\x1f\np\n\x04\x04\n\x02\0\x12\x04\xac\x02\x02\x12\x1ab\
    \x20The\x20project\x20on\x20which\x20to\x20execute\x20the\x20request.\
    \x20The\x20format\x20is\n\x20`\"projects/{project_id_or_number}\"`.\n\n\
    \r\n\x05\x04\n\x02\0\x05\x12\x04\xac\x02\x02\x08\n\r\n\x05\x04\n\x02\0\
    \x01\x12\x04\xac\x02\t\r\n\r\n\x05\x04\n\x02\0\x03\x12\x04\xac\x02\x10\
    \x11\n\xa8\x03\n\x04\x04\n\x02\x01\x12\x04\xb5\x02\x02&\x1a\x99\x03\x20T\
    he\x20new\x20data\x20to\x20be\x20added\x20to\x20a\x20list\x20of\x20time\
    \x20series.\n\x20Adds\x20at\x20most\x20one\x20data\x20point\x20to\x20eac\
    h\x20of\x20several\x20time\x20series.\x20\x20The\x20new\x20data\n\x20poi\
    nt\x20must\x20be\x20more\x20recent\x20than\x20any\x20other\x20point\x20i\
    n\x20its\x20time\x20series.\x20\x20Each\n\x20`TimeSeries`\x20value\x20mu\
    st\x20fully\x20specify\x20a\x20unique\x20time\x20series\x20by\x20supplyi\
    ng\n\x20all\x20label\x20values\x20for\x20the\x20metric\x20and\x20the\x20\
    monitored\x20resource.\n\n\x20The\x20maximum\x20number\x20of\x20`TimeSer\
    ies`\x20objects\x20per\x20`Create`\x20request\x20is\x20200.\n\n\r\n\x05\
    \x04\n\x02\x01\x04\x12\x04\xb5\x02\x02\n\n\r\n\x05\x04\n\x02\x01\x06\x12\
    \x04\xb5\x02\x0b\x15\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\xb5\x02\x16!\n\
    \r\n\x05\x04\n\x02\x01\x03\x12\x04\xb5\x02$%\nF\n\x02\x04\x0b\x12\x06\
    \xb9\x02\0\xbf\x02\x01\x1a8\x20DEPRECATED.\x20Used\x20to\x20hold\x20per-\
    time-series\x20error\x20status.\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\xb9\
    \x02\x08\x1d\nO\n\x04\x04\x0b\x02\0\x12\x04\xbb\x02\x021\x1aA\x20DEPRECA\
    TED.\x20Time\x20series\x20ID\x20that\x20resulted\x20in\x20the\x20`status\
    `\x20error.\n\n\r\n\x05\x04\x0b\x02\0\x06\x12\x04\xbb\x02\x02\x0c\n\r\n\
    \x05\x04\x0b\x02\0\x01\x12\x04\xbb\x02\r\x18\n\r\n\x05\x04\x0b\x02\0\x03\
    \x12\x04\xbb\x02\x1b\x1c\n\r\n\x05\x04\x0b\x02\0\x08\x12\x04\xbb\x02\x1d\
    0\n\x0e\n\x06\x04\x0b\x02\0\x08\x03\x12\x04\xbb\x02\x1e/\nZ\n\x04\x04\
    \x0b\x02\x01\x12\x04\xbe\x02\x023\x1aL\x20DEPRECATED.\x20The\x20status\
    \x20of\x20the\x20requested\x20write\x20operation\x20for\x20`time_series`\
    .\n\n\r\n\x05\x04\x0b\x02\x01\x06\x12\x04\xbe\x02\x02\x13\n\r\n\x05\x04\
    \x0b\x02\x01\x01\x12\x04\xbe\x02\x14\x1a\n\r\n\x05\x04\x0b\x02\x01\x03\
    \x12\x04\xbe\x02\x1d\x1e\n\r\n\x05\x04\x0b\x02\x01\x08\x12\x04\xbe\x02\
    \x1f2\n\x0e\n\x06\x04\x0b\x02\x01\x08\x03\x12\x04\xbe\x02\x201\nY\n\x02\
    \x04\x0c\x12\x06\xc2\x02\0\xd4\x02\x01\x1aK\x20Summary\x20of\x20the\x20r\
    esult\x20of\x20a\x20failed\x20request\x20to\x20write\x20data\x20to\x20a\
    \x20time\x20series.\n\n\x0b\n\x03\x04\x0c\x01\x12\x04\xc2\x02\x08\x1f\n?\
    \n\x04\x04\x0c\x03\0\x12\x06\xc4\x02\x02\xca\x02\x03\x1a/\x20Detailed\
    \x20information\x20about\x20an\x20error\x20category.\n\n\r\n\x05\x04\x0c\
    \x03\0\x01\x12\x04\xc4\x02\n\x0f\n>\n\x06\x04\x0c\x03\0\x02\0\x12\x04\
    \xc6\x02\x04!\x1a.\x20The\x20status\x20of\x20the\x20requested\x20write\
    \x20operation.\n\n\x0f\n\x07\x04\x0c\x03\0\x02\0\x06\x12\x04\xc6\x02\x04\
    \x15\n\x0f\n\x07\x04\x0c\x03\0\x02\0\x01\x12\x04\xc6\x02\x16\x1c\n\x0f\n\
    \x07\x04\x0c\x03\0\x02\0\x03\x12\x04\xc6\x02\x1f\x20\nT\n\x06\x04\x0c\
    \x03\0\x02\x01\x12\x04\xc9\x02\x04\x1a\x1aD\x20The\x20number\x20of\x20po\
    ints\x20that\x20couldn't\x20be\x20written\x20because\x20of\x20`status`.\
    \n\n\x0f\n\x07\x04\x0c\x03\0\x02\x01\x05\x12\x04\xc9\x02\x04\t\n\x0f\n\
    \x07\x04\x0c\x03\0\x02\x01\x01\x12\x04\xc9\x02\n\x15\n\x0f\n\x07\x04\x0c\
    \x03\0\x02\x01\x03\x12\x04\xc9\x02\x18\x19\n4\n\x04\x04\x0c\x02\0\x12\
    \x04\xcd\x02\x02\x1e\x1a&\x20The\x20number\x20of\x20points\x20in\x20the\
    \x20request.\n\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\xcd\x02\x02\x07\n\r\n\
    \x05\x04\x0c\x02\0\x01\x12\x04\xcd\x02\x08\x19\n\r\n\x05\x04\x0c\x02\0\
    \x03\x12\x04\xcd\x02\x1c\x1d\nD\n\x04\x04\x0c\x02\x01\x12\x04\xd0\x02\
    \x02\x20\x1a6\x20The\x20number\x20of\x20points\x20that\x20were\x20succes\
    sfully\x20written.\n\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xd0\x02\x02\
    \x07\n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\xd0\x02\x08\x1b\n\r\n\x05\x04\
    \x0c\x02\x01\x03\x12\x04\xd0\x02\x1e\x1f\nX\n\x04\x04\x0c\x02\x02\x12\
    \x04\xd3\x02\x02\x1c\x1aJ\x20The\x20number\x20of\x20points\x20that\x20fa\
    iled\x20to\x20be\x20written.\x20Order\x20is\x20not\x20guaranteed.\n\n\r\
    \n\x05\x04\x0c\x02\x02\x04\x12\x04\xd3\x02\x02\n\n\r\n\x05\x04\x0c\x02\
    \x02\x06\x12\x04\xd3\x02\x0b\x10\n\r\n\x05\x04\x0c\x02\x02\x01\x12\x04\
    \xd3\x02\x11\x17\n\r\n\x05\x04\x0c\x02\x02\x03\x12\x04\xd3\x02\x1a\x1bb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
