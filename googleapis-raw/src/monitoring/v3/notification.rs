// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/monitoring/v3/notification.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct NotificationChannelDescriptor {
    // message fields
    pub name: ::std::string::String,
    pub field_type: ::std::string::String,
    pub display_name: ::std::string::String,
    pub description: ::std::string::String,
    pub labels: ::protobuf::RepeatedField<super::label::LabelDescriptor>,
    pub supported_tiers: ::std::vec::Vec<super::common::ServiceTier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NotificationChannelDescriptor {
    fn default() -> &'a NotificationChannelDescriptor {
        <NotificationChannelDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl NotificationChannelDescriptor {
    pub fn new() -> NotificationChannelDescriptor {
        ::std::default::Default::default()
    }

    // string name = 6;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string display_name = 2;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // repeated .google.api.LabelDescriptor labels = 4;


    pub fn get_labels(&self) -> &[super::label::LabelDescriptor] {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::protobuf::RepeatedField<super::label::LabelDescriptor>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::protobuf::RepeatedField<super::label::LabelDescriptor> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::protobuf::RepeatedField<super::label::LabelDescriptor> {
        ::std::mem::replace(&mut self.labels, ::protobuf::RepeatedField::new())
    }

    // repeated .google.monitoring.v3.ServiceTier supported_tiers = 5;


    pub fn get_supported_tiers(&self) -> &[super::common::ServiceTier] {
        &self.supported_tiers
    }
    pub fn clear_supported_tiers(&mut self) {
        self.supported_tiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_supported_tiers(&mut self, v: ::std::vec::Vec<super::common::ServiceTier>) {
        self.supported_tiers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_supported_tiers(&mut self) -> &mut ::std::vec::Vec<super::common::ServiceTier> {
        &mut self.supported_tiers
    }

    // Take field
    pub fn take_supported_tiers(&mut self) -> ::std::vec::Vec<super::common::ServiceTier> {
        ::std::mem::replace(&mut self.supported_tiers, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for NotificationChannelDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.labels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.labels)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.supported_tiers, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.name);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.display_name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.supported_tiers {
            my_size += ::protobuf::rt::enum_size(5, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(6, &self.name)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(2, &self.display_name)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        for v in &self.labels {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.supported_tiers {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NotificationChannelDescriptor {
        NotificationChannelDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &NotificationChannelDescriptor| { &m.name },
                |m: &mut NotificationChannelDescriptor| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &NotificationChannelDescriptor| { &m.field_type },
                |m: &mut NotificationChannelDescriptor| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &NotificationChannelDescriptor| { &m.display_name },
                |m: &mut NotificationChannelDescriptor| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &NotificationChannelDescriptor| { &m.description },
                |m: &mut NotificationChannelDescriptor| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::label::LabelDescriptor>>(
                "labels",
                |m: &NotificationChannelDescriptor| { &m.labels },
                |m: &mut NotificationChannelDescriptor| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::common::ServiceTier>>(
                "supported_tiers",
                |m: &NotificationChannelDescriptor| { &m.supported_tiers },
                |m: &mut NotificationChannelDescriptor| { &mut m.supported_tiers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NotificationChannelDescriptor>(
                "NotificationChannelDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NotificationChannelDescriptor {
        static instance: ::protobuf::rt::LazyV2<NotificationChannelDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NotificationChannelDescriptor::new)
    }
}

impl ::protobuf::Clear for NotificationChannelDescriptor {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type.clear();
        self.display_name.clear();
        self.description.clear();
        self.labels.clear();
        self.supported_tiers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NotificationChannelDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotificationChannelDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NotificationChannel {
    // message fields
    pub field_type: ::std::string::String,
    pub name: ::std::string::String,
    pub display_name: ::std::string::String,
    pub description: ::std::string::String,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub user_labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub verification_status: NotificationChannel_VerificationStatus,
    pub enabled: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NotificationChannel {
    fn default() -> &'a NotificationChannel {
        <NotificationChannel as ::protobuf::Message>::default_instance()
    }
}

impl NotificationChannel {
    pub fn new() -> NotificationChannel {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string name = 6;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string display_name = 3;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // string description = 4;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // repeated .google.monitoring.v3.NotificationChannel.LabelsEntry labels = 5;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }

    // repeated .google.monitoring.v3.NotificationChannel.UserLabelsEntry user_labels = 8;


    pub fn get_user_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.user_labels
    }
    pub fn clear_user_labels(&mut self) {
        self.user_labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.user_labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.user_labels
    }

    // Take field
    pub fn take_user_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.user_labels, ::std::collections::HashMap::new())
    }

    // .google.monitoring.v3.NotificationChannel.VerificationStatus verification_status = 9;


    pub fn get_verification_status(&self) -> NotificationChannel_VerificationStatus {
        self.verification_status
    }
    pub fn clear_verification_status(&mut self) {
        self.verification_status = NotificationChannel_VerificationStatus::VERIFICATION_STATUS_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_verification_status(&mut self, v: NotificationChannel_VerificationStatus) {
        self.verification_status = v;
    }

    // .google.protobuf.BoolValue enabled = 11;


    pub fn get_enabled(&self) -> &::protobuf::well_known_types::BoolValue {
        self.enabled.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_enabled(&mut self) {
        self.enabled.clear();
    }

    pub fn has_enabled(&self) -> bool {
        self.enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enabled(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.enabled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enabled(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.enabled.is_none() {
            self.enabled.set_default();
        }
        self.enabled.as_mut().unwrap()
    }

    // Take field
    pub fn take_enabled(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.enabled.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }
}

impl ::protobuf::Message for NotificationChannel {
    fn is_initialized(&self) -> bool {
        for v in &self.enabled {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                8 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.user_labels)?;
                },
                9 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.verification_status, 9, &mut self.unknown_fields)?
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enabled)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.display_name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.description);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(5, &self.labels);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.user_labels);
        if self.verification_status != NotificationChannel_VerificationStatus::VERIFICATION_STATUS_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(9, self.verification_status);
        }
        if let Some(ref v) = self.enabled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.name.is_empty() {
            os.write_string(6, &self.name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(3, &self.display_name)?;
        }
        if !self.description.is_empty() {
            os.write_string(4, &self.description)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(5, &self.labels, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.user_labels, os)?;
        if self.verification_status != NotificationChannel_VerificationStatus::VERIFICATION_STATUS_UNSPECIFIED {
            os.write_enum(9, ::protobuf::ProtobufEnum::value(&self.verification_status))?;
        }
        if let Some(ref v) = self.enabled.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NotificationChannel {
        NotificationChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &NotificationChannel| { &m.field_type },
                |m: &mut NotificationChannel| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &NotificationChannel| { &m.name },
                |m: &mut NotificationChannel| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &NotificationChannel| { &m.display_name },
                |m: &mut NotificationChannel| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &NotificationChannel| { &m.description },
                |m: &mut NotificationChannel| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &NotificationChannel| { &m.labels },
                |m: &mut NotificationChannel| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "user_labels",
                |m: &NotificationChannel| { &m.user_labels },
                |m: &mut NotificationChannel| { &mut m.user_labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<NotificationChannel_VerificationStatus>>(
                "verification_status",
                |m: &NotificationChannel| { &m.verification_status },
                |m: &mut NotificationChannel| { &mut m.verification_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "enabled",
                |m: &NotificationChannel| { &m.enabled },
                |m: &mut NotificationChannel| { &mut m.enabled },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NotificationChannel>(
                "NotificationChannel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NotificationChannel {
        static instance: ::protobuf::rt::LazyV2<NotificationChannel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NotificationChannel::new)
    }
}

impl ::protobuf::Clear for NotificationChannel {
    fn clear(&mut self) {
        self.field_type.clear();
        self.name.clear();
        self.display_name.clear();
        self.description.clear();
        self.labels.clear();
        self.user_labels.clear();
        self.verification_status = NotificationChannel_VerificationStatus::VERIFICATION_STATUS_UNSPECIFIED;
        self.enabled.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NotificationChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotificationChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum NotificationChannel_VerificationStatus {
    VERIFICATION_STATUS_UNSPECIFIED = 0,
    UNVERIFIED = 1,
    VERIFIED = 2,
}

impl ::protobuf::ProtobufEnum for NotificationChannel_VerificationStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<NotificationChannel_VerificationStatus> {
        match value {
            0 => ::std::option::Option::Some(NotificationChannel_VerificationStatus::VERIFICATION_STATUS_UNSPECIFIED),
            1 => ::std::option::Option::Some(NotificationChannel_VerificationStatus::UNVERIFIED),
            2 => ::std::option::Option::Some(NotificationChannel_VerificationStatus::VERIFIED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [NotificationChannel_VerificationStatus] = &[
            NotificationChannel_VerificationStatus::VERIFICATION_STATUS_UNSPECIFIED,
            NotificationChannel_VerificationStatus::UNVERIFIED,
            NotificationChannel_VerificationStatus::VERIFIED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<NotificationChannel_VerificationStatus>("NotificationChannel.VerificationStatus", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for NotificationChannel_VerificationStatus {
}

impl ::std::default::Default for NotificationChannel_VerificationStatus {
    fn default() -> Self {
        NotificationChannel_VerificationStatus::VERIFICATION_STATUS_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for NotificationChannel_VerificationStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'google/monitoring/v3/notification.proto\x12\x14google.monitoring.v3\
    \x1a\x16google/api/label.proto\x1a\x1dgoogle/api/launch_stage.proto\x1a!\
    google/monitoring/v3/common.proto\x1a\x1egoogle/protobuf/wrappers.proto\
    \"\x91\x02\n\x1dNotificationChannelDescriptor\x12\x12\n\x04name\x18\x06\
    \x20\x01(\tR\x04name\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04type\x12!\
    \n\x0cdisplay_name\x18\x02\x20\x01(\tR\x0bdisplayName\x12\x20\n\x0bdescr\
    iption\x18\x03\x20\x01(\tR\x0bdescription\x123\n\x06labels\x18\x04\x20\
    \x03(\x0b2\x1b.google.api.LabelDescriptorR\x06labels\x12N\n\x0fsupported\
    _tiers\x18\x05\x20\x03(\x0e2!.google.monitoring.v3.ServiceTierR\x0esuppo\
    rtedTiersB\x02\x18\x01\"\xa5\x05\n\x13NotificationChannel\x12\x12\n\x04t\
    ype\x18\x01\x20\x01(\tR\x04type\x12\x12\n\x04name\x18\x06\x20\x01(\tR\
    \x04name\x12!\n\x0cdisplay_name\x18\x03\x20\x01(\tR\x0bdisplayName\x12\
    \x20\n\x0bdescription\x18\x04\x20\x01(\tR\x0bdescription\x12M\n\x06label\
    s\x18\x05\x20\x03(\x0b25.google.monitoring.v3.NotificationChannel.Labels\
    EntryR\x06labels\x12Z\n\x0buser_labels\x18\x08\x20\x03(\x0b29.google.mon\
    itoring.v3.NotificationChannel.UserLabelsEntryR\nuserLabels\x12m\n\x13ve\
    rification_status\x18\t\x20\x01(\x0e2<.google.monitoring.v3.Notification\
    Channel.VerificationStatusR\x12verificationStatus\x124\n\x07enabled\x18\
    \x0b\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x07enabled\x1a9\n\x0bL\
    abelsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05valu\
    e\x18\x02\x20\x01(\tR\x05value:\x028\x01\x1a=\n\x0fUserLabelsEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\
    \x01(\tR\x05value:\x028\x01\"W\n\x12VerificationStatus\x12#\n\x1fVERIFIC\
    ATION_STATUS_UNSPECIFIED\x10\0\x12\x0e\n\nUNVERIFIED\x10\x01\x12\x0c\n\
    \x08VERIFIED\x10\x02B\xa9\x01\n\x18com.google.monitoring.v3B\x11Notifica\
    tionProtoP\x01Z>google.golang.org/genproto/googleapis/monitoring/v3;moni\
    toring\xaa\x02\x1aGoogle.Cloud.Monitoring.V3\xca\x02\x1aGoogle\\Cloud\\M\
    onitoring\\V3J\xcd:\n\x07\x12\x05\x0f\0\xa2\x01\x01\n\xbe\x04\n\x01\x0c\
    \x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\
    \x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20\
    (the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20e\
    xcept\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20\
    obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\
    \x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\
    \x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20s\
    oftware\n\x20distributed\x20under\x20the\x20License\x20is\x20distributed\
    \x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\
    \x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20impli\
    ed.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20language\x20\
    governing\x20permissions\x20and\n\x20limitations\x20under\x20the\x20Lice\
    nse.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x1d\n\t\n\x02\x03\0\x12\x03\x13\0\
    \x20\n\t\n\x02\x03\x01\x12\x03\x14\0'\n\t\n\x02\x03\x02\x12\x03\x15\0+\n\
    \t\n\x02\x03\x03\x12\x03\x16\0(\n\x08\n\x01\x08\x12\x03\x18\07\n\t\n\x02\
    \x08%\x12\x03\x18\07\n\x08\n\x01\x08\x12\x03\x19\0U\n\t\n\x02\x08\x0b\
    \x12\x03\x19\0U\n\x08\n\x01\x08\x12\x03\x1a\0\"\n\t\n\x02\x08\n\x12\x03\
    \x1a\0\"\n\x08\n\x01\x08\x12\x03\x1b\02\n\t\n\x02\x08\x08\x12\x03\x1b\02\
    \n\x08\n\x01\x08\x12\x03\x1c\01\n\t\n\x02\x08\x01\x12\x03\x1c\01\n\x08\n\
    \x01\x08\x12\x03\x1d\07\n\t\n\x02\x08)\x12\x03\x1d\07\n\xcd\x01\n\x02\
    \x04\0\x12\x04\"\0?\x01\x1a\xc0\x01\x20A\x20description\x20of\x20a\x20no\
    tification\x20channel.\x20The\x20descriptor\x20includes\n\x20the\x20prop\
    erties\x20of\x20the\x20channel\x20and\x20the\x20set\x20of\x20labels\x20o\
    r\x20fields\x20that\n\x20must\x20be\x20specified\x20to\x20configure\x20c\
    hannels\x20of\x20a\x20given\x20type.\n\n\n\n\x03\x04\0\x01\x12\x03\"\x08\
    %\n\xcc\x01\n\x04\x04\0\x02\0\x12\x03(\x02\x12\x1a\xbe\x01\x20The\x20ful\
    l\x20REST\x20resource\x20name\x20for\x20this\x20descriptor.\x20The\x20sy\
    ntax\x20is:\n\n\x20\x20\x20\x20\x20projects/[PROJECT_ID]/notificationCha\
    nnelDescriptors/[TYPE]\n\n\x20In\x20the\x20above,\x20`[TYPE]`\x20is\x20t\
    he\x20value\x20of\x20the\x20`type`\x20field.\n\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03(\t\r\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03(\x10\x11\n~\n\x04\x04\0\x02\x01\x12\x03,\
    \x02\x12\x1aq\x20The\x20type\x20of\x20notification\x20channel,\x20such\
    \x20as\x20\"email\",\x20\"sms\",\x20etc.\n\x20Notification\x20channel\
    \x20types\x20are\x20globally\x20unique.\n\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03,\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03,\t\r\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03,\x10\x11\n\x81\x01\n\x04\x04\0\x02\x02\x12\
    \x030\x02\x1a\x1at\x20A\x20human-readable\x20name\x20for\x20the\x20notif\
    ication\x20channel\x20type.\x20\x20This\n\x20form\x20of\x20the\x20name\
    \x20is\x20suitable\x20for\x20a\x20user\x20interface.\n\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x030\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x030\t\
    \x15\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x030\x18\x19\n\xc3\x01\n\x04\x04\
    \0\x02\x03\x12\x035\x02\x19\x1a\xb5\x01\x20A\x20human-readable\x20descri\
    ption\x20of\x20the\x20notification\x20channel\n\x20type.\x20The\x20descr\
    iption\x20may\x20include\x20a\x20description\x20of\x20the\x20properties\
    \n\x20of\x20the\x20channel\x20and\x20pointers\x20to\x20external\x20docum\
    entation.\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x035\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x035\t\x14\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x035\
    \x17\x18\n\xbe\x01\n\x04\x04\0\x02\x04\x12\x03:\x021\x1a\xb0\x01\x20The\
    \x20set\x20of\x20labels\x20that\x20must\x20be\x20defined\x20to\x20identi\
    fy\x20a\x20particular\n\x20channel\x20of\x20the\x20corresponding\x20type\
    .\x20Each\x20label\x20includes\x20a\n\x20description\x20for\x20how\x20th\
    at\x20field\x20should\x20be\x20populated.\n\n\x0c\n\x05\x04\0\x02\x04\
    \x04\x12\x03:\x02\n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03:\x0b%\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x03:&,\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03:\
    /0\n~\n\x04\x04\0\x02\x05\x12\x03>\x02?\x1aq\x20The\x20tiers\x20that\x20\
    support\x20this\x20notification\x20channel;\x20the\x20project\x20service\
    \x20tier\n\x20must\x20be\x20one\x20of\x20the\x20supported_tiers.\n\n\x0c\
    \n\x05\x04\0\x02\x05\x04\x12\x03>\x02\n\n\x0c\n\x05\x04\0\x02\x05\x06\
    \x12\x03>\x0b\x16\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03>\x17&\n\x0c\n\
    \x05\x04\0\x02\x05\x03\x12\x03>)*\n\x0c\n\x05\x04\0\x02\x05\x08\x12\x03>\
    +>\n\r\n\x06\x04\0\x02\x05\x08\x03\x12\x03>,=\n\xcf\x02\n\x02\x04\x01\
    \x12\x05F\0\xa2\x01\x01\x1a\xc1\x02\x20A\x20`NotificationChannel`\x20is\
    \x20a\x20medium\x20through\x20which\x20an\x20alert\x20is\n\x20delivered\
    \x20when\x20a\x20policy\x20violation\x20is\x20detected.\x20Examples\x20o\
    f\x20channels\n\x20include\x20email,\x20SMS,\x20and\x20third-party\x20me\
    ssaging\x20applications.\x20Fields\n\x20containing\x20sensitive\x20infor\
    mation\x20like\x20authentication\x20tokens\x20or\n\x20contact\x20info\
    \x20are\x20only\x20partially\x20populated\x20on\x20retrieval.\n\n\n\n\
    \x03\x04\x01\x01\x12\x03F\x08\x1b\n\xd9\x02\n\x04\x04\x01\x04\0\x12\x04M\
    \x02]\x03\x1a\xca\x02\x20Indicates\x20whether\x20the\x20channel\x20has\
    \x20been\x20verified\x20or\x20not.\x20It\x20is\x20illegal\n\x20to\x20spe\
    cify\x20this\x20field\x20in\x20a\n\x20[`CreateNotificationChannel`][goog\
    le.monitoring.v3.NotificationChannelService.CreateNotificationChannel]\n\
    \x20or\x20an\n\x20[`UpdateNotificationChannel`][google.monitoring.v3.Not\
    ificationChannelService.UpdateNotificationChannel]\n\x20operation.\n\n\
    \x0c\n\x05\x04\x01\x04\0\x01\x12\x03M\x07\x19\n\xcd\x01\n\x06\x04\x01\
    \x04\0\x02\0\x12\x03Q\x04(\x1a\xbd\x01\x20Sentinel\x20value\x20used\x20t\
    o\x20indicate\x20that\x20the\x20state\x20is\x20unknown,\x20omitted,\x20o\
    r\n\x20is\x20not\x20applicable\x20(as\x20in\x20the\x20case\x20of\x20chan\
    nels\x20that\x20neither\x20support\n\x20nor\x20require\x20verification\
    \x20in\x20order\x20to\x20function).\n\n\x0e\n\x07\x04\x01\x04\0\x02\0\
    \x01\x12\x03Q\x04#\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03Q&'\n\xad\
    \x02\n\x06\x04\x01\x04\0\x02\x01\x12\x03W\x04\x13\x1a\x9d\x02\x20The\x20\
    channel\x20has\x20yet\x20to\x20be\x20verified\x20and\x20requires\x20veri\
    fication\x20to\x20function.\n\x20Note\x20that\x20this\x20state\x20also\
    \x20applies\x20to\x20the\x20case\x20where\x20the\x20verification\n\x20pr\
    ocess\x20has\x20been\x20initiated\x20by\x20sending\x20a\x20verification\
    \x20code\x20but\x20where\n\x20the\x20verification\x20code\x20has\x20not\
    \x20been\x20submitted\x20to\x20complete\x20the\x20process.\n\n\x0e\n\x07\
    \x04\x01\x04\0\x02\x01\x01\x12\x03W\x04\x0e\n\x0e\n\x07\x04\x01\x04\0\
    \x02\x01\x02\x12\x03W\x11\x12\n\xc1\x01\n\x06\x04\x01\x04\0\x02\x02\x12\
    \x03\\\x04\x11\x1a\xb1\x01\x20It\x20has\x20been\x20proven\x20that\x20not\
    ifications\x20can\x20be\x20received\x20on\x20this\n\x20notification\x20c\
    hannel\x20and\x20that\x20someone\x20on\x20the\x20project\x20has\x20acces\
    s\n\x20to\x20messages\x20that\x20are\x20delivered\x20to\x20that\x20chann\
    el.\n\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x01\x12\x03\\\x04\x0c\n\x0e\n\
    \x07\x04\x01\x04\0\x02\x02\x02\x12\x03\\\x0f\x10\n\xbf\x01\n\x04\x04\x01\
    \x02\0\x12\x03a\x02\x12\x1a\xb1\x01\x20The\x20type\x20of\x20the\x20notif\
    ication\x20channel.\x20This\x20field\x20matches\x20the\n\x20value\x20of\
    \x20the\x20[NotificationChannelDescriptor.type][google.monitoring.v3.Not\
    ificationChannelDescriptor.type]\x20field.\n\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03a\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03a\t\r\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03a\x10\x11\n\xd4\x01\n\x04\x04\x01\x02\x01\
    \x12\x03h\x02\x12\x1a\xc6\x01\x20The\x20full\x20REST\x20resource\x20name\
    \x20for\x20this\x20channel.\x20The\x20syntax\x20is:\n\n\x20\x20\x20\x20\
    \x20projects/[PROJECT_ID]/notificationChannels/[CHANNEL_ID]\n\n\x20The\
    \x20`[CHANNEL_ID]`\x20is\x20automatically\x20assigned\x20by\x20the\x20se\
    rver\x20on\x20creation.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03h\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03h\t\r\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03h\x10\x11\n\xa9\x02\n\x04\x04\x01\x02\x02\x12\x03n\
    \x02\x1a\x1a\x9b\x02\x20An\x20optional\x20human-readable\x20name\x20for\
    \x20this\x20notification\x20channel.\x20It\x20is\n\x20recommended\x20tha\
    t\x20you\x20specify\x20a\x20non-empty\x20and\x20unique\x20name\x20in\x20\
    order\x20to\n\x20make\x20it\x20easier\x20to\x20identify\x20the\x20channe\
    ls\x20in\x20your\x20project,\x20though\x20this\x20is\n\x20not\x20enforce\
    d.\x20The\x20display\x20name\x20is\x20limited\x20to\x20512\x20Unicode\
    \x20characters.\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03n\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03n\t\x15\n\x0c\n\x05\x04\x01\x02\x02\
    \x03\x12\x03n\x18\x19\n\xde\x01\n\x04\x04\x01\x02\x03\x12\x03s\x02\x19\
    \x1a\xd0\x01\x20An\x20optional\x20human-readable\x20description\x20of\
    \x20this\x20notification\x20channel.\x20This\n\x20description\x20may\x20\
    provide\x20additional\x20details,\x20beyond\x20the\x20display\n\x20name,\
    \x20for\x20the\x20channel.\x20This\x20may\x20not\x20exceed\x201024\x20Un\
    icode\x20characters.\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03s\x02\x08\
    \n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03s\t\x14\n\x0c\n\x05\x04\x01\x02\
    \x03\x03\x12\x03s\x17\x18\n\xb6\x02\n\x04\x04\x01\x02\x04\x12\x03y\x02!\
    \x1a\xa8\x02\x20Configuration\x20fields\x20that\x20define\x20the\x20chan\
    nel\x20and\x20its\x20behavior.\x20The\n\x20permissible\x20and\x20require\
    d\x20labels\x20are\x20specified\x20in\x20the\n\x20[NotificationChannelDe\
    scriptor.labels][google.monitoring.v3.NotificationChannelDescriptor.labe\
    ls]\x20of\x20the\n\x20`NotificationChannelDescriptor`\x20corresponding\
    \x20to\x20the\x20`type`\x20field.\n\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\
    \x03y\x02\x15\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03y\x16\x1c\n\x0c\n\
    \x05\x04\x01\x02\x04\x03\x12\x03y\x1f\x20\n\x8c\x04\n\x04\x04\x01\x02\
    \x05\x12\x04\x84\x01\x02&\x1a\xfd\x03\x20User-supplied\x20key/value\x20d\
    ata\x20that\x20does\x20not\x20need\x20to\x20conform\x20to\n\x20the\x20co\
    rresponding\x20`NotificationChannelDescriptor`'s\x20schema,\x20unlike\n\
    \x20the\x20`labels`\x20field.\x20This\x20field\x20is\x20intended\x20to\
    \x20be\x20used\x20for\x20organizing\n\x20and\x20identifying\x20the\x20`N\
    otificationChannel`\x20objects.\n\n\x20The\x20field\x20can\x20contain\
    \x20up\x20to\x2064\x20entries.\x20Each\x20key\x20and\x20value\x20is\x20l\
    imited\x20to\n\x2063\x20Unicode\x20characters\x20or\x20128\x20bytes,\x20\
    whichever\x20is\x20smaller.\x20Labels\x20and\n\x20values\x20can\x20conta\
    in\x20only\x20lowercase\x20letters,\x20numerals,\x20underscores,\x20and\
    \n\x20dashes.\x20Keys\x20must\x20begin\x20with\x20a\x20letter.\n\n\r\n\
    \x05\x04\x01\x02\x05\x06\x12\x04\x84\x01\x02\x15\n\r\n\x05\x04\x01\x02\
    \x05\x01\x12\x04\x84\x01\x16!\n\r\n\x05\x04\x01\x02\x05\x03\x12\x04\x84\
    \x01$%\n\xf7\x08\n\x04\x04\x01\x02\x06\x12\x04\x99\x01\x02-\x1a\xe8\x08\
    \x20Indicates\x20whether\x20this\x20channel\x20has\x20been\x20verified\
    \x20or\x20not.\x20On\x20a\n\x20[`ListNotificationChannels`][google.monit\
    oring.v3.NotificationChannelService.ListNotificationChannels]\n\x20or\n\
    \x20[`GetNotificationChannel`][google.monitoring.v3.NotificationChannelS\
    ervice.GetNotificationChannel]\n\x20operation,\x20this\x20field\x20is\
    \x20expected\x20to\x20be\x20populated.\n\n\x20If\x20the\x20value\x20is\
    \x20`UNVERIFIED`,\x20then\x20it\x20indicates\x20that\x20the\x20channel\
    \x20is\n\x20non-functioning\x20(it\x20both\x20requires\x20verification\
    \x20and\x20lacks\x20verification);\n\x20otherwise,\x20it\x20is\x20assume\
    d\x20that\x20the\x20channel\x20works.\n\n\x20If\x20the\x20channel\x20is\
    \x20neither\x20`VERIFIED`\x20nor\x20`UNVERIFIED`,\x20it\x20implies\x20th\
    at\n\x20the\x20channel\x20is\x20of\x20a\x20type\x20that\x20does\x20not\
    \x20require\x20verification\x20or\x20that\n\x20this\x20specific\x20chann\
    el\x20has\x20been\x20exempted\x20from\x20verification\x20because\x20it\
    \x20was\n\x20created\x20prior\x20to\x20verification\x20being\x20required\
    \x20for\x20channels\x20of\x20this\x20type.\n\n\x20This\x20field\x20canno\
    t\x20be\x20modified\x20using\x20a\x20standard\n\x20[`UpdateNotificationC\
    hannel`][google.monitoring.v3.NotificationChannelService.UpdateNotificat\
    ionChannel]\n\x20operation.\x20To\x20change\x20the\x20value\x20of\x20thi\
    s\x20field,\x20you\x20must\x20call\n\x20[`VerifyNotificationChannel`][go\
    ogle.monitoring.v3.NotificationChannelService.VerifyNotificationChannel]\
    .\n\n\r\n\x05\x04\x01\x02\x06\x06\x12\x04\x99\x01\x02\x14\n\r\n\x05\x04\
    \x01\x02\x06\x01\x12\x04\x99\x01\x15(\n\r\n\x05\x04\x01\x02\x06\x03\x12\
    \x04\x99\x01+,\n\xb4\x03\n\x04\x04\x01\x02\x07\x12\x04\xa1\x01\x02)\x1a\
    \xa5\x03\x20Whether\x20notifications\x20are\x20forwarded\x20to\x20the\
    \x20described\x20channel.\x20This\x20makes\n\x20it\x20possible\x20to\x20\
    disable\x20delivery\x20of\x20notifications\x20to\x20a\x20particular\x20c\
    hannel\n\x20without\x20removing\x20the\x20channel\x20from\x20all\x20aler\
    ting\x20policies\x20that\x20reference\n\x20the\x20channel.\x20This\x20is\
    \x20a\x20more\x20convenient\x20approach\x20when\x20the\x20change\x20is\n\
    \x20temporary\x20and\x20you\x20want\x20to\x20receive\x20notifications\
    \x20from\x20the\x20same\x20set\n\x20of\x20alerting\x20policies\x20on\x20\
    the\x20channel\x20at\x20some\x20point\x20in\x20the\x20future.\n\n\r\n\
    \x05\x04\x01\x02\x07\x06\x12\x04\xa1\x01\x02\x1b\n\r\n\x05\x04\x01\x02\
    \x07\x01\x12\x04\xa1\x01\x1c#\n\r\n\x05\x04\x01\x02\x07\x03\x12\x04\xa1\
    \x01&(b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
