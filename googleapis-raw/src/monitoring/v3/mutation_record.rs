// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/monitoring/v3/mutation_record.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct MutationRecord {
    // message fields
    pub mutate_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub mutated_by: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MutationRecord {
    fn default() -> &'a MutationRecord {
        <MutationRecord as ::protobuf::Message>::default_instance()
    }
}

impl MutationRecord {
    pub fn new() -> MutationRecord {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp mutate_time = 1;


    pub fn get_mutate_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.mutate_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_mutate_time(&mut self) {
        self.mutate_time.clear();
    }

    pub fn has_mutate_time(&self) -> bool {
        self.mutate_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mutate_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.mutate_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mutate_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.mutate_time.is_none() {
            self.mutate_time.set_default();
        }
        self.mutate_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_mutate_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.mutate_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string mutated_by = 2;


    pub fn get_mutated_by(&self) -> &str {
        &self.mutated_by
    }
    pub fn clear_mutated_by(&mut self) {
        self.mutated_by.clear();
    }

    // Param is passed by value, moved
    pub fn set_mutated_by(&mut self, v: ::std::string::String) {
        self.mutated_by = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mutated_by(&mut self) -> &mut ::std::string::String {
        &mut self.mutated_by
    }

    // Take field
    pub fn take_mutated_by(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mutated_by, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MutationRecord {
    fn is_initialized(&self) -> bool {
        for v in &self.mutate_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mutate_time)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mutated_by)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.mutate_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.mutated_by.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.mutated_by);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.mutate_time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.mutated_by.is_empty() {
            os.write_string(2, &self.mutated_by)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MutationRecord {
        MutationRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "mutate_time",
                |m: &MutationRecord| { &m.mutate_time },
                |m: &mut MutationRecord| { &mut m.mutate_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mutated_by",
                |m: &MutationRecord| { &m.mutated_by },
                |m: &mut MutationRecord| { &mut m.mutated_by },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MutationRecord>(
                "MutationRecord",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MutationRecord {
        static instance: ::protobuf::rt::LazyV2<MutationRecord> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MutationRecord::new)
    }
}

impl ::protobuf::Clear for MutationRecord {
    fn clear(&mut self) {
        self.mutate_time.clear();
        self.mutated_by.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MutationRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MutationRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*google/monitoring/v3/mutation_record.proto\x12\x14google.monitoring.v\
    3\x1a\x1fgoogle/protobuf/timestamp.proto\"l\n\x0eMutationRecord\x12;\n\
    \x0bmutate_time\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\nmu\
    tateTime\x12\x1d\n\nmutated_by\x18\x02\x20\x01(\tR\tmutatedByB\xab\x01\n\
    \x18com.google.monitoring.v3B\x13MutationRecordProtoP\x01Z>google.golang\
    .org/genproto/googleapis/monitoring/v3;monitoring\xaa\x02\x1aGoogle.Clou\
    d.Monitoring.V3\xca\x02\x1aGoogle\\Cloud\\Monitoring\\V3J\xe2\x07\n\x06\
    \x12\x04\x0f\0#\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Co\
    pyright\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apa\
    che\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20m\
    ay\x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\
    \x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\
    \x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/\
    LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\
    \x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\
    \x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20B\
    ASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIN\
    D,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20\
    for\x20the\x20specific\x20language\x20governing\x20permissions\x20and\n\
    \x20limitations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\
    \x11\0\x1d\n\t\n\x02\x03\0\x12\x03\x13\0)\n\x08\n\x01\x08\x12\x03\x15\07\
    \n\t\n\x02\x08%\x12\x03\x15\07\n\x08\n\x01\x08\x12\x03\x16\0U\n\t\n\x02\
    \x08\x0b\x12\x03\x16\0U\n\x08\n\x01\x08\x12\x03\x17\0\"\n\t\n\x02\x08\n\
    \x12\x03\x17\0\"\n\x08\n\x01\x08\x12\x03\x18\04\n\t\n\x02\x08\x08\x12\
    \x03\x18\04\n\x08\n\x01\x08\x12\x03\x19\01\n\t\n\x02\x08\x01\x12\x03\x19\
    \01\n\x08\n\x01\x08\x12\x03\x1a\07\n\t\n\x02\x08)\x12\x03\x1a\07\n9\n\
    \x02\x04\0\x12\x04\x1d\0#\x01\x1a-\x20Describes\x20a\x20change\x20made\
    \x20to\x20a\x20configuration.\n\n\n\n\x03\x04\0\x01\x12\x03\x1d\x08\x16\
    \n(\n\x04\x04\0\x02\0\x12\x03\x1f\x02,\x1a\x1b\x20When\x20the\x20change\
    \x20occurred.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x1f\x02\x1b\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x1f\x1c'\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x1f*+\n?\n\x04\x04\0\x02\x01\x12\x03\"\x02\x18\x1a2\x20The\x20email\
    \x20address\x20of\x20the\x20user\x20making\x20the\x20change.\n\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\"\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\"\t\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\"\x16\x17b\x06pro\
    to3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
