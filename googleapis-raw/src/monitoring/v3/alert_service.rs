// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/monitoring/v3/alert_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct CreateAlertPolicyRequest {
    // message fields
    pub name: ::std::string::String,
    pub alert_policy: ::protobuf::SingularPtrField<super::alert::AlertPolicy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateAlertPolicyRequest {
    fn default() -> &'a CreateAlertPolicyRequest {
        <CreateAlertPolicyRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateAlertPolicyRequest {
    pub fn new() -> CreateAlertPolicyRequest {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.monitoring.v3.AlertPolicy alert_policy = 2;


    pub fn get_alert_policy(&self) -> &super::alert::AlertPolicy {
        self.alert_policy.as_ref().unwrap_or_else(|| <super::alert::AlertPolicy as ::protobuf::Message>::default_instance())
    }
    pub fn clear_alert_policy(&mut self) {
        self.alert_policy.clear();
    }

    pub fn has_alert_policy(&self) -> bool {
        self.alert_policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alert_policy(&mut self, v: super::alert::AlertPolicy) {
        self.alert_policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alert_policy(&mut self) -> &mut super::alert::AlertPolicy {
        if self.alert_policy.is_none() {
            self.alert_policy.set_default();
        }
        self.alert_policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_alert_policy(&mut self) -> super::alert::AlertPolicy {
        self.alert_policy.take().unwrap_or_else(|| super::alert::AlertPolicy::new())
    }
}

impl ::protobuf::Message for CreateAlertPolicyRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.alert_policy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.alert_policy)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if let Some(ref v) = self.alert_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if let Some(ref v) = self.alert_policy.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateAlertPolicyRequest {
        CreateAlertPolicyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &CreateAlertPolicyRequest| { &m.name },
                |m: &mut CreateAlertPolicyRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::alert::AlertPolicy>>(
                "alert_policy",
                |m: &CreateAlertPolicyRequest| { &m.alert_policy },
                |m: &mut CreateAlertPolicyRequest| { &mut m.alert_policy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateAlertPolicyRequest>(
                "CreateAlertPolicyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateAlertPolicyRequest {
        static instance: ::protobuf::rt::LazyV2<CreateAlertPolicyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateAlertPolicyRequest::new)
    }
}

impl ::protobuf::Clear for CreateAlertPolicyRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.alert_policy.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateAlertPolicyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAlertPolicyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetAlertPolicyRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetAlertPolicyRequest {
    fn default() -> &'a GetAlertPolicyRequest {
        <GetAlertPolicyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetAlertPolicyRequest {
    pub fn new() -> GetAlertPolicyRequest {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetAlertPolicyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetAlertPolicyRequest {
        GetAlertPolicyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetAlertPolicyRequest| { &m.name },
                |m: &mut GetAlertPolicyRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetAlertPolicyRequest>(
                "GetAlertPolicyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetAlertPolicyRequest {
        static instance: ::protobuf::rt::LazyV2<GetAlertPolicyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetAlertPolicyRequest::new)
    }
}

impl ::protobuf::Clear for GetAlertPolicyRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetAlertPolicyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAlertPolicyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListAlertPoliciesRequest {
    // message fields
    pub name: ::std::string::String,
    pub filter: ::std::string::String,
    pub order_by: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListAlertPoliciesRequest {
    fn default() -> &'a ListAlertPoliciesRequest {
        <ListAlertPoliciesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListAlertPoliciesRequest {
    pub fn new() -> ListAlertPoliciesRequest {
        ::std::default::Default::default()
    }

    // string name = 4;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string filter = 5;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // string order_by = 6;


    pub fn get_order_by(&self) -> &str {
        &self.order_by
    }
    pub fn clear_order_by(&mut self) {
        self.order_by.clear();
    }

    // Param is passed by value, moved
    pub fn set_order_by(&mut self, v: ::std::string::String) {
        self.order_by = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_order_by(&mut self) -> &mut ::std::string::String {
        &mut self.order_by
    }

    // Take field
    pub fn take_order_by(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.order_by, ::std::string::String::new())
    }

    // int32 page_size = 2;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 3;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListAlertPoliciesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.order_by)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.name);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.filter);
        }
        if !self.order_by.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.order_by);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(4, &self.name)?;
        }
        if !self.filter.is_empty() {
            os.write_string(5, &self.filter)?;
        }
        if !self.order_by.is_empty() {
            os.write_string(6, &self.order_by)?;
        }
        if self.page_size != 0 {
            os.write_int32(2, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(3, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListAlertPoliciesRequest {
        ListAlertPoliciesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ListAlertPoliciesRequest| { &m.name },
                |m: &mut ListAlertPoliciesRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &ListAlertPoliciesRequest| { &m.filter },
                |m: &mut ListAlertPoliciesRequest| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "order_by",
                |m: &ListAlertPoliciesRequest| { &m.order_by },
                |m: &mut ListAlertPoliciesRequest| { &mut m.order_by },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListAlertPoliciesRequest| { &m.page_size },
                |m: &mut ListAlertPoliciesRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListAlertPoliciesRequest| { &m.page_token },
                |m: &mut ListAlertPoliciesRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListAlertPoliciesRequest>(
                "ListAlertPoliciesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListAlertPoliciesRequest {
        static instance: ::protobuf::rt::LazyV2<ListAlertPoliciesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListAlertPoliciesRequest::new)
    }
}

impl ::protobuf::Clear for ListAlertPoliciesRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.filter.clear();
        self.order_by.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListAlertPoliciesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAlertPoliciesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListAlertPoliciesResponse {
    // message fields
    pub alert_policies: ::protobuf::RepeatedField<super::alert::AlertPolicy>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListAlertPoliciesResponse {
    fn default() -> &'a ListAlertPoliciesResponse {
        <ListAlertPoliciesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListAlertPoliciesResponse {
    pub fn new() -> ListAlertPoliciesResponse {
        ::std::default::Default::default()
    }

    // repeated .google.monitoring.v3.AlertPolicy alert_policies = 3;


    pub fn get_alert_policies(&self) -> &[super::alert::AlertPolicy] {
        &self.alert_policies
    }
    pub fn clear_alert_policies(&mut self) {
        self.alert_policies.clear();
    }

    // Param is passed by value, moved
    pub fn set_alert_policies(&mut self, v: ::protobuf::RepeatedField<super::alert::AlertPolicy>) {
        self.alert_policies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_alert_policies(&mut self) -> &mut ::protobuf::RepeatedField<super::alert::AlertPolicy> {
        &mut self.alert_policies
    }

    // Take field
    pub fn take_alert_policies(&mut self) -> ::protobuf::RepeatedField<super::alert::AlertPolicy> {
        ::std::mem::replace(&mut self.alert_policies, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListAlertPoliciesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.alert_policies {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.alert_policies)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.alert_policies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.alert_policies {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListAlertPoliciesResponse {
        ListAlertPoliciesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::alert::AlertPolicy>>(
                "alert_policies",
                |m: &ListAlertPoliciesResponse| { &m.alert_policies },
                |m: &mut ListAlertPoliciesResponse| { &mut m.alert_policies },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListAlertPoliciesResponse| { &m.next_page_token },
                |m: &mut ListAlertPoliciesResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListAlertPoliciesResponse>(
                "ListAlertPoliciesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListAlertPoliciesResponse {
        static instance: ::protobuf::rt::LazyV2<ListAlertPoliciesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListAlertPoliciesResponse::new)
    }
}

impl ::protobuf::Clear for ListAlertPoliciesResponse {
    fn clear(&mut self) {
        self.alert_policies.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListAlertPoliciesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAlertPoliciesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateAlertPolicyRequest {
    // message fields
    pub update_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    pub alert_policy: ::protobuf::SingularPtrField<super::alert::AlertPolicy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateAlertPolicyRequest {
    fn default() -> &'a UpdateAlertPolicyRequest {
        <UpdateAlertPolicyRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateAlertPolicyRequest {
    pub fn new() -> UpdateAlertPolicyRequest {
        ::std::default::Default::default()
    }

    // .google.protobuf.FieldMask update_mask = 2;


    pub fn get_update_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.update_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.update_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }

    // .google.monitoring.v3.AlertPolicy alert_policy = 3;


    pub fn get_alert_policy(&self) -> &super::alert::AlertPolicy {
        self.alert_policy.as_ref().unwrap_or_else(|| <super::alert::AlertPolicy as ::protobuf::Message>::default_instance())
    }
    pub fn clear_alert_policy(&mut self) {
        self.alert_policy.clear();
    }

    pub fn has_alert_policy(&self) -> bool {
        self.alert_policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alert_policy(&mut self, v: super::alert::AlertPolicy) {
        self.alert_policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alert_policy(&mut self) -> &mut super::alert::AlertPolicy {
        if self.alert_policy.is_none() {
            self.alert_policy.set_default();
        }
        self.alert_policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_alert_policy(&mut self) -> super::alert::AlertPolicy {
        self.alert_policy.take().unwrap_or_else(|| super::alert::AlertPolicy::new())
    }
}

impl ::protobuf::Message for UpdateAlertPolicyRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.alert_policy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.alert_policy)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.alert_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.alert_policy.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateAlertPolicyRequest {
        UpdateAlertPolicyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "update_mask",
                |m: &UpdateAlertPolicyRequest| { &m.update_mask },
                |m: &mut UpdateAlertPolicyRequest| { &mut m.update_mask },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::alert::AlertPolicy>>(
                "alert_policy",
                |m: &UpdateAlertPolicyRequest| { &m.alert_policy },
                |m: &mut UpdateAlertPolicyRequest| { &mut m.alert_policy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateAlertPolicyRequest>(
                "UpdateAlertPolicyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateAlertPolicyRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateAlertPolicyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateAlertPolicyRequest::new)
    }
}

impl ::protobuf::Clear for UpdateAlertPolicyRequest {
    fn clear(&mut self) {
        self.update_mask.clear();
        self.alert_policy.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateAlertPolicyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateAlertPolicyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteAlertPolicyRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteAlertPolicyRequest {
    fn default() -> &'a DeleteAlertPolicyRequest {
        <DeleteAlertPolicyRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteAlertPolicyRequest {
    pub fn new() -> DeleteAlertPolicyRequest {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteAlertPolicyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteAlertPolicyRequest {
        DeleteAlertPolicyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteAlertPolicyRequest| { &m.name },
                |m: &mut DeleteAlertPolicyRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteAlertPolicyRequest>(
                "DeleteAlertPolicyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteAlertPolicyRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteAlertPolicyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteAlertPolicyRequest::new)
    }
}

impl ::protobuf::Clear for DeleteAlertPolicyRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteAlertPolicyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteAlertPolicyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(google/monitoring/v3/alert_service.proto\x12\x14google.monitoring.v3\
    \x1a\x1cgoogle/api/annotations.proto\x1a\x20google/monitoring/v3/alert.p\
    roto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x20google/protobuf/field_mas\
    k.proto\x1a\x17google/api/client.proto\"t\n\x18CreateAlertPolicyRequest\
    \x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12D\n\x0calert_policy\
    \x18\x02\x20\x01(\x0b2!.google.monitoring.v3.AlertPolicyR\x0balertPolicy\
    \"+\n\x15GetAlertPolicyRequest\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04\
    name\"\x9d\x01\n\x18ListAlertPoliciesRequest\x12\x12\n\x04name\x18\x04\
    \x20\x01(\tR\x04name\x12\x16\n\x06filter\x18\x05\x20\x01(\tR\x06filter\
    \x12\x19\n\x08order_by\x18\x06\x20\x01(\tR\x07orderBy\x12\x1b\n\tpage_si\
    ze\x18\x02\x20\x01(\x05R\x08pageSize\x12\x1d\n\npage_token\x18\x03\x20\
    \x01(\tR\tpageToken\"\x8d\x01\n\x19ListAlertPoliciesResponse\x12H\n\x0ea\
    lert_policies\x18\x03\x20\x03(\x0b2!.google.monitoring.v3.AlertPolicyR\r\
    alertPolicies\x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnextPageTok\
    en\"\x9d\x01\n\x18UpdateAlertPolicyRequest\x12;\n\x0bupdate_mask\x18\x02\
    \x20\x01(\x0b2\x1a.google.protobuf.FieldMaskR\nupdateMask\x12D\n\x0caler\
    t_policy\x18\x03\x20\x01(\x0b2!.google.monitoring.v3.AlertPolicyR\x0bale\
    rtPolicy\".\n\x18DeleteAlertPolicyRequest\x12\x12\n\x04name\x18\x03\x20\
    \x01(\tR\x04name2\xda\x07\n\x12AlertPolicyService\x12\xa1\x01\n\x11ListA\
    lertPolicies\x12..google.monitoring.v3.ListAlertPoliciesRequest\x1a/.goo\
    gle.monitoring.v3.ListAlertPoliciesResponse\"+\x82\xd3\xe4\x93\x02%\x12#\
    /v3/{name=projects/*}/alertPolicies\x12\x8f\x01\n\x0eGetAlertPolicy\x12+\
    .google.monitoring.v3.GetAlertPolicyRequest\x1a!.google.monitoring.v3.Al\
    ertPolicy\"-\x82\xd3\xe4\x93\x02'\x12%/v3/{name=projects/*/alertPolicies\
    /*}\x12\xa1\x01\n\x11CreateAlertPolicy\x12..google.monitoring.v3.CreateA\
    lertPolicyRequest\x1a!.google.monitoring.v3.AlertPolicy\"9\x82\xd3\xe4\
    \x93\x023\"#/v3/{name=projects/*}/alertPolicies:\x0calert_policy\x12\x8a\
    \x01\n\x11DeleteAlertPolicy\x12..google.monitoring.v3.DeleteAlertPolicyR\
    equest\x1a\x16.google.protobuf.Empty\"-\x82\xd3\xe4\x93\x02'*%/v3/{name=\
    projects/*/alertPolicies/*}\x12\xb0\x01\n\x11UpdateAlertPolicy\x12..goog\
    le.monitoring.v3.UpdateAlertPolicyRequest\x1a!.google.monitoring.v3.Aler\
    tPolicy\"H\x82\xd3\xe4\x93\x02B22/v3/{alert_policy.name=projects/*/alert\
    Policies/*}:\x0calert_policy\x1a\xa9\x01\xd2A\x89\x01https://www.googlea\
    pis.com/auth/cloud-platform,https://www.googleapis.com/auth/monitoring,h\
    ttps://www.googleapis.com/auth/monitoring.read\xcaA\x19monitoring.google\
    apis.comB\xa9\x01\n\x18com.google.monitoring.v3B\x11AlertServiceProtoP\
    \x01Z>google.golang.org/genproto/googleapis/monitoring/v3;monitoring\xaa\
    \x02\x1aGoogle.Cloud.Monitoring.V3\xca\x02\x1aGoogle\\Cloud\\Monitoring\
    \\V3J\xbe8\n\x07\x12\x05\x0f\0\xcb\x01\x01\n\xbe\x04\n\x01\x0c\x12\x03\
    \x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Google\x20LLC.\n\n\x20Licens\
    ed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"\
    License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20i\
    n\x20compliance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20\
    a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://ww\
    w.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20app\
    licable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20\
    distributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\
    \x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITION\
    S\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\
    \x20the\x20License\x20for\x20the\x20specific\x20language\x20governing\
    \x20permissions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\
    \n\x08\n\x01\x02\x12\x03\x11\0\x1d\n\t\n\x02\x03\0\x12\x03\x13\0&\n\t\n\
    \x02\x03\x01\x12\x03\x14\0*\n\t\n\x02\x03\x02\x12\x03\x15\0%\n\t\n\x02\
    \x03\x03\x12\x03\x16\0*\n\t\n\x02\x03\x04\x12\x03\x17\0!\n\x08\n\x01\x08\
    \x12\x03\x19\07\n\t\n\x02\x08%\x12\x03\x19\07\n\x08\n\x01\x08\x12\x03\
    \x1a\0U\n\t\n\x02\x08\x0b\x12\x03\x1a\0U\n\x08\n\x01\x08\x12\x03\x1b\0\"\
    \n\t\n\x02\x08\n\x12\x03\x1b\0\"\n\x08\n\x01\x08\x12\x03\x1c\02\n\t\n\
    \x02\x08\x08\x12\x03\x1c\02\n\x08\n\x01\x08\x12\x03\x1d\01\n\t\n\x02\x08\
    \x01\x12\x03\x1d\01\n\x08\n\x01\x08\x12\x03\x1e\07\n\t\n\x02\x08)\x12\
    \x03\x1e\07\n\xbf\x04\n\x02\x06\0\x12\x04)\0W\x01\x1a\xb2\x04\x20The\x20\
    AlertPolicyService\x20API\x20is\x20used\x20to\x20manage\x20(list,\x20cre\
    ate,\x20delete,\n\x20edit)\x20alert\x20policies\x20in\x20Stackdriver\x20\
    Monitoring.\x20An\x20alerting\x20policy\x20is\n\x20a\x20description\x20o\
    f\x20the\x20conditions\x20under\x20which\x20some\x20aspect\x20of\x20your\
    \n\x20system\x20is\x20considered\x20to\x20be\x20\"unhealthy\"\x20and\x20\
    the\x20ways\x20to\x20notify\n\x20people\x20or\x20services\x20about\x20th\
    is\x20state.\x20In\x20addition\x20to\x20using\x20this\x20API,\x20alert\n\
    \x20policies\x20can\x20also\x20be\x20managed\x20through\n\x20[Stackdrive\
    r\x20Monitoring](https://cloud.google.com/monitoring/docs/),\n\x20which\
    \x20can\x20be\x20reached\x20by\x20clicking\x20the\x20\"Monitoring\"\x20t\
    ab\x20in\n\x20[Cloud\x20Console](https://console.cloud.google.com/).\n\n\
    \n\n\x03\x06\0\x01\x12\x03)\x08\x1a\n\n\n\x03\x06\0\x03\x12\x03*\x02A\n\
    \x0c\n\x05\x06\0\x03\x99\x08\x12\x03*\x02A\n\x0b\n\x03\x06\0\x03\x12\x04\
    +\x02.8\n\r\n\x05\x06\0\x03\x9a\x08\x12\x04+\x02.8\nE\n\x04\x06\0\x02\0\
    \x12\x041\x025\x03\x1a7\x20Lists\x20the\x20existing\x20alerting\x20polic\
    ies\x20for\x20the\x20project.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x031\x06\
    \x17\n\x0c\n\x05\x06\0\x02\0\x02\x12\x031\x180\n\x0c\n\x05\x06\0\x02\0\
    \x03\x12\x031;T\n\r\n\x05\x06\0\x02\0\x04\x12\x042\x044\x06\n\x11\n\t\
    \x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x042\x044\x06\n.\n\x04\x06\0\x02\x01\
    \x12\x048\x02<\x03\x1a\x20\x20Gets\x20a\x20single\x20alerting\x20policy.\
    \n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x038\x06\x14\n\x0c\n\x05\x06\0\x02\
    \x01\x02\x12\x038\x15*\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x0385@\n\r\n\
    \x05\x06\0\x02\x01\x04\x12\x049\x04;\x06\n\x11\n\t\x06\0\x02\x01\x04\xb0\
    \xca\xbc\"\x12\x049\x04;\x06\n.\n\x04\x06\0\x02\x02\x12\x04?\x02D\x03\
    \x1a\x20\x20Creates\x20a\x20new\x20alerting\x20policy.\n\n\x0c\n\x05\x06\
    \0\x02\x02\x01\x12\x03?\x06\x17\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03?\
    \x180\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03?;F\n\r\n\x05\x06\0\x02\x02\
    \x04\x12\x04@\x04C\x06\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04\
    @\x04C\x06\n+\n\x04\x06\0\x02\x03\x12\x04G\x02K\x03\x1a\x1d\x20Deletes\
    \x20an\x20alerting\x20policy.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03G\
    \x06\x17\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03G\x180\n\x0c\n\x05\x06\0\
    \x02\x03\x03\x12\x03G;P\n\r\n\x05\x06\0\x02\x03\x04\x12\x04H\x04J\x06\n\
    \x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04H\x04J\x06\n\x83\x02\n\
    \x04\x06\0\x02\x04\x12\x04Q\x02V\x03\x1a\xf4\x01\x20Updates\x20an\x20ale\
    rting\x20policy.\x20You\x20can\x20either\x20replace\x20the\x20entire\x20\
    policy\x20with\n\x20a\x20new\x20one\x20or\x20replace\x20only\x20certain\
    \x20fields\x20in\x20the\x20current\x20alerting\x20policy\x20by\n\x20spec\
    ifying\x20the\x20fields\x20to\x20be\x20updated\x20via\x20`updateMask`.\
    \x20Returns\x20the\n\x20updated\x20alerting\x20policy.\n\n\x0c\n\x05\x06\
    \0\x02\x04\x01\x12\x03Q\x06\x17\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03Q\
    \x180\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03Q;F\n\r\n\x05\x06\0\x02\x04\
    \x04\x12\x04R\x04U\x06\n\x11\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x04\
    R\x04U\x06\n?\n\x02\x04\0\x12\x04Z\0i\x01\x1a3\x20The\x20protocol\x20for\
    \x20the\x20`CreateAlertPolicy`\x20request.\n\n\n\n\x03\x04\0\x01\x12\x03\
    Z\x08\x20\n\xd1\x03\n\x04\x04\0\x02\0\x12\x03c\x02\x12\x1a\xc3\x03\x20Th\
    e\x20project\x20in\x20which\x20to\x20create\x20the\x20alerting\x20policy\
    .\x20The\x20format\x20is\n\x20`projects/[PROJECT_ID]`.\n\n\x20Note\x20th\
    at\x20this\x20field\x20names\x20the\x20parent\x20container\x20in\x20whic\
    h\x20the\x20alerting\n\x20policy\x20will\x20be\x20written,\x20not\x20the\
    \x20name\x20of\x20the\x20created\x20policy.\x20The\x20alerting\n\x20poli\
    cy\x20that\x20is\x20returned\x20will\x20have\x20a\x20name\x20that\x20con\
    tains\x20a\x20normalized\n\x20representation\x20of\x20this\x20name\x20as\
    \x20a\x20prefix\x20but\x20adds\x20a\x20suffix\x20of\x20the\x20form\n\x20\
    `/alertPolicies/[POLICY_ID]`,\x20identifying\x20the\x20policy\x20in\x20t\
    he\x20container.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03c\x02\x08\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03c\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03c\
    \x10\x11\n\xb7\x01\n\x04\x04\0\x02\x01\x12\x03h\x02\x1f\x1a\xa9\x01\x20T\
    he\x20requested\x20alerting\x20policy.\x20You\x20should\x20omit\x20the\
    \x20`name`\x20field\x20in\x20this\n\x20policy.\x20The\x20name\x20will\
    \x20be\x20returned\x20in\x20the\x20new\x20policy,\x20including\n\x20a\
    \x20new\x20[ALERT_POLICY_ID]\x20value.\n\n\x0c\n\x05\x04\0\x02\x01\x06\
    \x12\x03h\x02\r\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03h\x0e\x1a\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03h\x1d\x1e\n<\n\x02\x04\x01\x12\x04l\0q\x01\
    \x1a0\x20The\x20protocol\x20for\x20the\x20`GetAlertPolicy`\x20request.\n\
    \n\n\n\x03\x04\x01\x01\x12\x03l\x08\x1d\ny\n\x04\x04\x01\x02\0\x12\x03p\
    \x02\x12\x1al\x20The\x20alerting\x20policy\x20to\x20retrieve.\x20The\x20\
    format\x20is\n\n\x20\x20\x20\x20\x20projects/[PROJECT_ID]/alertPolicies/\
    [ALERT_POLICY_ID]\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03p\x02\x08\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03p\t\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03p\x10\x11\n@\n\x02\x04\x02\x12\x05t\0\x96\x01\x01\x1a3\x20The\x20pro\
    tocol\x20for\x20the\x20`ListAlertPolicies`\x20request.\n\n\n\n\x03\x04\
    \x02\x01\x12\x03t\x08\x20\n\xed\x02\n\x04\x04\x02\x02\0\x12\x03~\x02\x12\
    \x1a\xdf\x02\x20The\x20project\x20whose\x20alert\x20policies\x20are\x20t\
    o\x20be\x20listed.\x20The\x20format\x20is\n\n\x20\x20\x20\x20\x20project\
    s/[PROJECT_ID]\n\n\x20Note\x20that\x20this\x20field\x20names\x20the\x20p\
    arent\x20container\x20in\x20which\x20the\x20alerting\n\x20policies\x20to\
    \x20be\x20listed\x20are\x20stored.\x20To\x20retrieve\x20a\x20single\x20a\
    lerting\x20policy\n\x20by\x20name,\x20use\x20the\n\x20[GetAlertPolicy][g\
    oogle.monitoring.v3.AlertPolicyService.GetAlertPolicy]\n\x20operation,\
    \x20instead.\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03~\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03~\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03~\x10\x11\n\xdf\x01\n\x04\x04\x02\x02\x01\x12\x04\x85\x01\x02\x14\
    \x1a\xd0\x01\x20If\x20provided,\x20this\x20field\x20specifies\x20the\x20\
    criteria\x20that\x20must\x20be\x20met\x20by\n\x20alert\x20policies\x20to\
    \x20be\x20included\x20in\x20the\x20response.\n\n\x20For\x20more\x20detai\
    ls,\x20see\x20[sorting\x20and\n\x20filtering](/monitoring/api/v3/sorting\
    -and-filtering).\n\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\x85\x01\x02\x08\
    \n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\x85\x01\t\x0f\n\r\n\x05\x04\x02\
    \x02\x01\x03\x12\x04\x85\x01\x12\x13\n\xc1\x02\n\x04\x04\x02\x02\x02\x12\
    \x04\x8d\x01\x02\x16\x1a\xb2\x02\x20A\x20comma-separated\x20list\x20of\
    \x20fields\x20by\x20which\x20to\x20sort\x20the\x20result.\x20Supports\n\
    \x20the\x20same\x20set\x20of\x20field\x20references\x20as\x20the\x20`fil\
    ter`\x20field.\x20Entries\x20can\x20be\n\x20prefixed\x20with\x20a\x20min\
    us\x20sign\x20to\x20sort\x20by\x20the\x20field\x20in\x20descending\x20or\
    der.\n\n\x20For\x20more\x20details,\x20see\x20[sorting\x20and\n\x20filte\
    ring](/monitoring/api/v3/sorting-and-filtering).\n\n\r\n\x05\x04\x02\x02\
    \x02\x05\x12\x04\x8d\x01\x02\x08\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\
    \x8d\x01\t\x11\n\r\n\x05\x04\x02\x02\x02\x03\x12\x04\x8d\x01\x14\x15\nM\
    \n\x04\x04\x02\x02\x03\x12\x04\x90\x01\x02\x16\x1a?\x20The\x20maximum\
    \x20number\x20of\x20results\x20to\x20return\x20in\x20a\x20single\x20resp\
    onse.\n\n\r\n\x05\x04\x02\x02\x03\x05\x12\x04\x90\x01\x02\x07\n\r\n\x05\
    \x04\x02\x02\x03\x01\x12\x04\x90\x01\x08\x11\n\r\n\x05\x04\x02\x02\x03\
    \x03\x12\x04\x90\x01\x14\x15\n\xe2\x01\n\x04\x04\x02\x02\x04\x12\x04\x95\
    \x01\x02\x18\x1a\xd3\x01\x20If\x20this\x20field\x20is\x20not\x20empty\
    \x20then\x20it\x20must\x20contain\x20the\x20`nextPageToken`\x20value\n\
    \x20returned\x20by\x20a\x20previous\x20call\x20to\x20this\x20method.\x20\
    \x20Using\x20this\x20field\x20causes\x20the\n\x20method\x20to\x20return\
    \x20more\x20results\x20from\x20the\x20previous\x20method\x20call.\n\n\r\
    \n\x05\x04\x02\x02\x04\x05\x12\x04\x95\x01\x02\x08\n\r\n\x05\x04\x02\x02\
    \x04\x01\x12\x04\x95\x01\t\x13\n\r\n\x05\x04\x02\x02\x04\x03\x12\x04\x95\
    \x01\x16\x17\nB\n\x02\x04\x03\x12\x06\x99\x01\0\xa1\x01\x01\x1a4\x20The\
    \x20protocol\x20for\x20the\x20`ListAlertPolicies`\x20response.\n\n\x0b\n\
    \x03\x04\x03\x01\x12\x04\x99\x01\x08!\n,\n\x04\x04\x03\x02\0\x12\x04\x9b\
    \x01\x02*\x1a\x1e\x20The\x20returned\x20alert\x20policies.\n\n\r\n\x05\
    \x04\x03\x02\0\x04\x12\x04\x9b\x01\x02\n\n\r\n\x05\x04\x03\x02\0\x06\x12\
    \x04\x9b\x01\x0b\x16\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\x9b\x01\x17%\n\
    \r\n\x05\x04\x03\x02\0\x03\x12\x04\x9b\x01()\n\xd0\x01\n\x04\x04\x03\x02\
    \x01\x12\x04\xa0\x01\x02\x1d\x1a\xc1\x01\x20If\x20there\x20might\x20be\
    \x20more\x20results\x20than\x20were\x20returned,\x20then\x20this\x20fiel\
    d\x20is\x20set\n\x20to\x20a\x20non-empty\x20value.\x20To\x20see\x20the\
    \x20additional\x20results,\n\x20use\x20that\x20value\x20as\x20`pageToken\
    `\x20in\x20the\x20next\x20call\x20to\x20this\x20method.\n\n\r\n\x05\x04\
    \x03\x02\x01\x05\x12\x04\xa0\x01\x02\x08\n\r\n\x05\x04\x03\x02\x01\x01\
    \x12\x04\xa0\x01\t\x18\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\xa0\x01\x1b\
    \x1c\nA\n\x02\x04\x04\x12\x06\xa4\x01\0\xc1\x01\x01\x1a3\x20The\x20proto\
    col\x20for\x20the\x20`UpdateAlertPolicy`\x20request.\n\n\x0b\n\x03\x04\
    \x04\x01\x12\x04\xa4\x01\x08\x20\n\xba\t\n\x04\x04\x04\x02\0\x12\x04\xba\
    \x01\x02,\x1a\xab\t\x20Optional.\x20A\x20list\x20of\x20alerting\x20polic\
    y\x20field\x20names.\x20If\x20this\x20field\x20is\x20not\n\x20empty,\x20\
    each\x20listed\x20field\x20in\x20the\x20existing\x20alerting\x20policy\
    \x20is\x20set\x20to\x20the\n\x20value\x20of\x20the\x20corresponding\x20f\
    ield\x20in\x20the\x20supplied\x20policy\x20(`alert_policy`),\n\x20or\x20\
    to\x20the\x20field's\x20default\x20value\x20if\x20the\x20field\x20is\x20\
    not\x20in\x20the\x20supplied\n\x20alerting\x20policy.\x20\x20Fields\x20n\
    ot\x20listed\x20retain\x20their\x20previous\x20value.\n\n\x20Examples\
    \x20of\x20valid\x20field\x20masks\x20include\x20`display_name`,\x20`docu\
    mentation`,\n\x20`documentation.content`,\x20`documentation.mime_type`,\
    \x20`user_labels`,\n\x20`user_label.nameofkey`,\x20`enabled`,\x20`condit\
    ions`,\x20`combiner`,\x20etc.\n\n\x20If\x20this\x20field\x20is\x20empty,\
    \x20then\x20the\x20supplied\x20alerting\x20policy\x20replaces\x20the\n\
    \x20existing\x20policy.\x20It\x20is\x20the\x20same\x20as\x20deleting\x20\
    the\x20existing\x20policy\x20and\n\x20adding\x20the\x20supplied\x20polic\
    y,\x20except\x20for\x20the\x20following:\n\n\x20+\x20\x20\x20The\x20new\
    \x20policy\x20will\x20have\x20the\x20same\x20`[ALERT_POLICY_ID]`\x20as\
    \x20the\x20former\n\x20\x20\x20\x20\x20policy.\x20This\x20gives\x20you\
    \x20continuity\x20with\x20the\x20former\x20policy\x20in\x20your\n\x20\
    \x20\x20\x20\x20notifications\x20and\x20incidents.\n\x20+\x20\x20\x20Con\
    ditions\x20in\x20the\x20new\x20policy\x20will\x20keep\x20their\x20former\
    \x20`[CONDITION_ID]`\x20if\n\x20\x20\x20\x20\x20the\x20supplied\x20condi\
    tion\x20includes\x20the\x20`name`\x20field\x20with\x20that\n\x20\x20\x20\
    \x20\x20`[CONDITION_ID]`.\x20If\x20the\x20supplied\x20condition\x20omits\
    \x20the\x20`name`\x20field,\n\x20\x20\x20\x20\x20then\x20a\x20new\x20`[C\
    ONDITION_ID]`\x20is\x20created.\n\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\
    \xba\x01\x02\x1b\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xba\x01\x1c'\n\r\n\
    \x05\x04\x04\x02\0\x03\x12\x04\xba\x01*+\n\xdb\x01\n\x04\x04\x04\x02\x01\
    \x12\x04\xc0\x01\x02\x1f\x1a\xcc\x01\x20Required.\x20The\x20updated\x20a\
    lerting\x20policy\x20or\x20the\x20updated\x20values\x20for\x20the\n\x20f\
    ields\x20listed\x20in\x20`update_mask`.\n\x20If\x20`update_mask`\x20is\
    \x20not\x20empty,\x20any\x20fields\x20in\x20this\x20policy\x20that\x20ar\
    e\n\x20not\x20in\x20`update_mask`\x20are\x20ignored.\n\n\r\n\x05\x04\x04\
    \x02\x01\x06\x12\x04\xc0\x01\x02\r\n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\
    \xc0\x01\x0e\x1a\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\xc0\x01\x1d\x1e\n\
    A\n\x02\x04\x05\x12\x06\xc4\x01\0\xcb\x01\x01\x1a3\x20The\x20protocol\
    \x20for\x20the\x20`DeleteAlertPolicy`\x20request.\n\n\x0b\n\x03\x04\x05\
    \x01\x12\x04\xc4\x01\x08\x20\n\xc7\x01\n\x04\x04\x05\x02\0\x12\x04\xca\
    \x01\x02\x12\x1a\xb8\x01\x20The\x20alerting\x20policy\x20to\x20delete.\
    \x20The\x20format\x20is:\n\n\x20\x20\x20\x20\x20projects/[PROJECT_ID]/al\
    ertPolicies/[ALERT_POLICY_ID]\n\n\x20For\x20more\x20information,\x20see\
    \x20[AlertPolicy][google.monitoring.v3.AlertPolicy].\n\n\r\n\x05\x04\x05\
    \x02\0\x05\x12\x04\xca\x01\x02\x08\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\
    \xca\x01\t\r\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xca\x01\x10\x11b\x06pro\
    to3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
