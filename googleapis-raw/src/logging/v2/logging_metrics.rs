// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/logging/v2/logging_metrics.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct LogMetric {
    // message fields
    pub name: ::std::string::String,
    pub description: ::std::string::String,
    pub filter: ::std::string::String,
    pub metric_descriptor: ::protobuf::SingularPtrField<super::metric::MetricDescriptor>,
    pub value_extractor: ::std::string::String,
    pub label_extractors: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub bucket_options: ::protobuf::SingularPtrField<super::distribution::Distribution_BucketOptions>,
    pub create_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub update_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub version: LogMetric_ApiVersion,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogMetric {
    fn default() -> &'a LogMetric {
        <LogMetric as ::protobuf::Message>::default_instance()
    }
}

impl LogMetric {
    pub fn new() -> LogMetric {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string filter = 3;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // .google.api.MetricDescriptor metric_descriptor = 5;


    pub fn get_metric_descriptor(&self) -> &super::metric::MetricDescriptor {
        self.metric_descriptor.as_ref().unwrap_or_else(|| <super::metric::MetricDescriptor as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metric_descriptor(&mut self) {
        self.metric_descriptor.clear();
    }

    pub fn has_metric_descriptor(&self) -> bool {
        self.metric_descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metric_descriptor(&mut self, v: super::metric::MetricDescriptor) {
        self.metric_descriptor = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric_descriptor(&mut self) -> &mut super::metric::MetricDescriptor {
        if self.metric_descriptor.is_none() {
            self.metric_descriptor.set_default();
        }
        self.metric_descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_metric_descriptor(&mut self) -> super::metric::MetricDescriptor {
        self.metric_descriptor.take().unwrap_or_else(|| super::metric::MetricDescriptor::new())
    }

    // string value_extractor = 6;


    pub fn get_value_extractor(&self) -> &str {
        &self.value_extractor
    }
    pub fn clear_value_extractor(&mut self) {
        self.value_extractor.clear();
    }

    // Param is passed by value, moved
    pub fn set_value_extractor(&mut self, v: ::std::string::String) {
        self.value_extractor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value_extractor(&mut self) -> &mut ::std::string::String {
        &mut self.value_extractor
    }

    // Take field
    pub fn take_value_extractor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value_extractor, ::std::string::String::new())
    }

    // repeated .google.logging.v2.LogMetric.LabelExtractorsEntry label_extractors = 7;


    pub fn get_label_extractors(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.label_extractors
    }
    pub fn clear_label_extractors(&mut self) {
        self.label_extractors.clear();
    }

    // Param is passed by value, moved
    pub fn set_label_extractors(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.label_extractors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_label_extractors(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.label_extractors
    }

    // Take field
    pub fn take_label_extractors(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.label_extractors, ::std::collections::HashMap::new())
    }

    // .google.api.Distribution.BucketOptions bucket_options = 8;


    pub fn get_bucket_options(&self) -> &super::distribution::Distribution_BucketOptions {
        self.bucket_options.as_ref().unwrap_or_else(|| <super::distribution::Distribution_BucketOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_bucket_options(&mut self) {
        self.bucket_options.clear();
    }

    pub fn has_bucket_options(&self) -> bool {
        self.bucket_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bucket_options(&mut self, v: super::distribution::Distribution_BucketOptions) {
        self.bucket_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket_options(&mut self) -> &mut super::distribution::Distribution_BucketOptions {
        if self.bucket_options.is_none() {
            self.bucket_options.set_default();
        }
        self.bucket_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_bucket_options(&mut self) -> super::distribution::Distribution_BucketOptions {
        self.bucket_options.take().unwrap_or_else(|| super::distribution::Distribution_BucketOptions::new())
    }

    // .google.protobuf.Timestamp create_time = 9;


    pub fn get_create_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.create_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_create_time(&mut self) {
        self.create_time.clear();
    }

    pub fn has_create_time(&self) -> bool {
        self.create_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.create_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.create_time.is_none() {
            self.create_time.set_default();
        }
        self.create_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.create_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp update_time = 10;


    pub fn get_update_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.update_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_time(&mut self) {
        self.update_time.clear();
    }

    pub fn has_update_time(&self) -> bool {
        self.update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.update_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.update_time.is_none() {
            self.update_time.set_default();
        }
        self.update_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.update_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.logging.v2.LogMetric.ApiVersion version = 4;


    pub fn get_version(&self) -> LogMetric_ApiVersion {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = LogMetric_ApiVersion::V2;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: LogMetric_ApiVersion) {
        self.version = v;
    }
}

impl ::protobuf::Message for LogMetric {
    fn is_initialized(&self) -> bool {
        for v in &self.metric_descriptor {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.bucket_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metric_descriptor)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value_extractor)?;
                },
                7 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.label_extractors)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bucket_options)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_time)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_time)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.version, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.filter);
        }
        if let Some(ref v) = self.metric_descriptor.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.value_extractor.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.value_extractor);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.label_extractors);
        if let Some(ref v) = self.bucket_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.version != LogMetric_ApiVersion::V2 {
            my_size += ::protobuf::rt::enum_size(4, self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.filter.is_empty() {
            os.write_string(3, &self.filter)?;
        }
        if let Some(ref v) = self.metric_descriptor.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.value_extractor.is_empty() {
            os.write_string(6, &self.value_extractor)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.label_extractors, os)?;
        if let Some(ref v) = self.bucket_options.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_time.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.version != LogMetric_ApiVersion::V2 {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.version))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogMetric {
        LogMetric::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &LogMetric| { &m.name },
                |m: &mut LogMetric| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &LogMetric| { &m.description },
                |m: &mut LogMetric| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &LogMetric| { &m.filter },
                |m: &mut LogMetric| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metric::MetricDescriptor>>(
                "metric_descriptor",
                |m: &LogMetric| { &m.metric_descriptor },
                |m: &mut LogMetric| { &mut m.metric_descriptor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value_extractor",
                |m: &LogMetric| { &m.value_extractor },
                |m: &mut LogMetric| { &mut m.value_extractor },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "label_extractors",
                |m: &LogMetric| { &m.label_extractors },
                |m: &mut LogMetric| { &mut m.label_extractors },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::distribution::Distribution_BucketOptions>>(
                "bucket_options",
                |m: &LogMetric| { &m.bucket_options },
                |m: &mut LogMetric| { &mut m.bucket_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "create_time",
                |m: &LogMetric| { &m.create_time },
                |m: &mut LogMetric| { &mut m.create_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "update_time",
                |m: &LogMetric| { &m.update_time },
                |m: &mut LogMetric| { &mut m.update_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LogMetric_ApiVersion>>(
                "version",
                |m: &LogMetric| { &m.version },
                |m: &mut LogMetric| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogMetric>(
                "LogMetric",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogMetric {
        static instance: ::protobuf::rt::LazyV2<LogMetric> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogMetric::new)
    }
}

impl ::protobuf::Clear for LogMetric {
    fn clear(&mut self) {
        self.name.clear();
        self.description.clear();
        self.filter.clear();
        self.metric_descriptor.clear();
        self.value_extractor.clear();
        self.label_extractors.clear();
        self.bucket_options.clear();
        self.create_time.clear();
        self.update_time.clear();
        self.version = LogMetric_ApiVersion::V2;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogMetric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogMetric {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LogMetric_ApiVersion {
    V2 = 0,
    V1 = 1,
}

impl ::protobuf::ProtobufEnum for LogMetric_ApiVersion {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LogMetric_ApiVersion> {
        match value {
            0 => ::std::option::Option::Some(LogMetric_ApiVersion::V2),
            1 => ::std::option::Option::Some(LogMetric_ApiVersion::V1),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LogMetric_ApiVersion] = &[
            LogMetric_ApiVersion::V2,
            LogMetric_ApiVersion::V1,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LogMetric_ApiVersion>("LogMetric.ApiVersion", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LogMetric_ApiVersion {
}

impl ::std::default::Default for LogMetric_ApiVersion {
    fn default() -> Self {
        LogMetric_ApiVersion::V2
    }
}

impl ::protobuf::reflect::ProtobufValue for LogMetric_ApiVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListLogMetricsRequest {
    // message fields
    pub parent: ::std::string::String,
    pub page_token: ::std::string::String,
    pub page_size: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListLogMetricsRequest {
    fn default() -> &'a ListLogMetricsRequest {
        <ListLogMetricsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListLogMetricsRequest {
    pub fn new() -> ListLogMetricsRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string page_token = 2;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }

    // int32 page_size = 3;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }
}

impl ::protobuf::Message for ListLogMetricsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.page_token);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(2, &self.page_token)?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListLogMetricsRequest {
        ListLogMetricsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListLogMetricsRequest| { &m.parent },
                |m: &mut ListLogMetricsRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListLogMetricsRequest| { &m.page_token },
                |m: &mut ListLogMetricsRequest| { &mut m.page_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListLogMetricsRequest| { &m.page_size },
                |m: &mut ListLogMetricsRequest| { &mut m.page_size },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListLogMetricsRequest>(
                "ListLogMetricsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListLogMetricsRequest {
        static instance: ::protobuf::rt::LazyV2<ListLogMetricsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListLogMetricsRequest::new)
    }
}

impl ::protobuf::Clear for ListLogMetricsRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.page_token.clear();
        self.page_size = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListLogMetricsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListLogMetricsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListLogMetricsResponse {
    // message fields
    pub metrics: ::protobuf::RepeatedField<LogMetric>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListLogMetricsResponse {
    fn default() -> &'a ListLogMetricsResponse {
        <ListLogMetricsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListLogMetricsResponse {
    pub fn new() -> ListLogMetricsResponse {
        ::std::default::Default::default()
    }

    // repeated .google.logging.v2.LogMetric metrics = 1;


    pub fn get_metrics(&self) -> &[LogMetric] {
        &self.metrics
    }
    pub fn clear_metrics(&mut self) {
        self.metrics.clear();
    }

    // Param is passed by value, moved
    pub fn set_metrics(&mut self, v: ::protobuf::RepeatedField<LogMetric>) {
        self.metrics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metrics(&mut self) -> &mut ::protobuf::RepeatedField<LogMetric> {
        &mut self.metrics
    }

    // Take field
    pub fn take_metrics(&mut self) -> ::protobuf::RepeatedField<LogMetric> {
        ::std::mem::replace(&mut self.metrics, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListLogMetricsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.metrics {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.metrics)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.metrics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.metrics {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListLogMetricsResponse {
        ListLogMetricsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LogMetric>>(
                "metrics",
                |m: &ListLogMetricsResponse| { &m.metrics },
                |m: &mut ListLogMetricsResponse| { &mut m.metrics },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListLogMetricsResponse| { &m.next_page_token },
                |m: &mut ListLogMetricsResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListLogMetricsResponse>(
                "ListLogMetricsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListLogMetricsResponse {
        static instance: ::protobuf::rt::LazyV2<ListLogMetricsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListLogMetricsResponse::new)
    }
}

impl ::protobuf::Clear for ListLogMetricsResponse {
    fn clear(&mut self) {
        self.metrics.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListLogMetricsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListLogMetricsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetLogMetricRequest {
    // message fields
    pub metric_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetLogMetricRequest {
    fn default() -> &'a GetLogMetricRequest {
        <GetLogMetricRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetLogMetricRequest {
    pub fn new() -> GetLogMetricRequest {
        ::std::default::Default::default()
    }

    // string metric_name = 1;


    pub fn get_metric_name(&self) -> &str {
        &self.metric_name
    }
    pub fn clear_metric_name(&mut self) {
        self.metric_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_metric_name(&mut self, v: ::std::string::String) {
        self.metric_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric_name(&mut self) -> &mut ::std::string::String {
        &mut self.metric_name
    }

    // Take field
    pub fn take_metric_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.metric_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetLogMetricRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.metric_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.metric_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.metric_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.metric_name.is_empty() {
            os.write_string(1, &self.metric_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetLogMetricRequest {
        GetLogMetricRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "metric_name",
                |m: &GetLogMetricRequest| { &m.metric_name },
                |m: &mut GetLogMetricRequest| { &mut m.metric_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetLogMetricRequest>(
                "GetLogMetricRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetLogMetricRequest {
        static instance: ::protobuf::rt::LazyV2<GetLogMetricRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetLogMetricRequest::new)
    }
}

impl ::protobuf::Clear for GetLogMetricRequest {
    fn clear(&mut self) {
        self.metric_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetLogMetricRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetLogMetricRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateLogMetricRequest {
    // message fields
    pub parent: ::std::string::String,
    pub metric: ::protobuf::SingularPtrField<LogMetric>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateLogMetricRequest {
    fn default() -> &'a CreateLogMetricRequest {
        <CreateLogMetricRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateLogMetricRequest {
    pub fn new() -> CreateLogMetricRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // .google.logging.v2.LogMetric metric = 2;


    pub fn get_metric(&self) -> &LogMetric {
        self.metric.as_ref().unwrap_or_else(|| <LogMetric as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metric(&mut self) {
        self.metric.clear();
    }

    pub fn has_metric(&self) -> bool {
        self.metric.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metric(&mut self, v: LogMetric) {
        self.metric = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric(&mut self) -> &mut LogMetric {
        if self.metric.is_none() {
            self.metric.set_default();
        }
        self.metric.as_mut().unwrap()
    }

    // Take field
    pub fn take_metric(&mut self) -> LogMetric {
        self.metric.take().unwrap_or_else(|| LogMetric::new())
    }
}

impl ::protobuf::Message for CreateLogMetricRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.metric {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metric)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if let Some(ref v) = self.metric.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if let Some(ref v) = self.metric.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateLogMetricRequest {
        CreateLogMetricRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreateLogMetricRequest| { &m.parent },
                |m: &mut CreateLogMetricRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LogMetric>>(
                "metric",
                |m: &CreateLogMetricRequest| { &m.metric },
                |m: &mut CreateLogMetricRequest| { &mut m.metric },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateLogMetricRequest>(
                "CreateLogMetricRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateLogMetricRequest {
        static instance: ::protobuf::rt::LazyV2<CreateLogMetricRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateLogMetricRequest::new)
    }
}

impl ::protobuf::Clear for CreateLogMetricRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.metric.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateLogMetricRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateLogMetricRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateLogMetricRequest {
    // message fields
    pub metric_name: ::std::string::String,
    pub metric: ::protobuf::SingularPtrField<LogMetric>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateLogMetricRequest {
    fn default() -> &'a UpdateLogMetricRequest {
        <UpdateLogMetricRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateLogMetricRequest {
    pub fn new() -> UpdateLogMetricRequest {
        ::std::default::Default::default()
    }

    // string metric_name = 1;


    pub fn get_metric_name(&self) -> &str {
        &self.metric_name
    }
    pub fn clear_metric_name(&mut self) {
        self.metric_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_metric_name(&mut self, v: ::std::string::String) {
        self.metric_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric_name(&mut self) -> &mut ::std::string::String {
        &mut self.metric_name
    }

    // Take field
    pub fn take_metric_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.metric_name, ::std::string::String::new())
    }

    // .google.logging.v2.LogMetric metric = 2;


    pub fn get_metric(&self) -> &LogMetric {
        self.metric.as_ref().unwrap_or_else(|| <LogMetric as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metric(&mut self) {
        self.metric.clear();
    }

    pub fn has_metric(&self) -> bool {
        self.metric.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metric(&mut self, v: LogMetric) {
        self.metric = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric(&mut self) -> &mut LogMetric {
        if self.metric.is_none() {
            self.metric.set_default();
        }
        self.metric.as_mut().unwrap()
    }

    // Take field
    pub fn take_metric(&mut self) -> LogMetric {
        self.metric.take().unwrap_or_else(|| LogMetric::new())
    }
}

impl ::protobuf::Message for UpdateLogMetricRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.metric {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.metric_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metric)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.metric_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.metric_name);
        }
        if let Some(ref v) = self.metric.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.metric_name.is_empty() {
            os.write_string(1, &self.metric_name)?;
        }
        if let Some(ref v) = self.metric.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateLogMetricRequest {
        UpdateLogMetricRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "metric_name",
                |m: &UpdateLogMetricRequest| { &m.metric_name },
                |m: &mut UpdateLogMetricRequest| { &mut m.metric_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LogMetric>>(
                "metric",
                |m: &UpdateLogMetricRequest| { &m.metric },
                |m: &mut UpdateLogMetricRequest| { &mut m.metric },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateLogMetricRequest>(
                "UpdateLogMetricRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateLogMetricRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateLogMetricRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateLogMetricRequest::new)
    }
}

impl ::protobuf::Clear for UpdateLogMetricRequest {
    fn clear(&mut self) {
        self.metric_name.clear();
        self.metric.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateLogMetricRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateLogMetricRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteLogMetricRequest {
    // message fields
    pub metric_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteLogMetricRequest {
    fn default() -> &'a DeleteLogMetricRequest {
        <DeleteLogMetricRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteLogMetricRequest {
    pub fn new() -> DeleteLogMetricRequest {
        ::std::default::Default::default()
    }

    // string metric_name = 1;


    pub fn get_metric_name(&self) -> &str {
        &self.metric_name
    }
    pub fn clear_metric_name(&mut self) {
        self.metric_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_metric_name(&mut self, v: ::std::string::String) {
        self.metric_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric_name(&mut self) -> &mut ::std::string::String {
        &mut self.metric_name
    }

    // Take field
    pub fn take_metric_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.metric_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteLogMetricRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.metric_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.metric_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.metric_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.metric_name.is_empty() {
            os.write_string(1, &self.metric_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteLogMetricRequest {
        DeleteLogMetricRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "metric_name",
                |m: &DeleteLogMetricRequest| { &m.metric_name },
                |m: &mut DeleteLogMetricRequest| { &mut m.metric_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteLogMetricRequest>(
                "DeleteLogMetricRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteLogMetricRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteLogMetricRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteLogMetricRequest::new)
    }
}

impl ::protobuf::Clear for DeleteLogMetricRequest {
    fn clear(&mut self) {
        self.metric_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteLogMetricRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteLogMetricRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'google/logging/v2/logging_metrics.proto\x12\x11google.logging.v2\x1a\
    \x1dgoogle/api/distribution.proto\x1a\x17google/api/metric.proto\x1a\x1b\
    google/protobuf/empty.proto\x1a\x20google/protobuf/field_mask.proto\x1a\
    \x1fgoogle/protobuf/timestamp.proto\x1a\x1cgoogle/api/annotations.proto\
    \x1a\x17google/api/client.proto\"\x9d\x05\n\tLogMetric\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x12\x20\n\x0bdescription\x18\x02\x20\x01(\t\
    R\x0bdescription\x12\x16\n\x06filter\x18\x03\x20\x01(\tR\x06filter\x12I\
    \n\x11metric_descriptor\x18\x05\x20\x01(\x0b2\x1c.google.api.MetricDescr\
    iptorR\x10metricDescriptor\x12'\n\x0fvalue_extractor\x18\x06\x20\x01(\tR\
    \x0evalueExtractor\x12\\\n\x10label_extractors\x18\x07\x20\x03(\x0b21.go\
    ogle.logging.v2.LogMetric.LabelExtractorsEntryR\x0flabelExtractors\x12M\
    \n\x0ebucket_options\x18\x08\x20\x01(\x0b2&.google.api.Distribution.Buck\
    etOptionsR\rbucketOptions\x12;\n\x0bcreate_time\x18\t\x20\x01(\x0b2\x1a.\
    google.protobuf.TimestampR\ncreateTime\x12;\n\x0bupdate_time\x18\n\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\nupdateTime\x12E\n\x07version\
    \x18\x04\x20\x01(\x0e2'.google.logging.v2.LogMetric.ApiVersionR\x07versi\
    onB\x02\x18\x01\x1aB\n\x14LabelExtractorsEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x02\
    8\x01\"\x1c\n\nApiVersion\x12\x06\n\x02V2\x10\0\x12\x06\n\x02V1\x10\x01\
    \"k\n\x15ListLogMetricsRequest\x12\x16\n\x06parent\x18\x01\x20\x01(\tR\
    \x06parent\x12\x1d\n\npage_token\x18\x02\x20\x01(\tR\tpageToken\x12\x1b\
    \n\tpage_size\x18\x03\x20\x01(\x05R\x08pageSize\"x\n\x16ListLogMetricsRe\
    sponse\x126\n\x07metrics\x18\x01\x20\x03(\x0b2\x1c.google.logging.v2.Log\
    MetricR\x07metrics\x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnextPa\
    geToken\"6\n\x13GetLogMetricRequest\x12\x1f\n\x0bmetric_name\x18\x01\x20\
    \x01(\tR\nmetricName\"f\n\x16CreateLogMetricRequest\x12\x16\n\x06parent\
    \x18\x01\x20\x01(\tR\x06parent\x124\n\x06metric\x18\x02\x20\x01(\x0b2\
    \x1c.google.logging.v2.LogMetricR\x06metric\"o\n\x16UpdateLogMetricReque\
    st\x12\x1f\n\x0bmetric_name\x18\x01\x20\x01(\tR\nmetricName\x124\n\x06me\
    tric\x18\x02\x20\x01(\x0b2\x1c.google.logging.v2.LogMetricR\x06metric\"9\
    \n\x16DeleteLogMetricRequest\x12\x1f\n\x0bmetric_name\x18\x01\x20\x01(\t\
    R\nmetricName2\xe4\x07\n\x10MetricsServiceV2\x12\x8e\x01\n\x0eListLogMet\
    rics\x12(.google.logging.v2.ListLogMetricsRequest\x1a).google.logging.v2\
    .ListLogMetricsResponse\"'\x82\xd3\xe4\x93\x02!\x12\x1f/v2/{parent=proje\
    cts/*}/metrics\x12\x84\x01\n\x0cGetLogMetric\x12&.google.logging.v2.GetL\
    ogMetricRequest\x1a\x1c.google.logging.v2.LogMetric\".\x82\xd3\xe4\x93\
    \x02(\x12&/v2/{metric_name=projects/*/metrics/*}\x12\x8b\x01\n\x0fCreate\
    LogMetric\x12).google.logging.v2.CreateLogMetricRequest\x1a\x1c.google.l\
    ogging.v2.LogMetric\"/\x82\xd3\xe4\x93\x02)\"\x1f/v2/{parent=projects/*}\
    /metrics:\x06metric\x12\x92\x01\n\x0fUpdateLogMetric\x12).google.logging\
    .v2.UpdateLogMetricRequest\x1a\x1c.google.logging.v2.LogMetric\"6\x82\
    \xd3\xe4\x93\x020\x1a&/v2/{metric_name=projects/*/metrics/*}:\x06metric\
    \x12\x84\x01\n\x0fDeleteLogMetric\x12).google.logging.v2.DeleteLogMetric\
    Request\x1a\x16.google.protobuf.Empty\".\x82\xd3\xe4\x93\x02(*&/v2/{metr\
    ic_name=projects/*/metrics/*}\x1a\x8d\x02\xd2A\xf0\x01https://www.google\
    apis.com/auth/cloud-platform,https://www.googleapis.com/auth/cloud-platf\
    orm.read-only,https://www.googleapis.com/auth/logging.admin,https://www.\
    googleapis.com/auth/logging.read,https://www.googleapis.com/auth/logging\
    .write\xcaA\x16logging.googleapis.comB\x9f\x01\n\x15com.google.logging.v\
    2B\x13LoggingMetricsProtoP\x01Z8google.golang.org/genproto/googleapis/lo\
    gging/v2;logging\xf8\x01\x01\xaa\x02\x17Google.Cloud.Logging.V2\xca\x02\
    \x17Google\\Cloud\\Logging\\V2J\xa2M\n\x07\x12\x05\x0f\0\x99\x02\x01\n\
    \xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20Go\
    ogle\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Ve\
    rsion\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20t\
    his\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\
    \x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\
    \x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Un\
    less\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\
    \x20writing,\x20software\n\x20distributed\x20under\x20the\x20License\x20\
    is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20\
    WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20expres\
    s\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x1a\n\t\n\x02\x03\
    \0\x12\x03\x13\0'\n\t\n\x02\x03\x01\x12\x03\x14\0!\n\t\n\x02\x03\x02\x12\
    \x03\x15\0%\n\t\n\x02\x03\x03\x12\x03\x16\0*\n\t\n\x02\x03\x04\x12\x03\
    \x17\0)\n\t\n\x02\x03\x05\x12\x03\x18\0&\n\t\n\x02\x03\x06\x12\x03\x19\0\
    !\n\x08\n\x01\x08\x12\x03\x1b\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x1b\0\x1f\
    \n\x08\n\x01\x08\x12\x03\x1c\04\n\t\n\x02\x08%\x12\x03\x1c\04\n\x08\n\
    \x01\x08\x12\x03\x1d\0O\n\t\n\x02\x08\x0b\x12\x03\x1d\0O\n\x08\n\x01\x08\
    \x12\x03\x1e\0\"\n\t\n\x02\x08\n\x12\x03\x1e\0\"\n\x08\n\x01\x08\x12\x03\
    \x1f\04\n\t\n\x02\x08\x08\x12\x03\x1f\04\n\x08\n\x01\x08\x12\x03\x20\0.\
    \n\t\n\x02\x08\x01\x12\x03\x20\0.\n\x08\n\x01\x08\x12\x03!\04\n\t\n\x02\
    \x08)\x12\x03!\04\n9\n\x02\x06\0\x12\x04$\0Q\x01\x1a-\x20Service\x20for\
    \x20configuring\x20logs-based\x20metrics.\n\n\n\n\x03\x06\0\x01\x12\x03$\
    \x08\x18\n\n\n\x03\x06\0\x03\x12\x03%\x02>\n\x0c\n\x05\x06\0\x03\x99\x08\
    \x12\x03%\x02>\n\x0b\n\x03\x06\0\x03\x12\x04&\x02+6\n\r\n\x05\x06\0\x03\
    \x9a\x08\x12\x04&\x02+6\n)\n\x04\x06\0\x02\0\x12\x04.\x022\x03\x1a\x1b\
    \x20Lists\x20logs-based\x20metrics.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\
    \x03.\x06\x14\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03.\x15*\n\x0c\n\x05\x06\
    \0\x02\0\x03\x12\x03.5K\n\r\n\x05\x06\0\x02\0\x04\x12\x04/\x041\x06\n\
    \x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04/\x041\x06\n)\n\x04\x06\0\
    \x02\x01\x12\x045\x029\x03\x1a\x1b\x20Gets\x20a\x20logs-based\x20metric.\
    \n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x035\x06\x12\n\x0c\n\x05\x06\0\x02\
    \x01\x02\x12\x035\x13&\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x0351:\n\r\n\
    \x05\x06\0\x02\x01\x04\x12\x046\x048\x06\n\x11\n\t\x06\0\x02\x01\x04\xb0\
    \xca\xbc\"\x12\x046\x048\x06\n,\n\x04\x06\0\x02\x02\x12\x04<\x02A\x03\
    \x1a\x1e\x20Creates\x20a\x20logs-based\x20metric.\n\n\x0c\n\x05\x06\0\
    \x02\x02\x01\x12\x03<\x06\x15\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03<\x16\
    ,\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03<7@\n\r\n\x05\x06\0\x02\x02\x04\
    \x12\x04=\x04@\x06\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04=\
    \x04@\x06\n7\n\x04\x06\0\x02\x03\x12\x04D\x02I\x03\x1a)\x20Creates\x20or\
    \x20updates\x20a\x20logs-based\x20metric.\n\n\x0c\n\x05\x06\0\x02\x03\
    \x01\x12\x03D\x06\x15\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03D\x16,\n\x0c\
    \n\x05\x06\0\x02\x03\x03\x12\x03D7@\n\r\n\x05\x06\0\x02\x03\x04\x12\x04E\
    \x04H\x06\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04E\x04H\x06\n,\
    \n\x04\x06\0\x02\x04\x12\x04L\x02P\x03\x1a\x1e\x20Deletes\x20a\x20logs-b\
    ased\x20metric.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03L\x06\x15\n\x0c\n\
    \x05\x06\0\x02\x04\x02\x12\x03L\x16,\n\x0c\n\x05\x06\0\x02\x04\x03\x12\
    \x03L7L\n\r\n\x05\x06\0\x02\x04\x04\x12\x04M\x04O\x06\n\x11\n\t\x06\0\
    \x02\x04\x04\xb0\xca\xbc\"\x12\x04M\x04O\x06\n\x99\x03\n\x02\x04\0\x12\
    \x05Z\0\xce\x01\x01\x1a\x8b\x03\x20Describes\x20a\x20logs-based\x20metri\
    c.\x20The\x20value\x20of\x20the\x20metric\x20is\x20the\x20number\x20of\
    \x20log\n\x20entries\x20that\x20match\x20a\x20logs\x20filter\x20in\x20a\
    \x20given\x20time\x20interval.\n\n\x20Logs-based\x20metric\x20can\x20als\
    o\x20be\x20used\x20to\x20extract\x20values\x20from\x20logs\x20and\x20cre\
    ate\x20a\n\x20a\x20distribution\x20of\x20the\x20values.\x20The\x20distri\
    bution\x20records\x20the\x20statistics\x20of\x20the\n\x20extracted\x20va\
    lues\x20along\x20with\x20an\x20optional\x20histogram\x20of\x20the\x20val\
    ues\x20as\x20specified\n\x20by\x20the\x20bucket\x20options.\n\n\n\n\x03\
    \x04\0\x01\x12\x03Z\x08\x11\n$\n\x04\x04\0\x04\0\x12\x04\\\x02b\x03\x1a\
    \x16\x20Logging\x20API\x20version.\n\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\
    \\\x07\x11\n\x20\n\x06\x04\0\x04\0\x02\0\x12\x03^\x04\x0b\x1a\x11\x20Log\
    ging\x20API\x20v2.\n\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03^\x04\x06\
    \n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03^\t\n\n\x20\n\x06\x04\0\x04\0\
    \x02\x01\x12\x03a\x04\x0b\x1a\x11\x20Logging\x20API\x20v1.\n\n\x0e\n\x07\
    \x04\0\x04\0\x02\x01\x01\x12\x03a\x04\x06\n\x0e\n\x07\x04\0\x04\0\x02\
    \x01\x02\x12\x03a\t\n\n\xd6\x05\n\x04\x04\0\x02\0\x12\x03q\x02\x12\x1a\
    \xc8\x05\x20Required.\x20The\x20client-assigned\x20metric\x20identifier.\
    \n\x20Examples:\x20`\"error_count\"`,\x20`\"nginx/requests\"`.\n\n\x20Me\
    tric\x20identifiers\x20are\x20limited\x20to\x20100\x20characters\x20and\
    \x20can\x20include\x20only\x20the\n\x20following\x20characters:\x20`A-Z`\
    ,\x20`a-z`,\x20`0-9`,\x20and\x20the\x20special\x20characters\n\x20`_-.,+\
    !*',()%/`.\x20The\x20forward-slash\x20character\x20(`/`)\x20denotes\x20a\
    \x20hierarchy\x20of\n\x20name\x20pieces,\x20and\x20it\x20cannot\x20be\
    \x20the\x20first\x20character\x20of\x20the\x20name.\n\n\x20The\x20metric\
    \x20identifier\x20in\x20this\x20field\x20must\x20not\x20be\n\x20[URL-enc\
    oded](https://en.wikipedia.org/wiki/Percent-encoding).\n\x20However,\x20\
    when\x20the\x20metric\x20identifier\x20appears\x20as\x20the\x20`[METRIC_\
    ID]`\x20part\x20of\x20a\n\x20`metric_name`\x20API\x20parameter,\x20then\
    \x20the\x20metric\x20identifier\x20must\x20be\n\x20URL-encoded.\x20Examp\
    le:\x20`\"projects/my-project/metrics/nginx%2Frequests\"`.\n\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03q\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03q\t\
    \r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03q\x10\x11\n\x92\x01\n\x04\x04\0\
    \x02\x01\x12\x03u\x02\x19\x1a\x84\x01\x20Optional.\x20A\x20description\
    \x20of\x20this\x20metric,\x20which\x20is\x20used\x20in\x20documentation.\
    \n\x20The\x20maximum\x20length\x20of\x20the\x20description\x20is\x208000\
    \x20characters.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03u\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03u\t\x14\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03u\x17\x18\n\xf1\x01\n\x04\x04\0\x02\x02\x12\x03~\x02\x14\x1a\xe3\x01\
    \x20Required.\x20An\x20[advanced\x20logs\x20filter](/logging/docs/view/a\
    dvanced_filters)\n\x20which\x20is\x20used\x20to\x20match\x20log\x20entri\
    es.\n\x20Example:\n\n\x20\x20\x20\x20\x20\"resource.type=gae_app\x20AND\
    \x20severity>=ERROR\"\n\n\x20The\x20maximum\x20length\x20of\x20the\x20fi\
    lter\x20is\x2020000\x20characters.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03~\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03~\t\x0f\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03~\x12\x13\n\xac\x08\n\x04\x04\0\x02\x03\x12\
    \x04\x95\x01\x024\x1a\x9d\x08\x20Optional.\x20The\x20metric\x20descripto\
    r\x20associated\x20with\x20the\x20logs-based\x20metric.\n\x20If\x20unspe\
    cified,\x20it\x20uses\x20a\x20default\x20metric\x20descriptor\x20with\
    \x20a\x20DELTA\x20metric\n\x20kind,\x20INT64\x20value\x20type,\x20with\
    \x20no\x20labels\x20and\x20a\x20unit\x20of\x20\"1\".\x20Such\x20a\x20met\
    ric\n\x20counts\x20the\x20number\x20of\x20log\x20entries\x20matching\x20\
    the\x20`filter`\x20expression.\n\n\x20The\x20`name`,\x20`type`,\x20and\
    \x20`description`\x20fields\x20in\x20the\x20`metric_descriptor`\n\x20are\
    \x20output\x20only,\x20and\x20is\x20constructed\x20using\x20the\x20`name\
    `\x20and\x20`description`\n\x20field\x20in\x20the\x20LogMetric.\n\n\x20T\
    o\x20create\x20a\x20logs-based\x20metric\x20that\x20records\x20a\x20dist\
    ribution\x20of\x20log\x20values,\x20a\n\x20DELTA\x20metric\x20kind\x20wi\
    th\x20a\x20DISTRIBUTION\x20value\x20type\x20must\x20be\x20used\x20along\
    \x20with\n\x20a\x20`value_extractor`\x20expression\x20in\x20the\x20LogMe\
    tric.\n\n\x20Each\x20label\x20in\x20the\x20metric\x20descriptor\x20must\
    \x20have\x20a\x20matching\x20label\n\x20name\x20as\x20the\x20key\x20and\
    \x20an\x20extractor\x20expression\x20as\x20the\x20value\x20in\x20the\n\
    \x20`label_extractors`\x20map.\n\n\x20The\x20`metric_kind`\x20and\x20`va\
    lue_type`\x20fields\x20in\x20the\x20`metric_descriptor`\x20cannot\n\x20b\
    e\x20updated\x20once\x20initially\x20configured.\x20New\x20labels\x20can\
    \x20be\x20added\x20in\x20the\n\x20`metric_descriptor`,\x20but\x20existin\
    g\x20labels\x20cannot\x20be\x20modified\x20except\x20for\n\x20their\x20d\
    escription.\n\n\r\n\x05\x04\0\x02\x03\x06\x12\x04\x95\x01\x02\x1d\n\r\n\
    \x05\x04\0\x02\x03\x01\x12\x04\x95\x01\x1e/\n\r\n\x05\x04\0\x02\x03\x03\
    \x12\x04\x95\x0123\n\x9a\x08\n\x04\x04\0\x02\x04\x12\x04\xaa\x01\x02\x1d\
    \x1a\x8b\x08\x20Optional.\x20A\x20`value_extractor`\x20is\x20required\
    \x20when\x20using\x20a\x20distribution\n\x20logs-based\x20metric\x20to\
    \x20extract\x20the\x20values\x20to\x20record\x20from\x20a\x20log\x20entr\
    y.\n\x20Two\x20functions\x20are\x20supported\x20for\x20value\x20extracti\
    on:\x20`EXTRACT(field)`\x20or\n\x20`REGEXP_EXTRACT(field,\x20regex)`.\
    \x20The\x20argument\x20are:\n\x20\x20\x201.\x20field:\x20The\x20name\x20\
    of\x20the\x20log\x20entry\x20field\x20from\x20which\x20the\x20value\x20i\
    s\x20to\x20be\n\x20\x20\x20\x20\x20\x20extracted.\n\x20\x20\x202.\x20reg\
    ex:\x20A\x20regular\x20expression\x20using\x20the\x20Google\x20RE2\x20sy\
    ntax\n\x20\x20\x20\x20\x20\x20(https://github.com/google/re2/wiki/Syntax\
    )\x20with\x20a\x20single\x20capture\n\x20\x20\x20\x20\x20\x20group\x20to\
    \x20extract\x20data\x20from\x20the\x20specified\x20log\x20entry\x20field\
    .\x20The\x20value\n\x20\x20\x20\x20\x20\x20of\x20the\x20field\x20is\x20c\
    onverted\x20to\x20a\x20string\x20before\x20applying\x20the\x20regex.\n\
    \x20\x20\x20\x20\x20\x20It\x20is\x20an\x20error\x20to\x20specify\x20a\
    \x20regex\x20that\x20does\x20not\x20include\x20exactly\x20one\n\x20\x20\
    \x20\x20\x20\x20capture\x20group.\n\n\x20The\x20result\x20of\x20the\x20e\
    xtraction\x20must\x20be\x20convertible\x20to\x20a\x20double\x20type,\x20\
    as\x20the\n\x20distribution\x20always\x20records\x20double\x20values.\
    \x20If\x20either\x20the\x20extraction\x20or\n\x20the\x20conversion\x20to\
    \x20double\x20fails,\x20then\x20those\x20values\x20are\x20not\x20recorde\
    d\x20in\x20the\n\x20distribution.\n\n\x20Example:\x20`REGEXP_EXTRACT(jso\
    nPayload.request,\x20\".*quantity=(\\d+).*\")`\n\n\r\n\x05\x04\0\x02\x04\
    \x05\x12\x04\xaa\x01\x02\x08\n\r\n\x05\x04\0\x02\x04\x01\x12\x04\xaa\x01\
    \t\x18\n\r\n\x05\x04\0\x02\x04\x03\x12\x04\xaa\x01\x1b\x1c\n\xa2\x06\n\
    \x04\x04\0\x02\x05\x12\x04\xba\x01\x02+\x1a\x93\x06\x20Optional.\x20A\
    \x20map\x20from\x20a\x20label\x20key\x20string\x20to\x20an\x20extractor\
    \x20expression\x20which\x20is\n\x20used\x20to\x20extract\x20data\x20from\
    \x20a\x20log\x20entry\x20field\x20and\x20assign\x20as\x20the\x20label\
    \x20value.\n\x20Each\x20label\x20key\x20specified\x20in\x20the\x20LabelD\
    escriptor\x20must\x20have\x20an\x20associated\n\x20extractor\x20expressi\
    on\x20in\x20this\x20map.\x20The\x20syntax\x20of\x20the\x20extractor\x20e\
    xpression\n\x20is\x20the\x20same\x20as\x20for\x20the\x20`value_extractor\
    `\x20field.\n\n\x20The\x20extracted\x20value\x20is\x20converted\x20to\
    \x20the\x20type\x20defined\x20in\x20the\x20label\n\x20descriptor.\x20If\
    \x20the\x20either\x20the\x20extraction\x20or\x20the\x20type\x20conversio\
    n\x20fails,\n\x20the\x20label\x20will\x20have\x20a\x20default\x20value.\
    \x20The\x20default\x20value\x20for\x20a\x20string\n\x20label\x20is\x20an\
    \x20empty\x20string,\x20for\x20an\x20integer\x20label\x20its\x200,\x20an\
    d\x20for\x20a\x20boolean\n\x20label\x20its\x20`false`.\n\n\x20Note\x20th\
    at\x20there\x20are\x20upper\x20bounds\x20on\x20the\x20maximum\x20number\
    \x20of\x20labels\x20and\x20the\n\x20number\x20of\x20active\x20time\x20se\
    ries\x20that\x20are\x20allowed\x20in\x20a\x20project.\n\n\r\n\x05\x04\0\
    \x02\x05\x06\x12\x04\xba\x01\x02\x15\n\r\n\x05\x04\0\x02\x05\x01\x12\x04\
    \xba\x01\x16&\n\r\n\x05\x04\0\x02\x05\x03\x12\x04\xba\x01)*\n\xd7\x01\n\
    \x04\x04\0\x02\x06\x12\x04\xbf\x01\x02;\x1a\xc8\x01\x20Optional.\x20The\
    \x20`bucket_options`\x20are\x20required\x20when\x20the\x20logs-based\x20\
    metric\x20is\n\x20using\x20a\x20DISTRIBUTION\x20value\x20type\x20and\x20\
    it\x20describes\x20the\x20bucket\x20boundaries\n\x20used\x20to\x20create\
    \x20a\x20histogram\x20of\x20the\x20extracted\x20values.\n\n\r\n\x05\x04\
    \0\x02\x06\x06\x12\x04\xbf\x01\x02'\n\r\n\x05\x04\0\x02\x06\x01\x12\x04\
    \xbf\x01(6\n\r\n\x05\x04\0\x02\x06\x03\x12\x04\xbf\x019:\nu\n\x04\x04\0\
    \x02\x07\x12\x04\xc4\x01\x02,\x1ag\x20Output\x20only.\x20The\x20creation\
    \x20timestamp\x20of\x20the\x20metric.\n\n\x20This\x20field\x20may\x20not\
    \x20be\x20present\x20for\x20older\x20metrics.\n\n\r\n\x05\x04\0\x02\x07\
    \x06\x12\x04\xc4\x01\x02\x1b\n\r\n\x05\x04\0\x02\x07\x01\x12\x04\xc4\x01\
    \x1c'\n\r\n\x05\x04\0\x02\x07\x03\x12\x04\xc4\x01*+\nx\n\x04\x04\0\x02\
    \x08\x12\x04\xc9\x01\x02-\x1aj\x20Output\x20only.\x20The\x20last\x20upda\
    te\x20timestamp\x20of\x20the\x20metric.\n\n\x20This\x20field\x20may\x20n\
    ot\x20be\x20present\x20for\x20older\x20metrics.\n\n\r\n\x05\x04\0\x02\
    \x08\x06\x12\x04\xc9\x01\x02\x1b\n\r\n\x05\x04\0\x02\x08\x01\x12\x04\xc9\
    \x01\x1c'\n\r\n\x05\x04\0\x02\x08\x03\x12\x04\xc9\x01*,\n\x89\x01\n\x04\
    \x04\0\x02\t\x12\x04\xcd\x01\x02-\x1a{\x20Deprecated.\x20The\x20API\x20v\
    ersion\x20that\x20created\x20or\x20updated\x20this\x20metric.\n\x20The\
    \x20v2\x20format\x20is\x20used\x20by\x20default\x20and\x20cannot\x20be\
    \x20changed.\n\n\r\n\x05\x04\0\x02\t\x06\x12\x04\xcd\x01\x02\x0c\n\r\n\
    \x05\x04\0\x02\t\x01\x12\x04\xcd\x01\r\x14\n\r\n\x05\x04\0\x02\t\x03\x12\
    \x04\xcd\x01\x17\x18\n\r\n\x05\x04\0\x02\t\x08\x12\x04\xcd\x01\x19,\n\
    \x0e\n\x06\x04\0\x02\t\x08\x03\x12\x04\xcd\x01\x1a+\n1\n\x02\x04\x01\x12\
    \x06\xd1\x01\0\xe1\x01\x01\x1a#\x20The\x20parameters\x20to\x20ListLogMet\
    rics.\n\n\x0b\n\x03\x04\x01\x01\x12\x04\xd1\x01\x08\x1d\ng\n\x04\x04\x01\
    \x02\0\x12\x04\xd5\x01\x02\x14\x1aY\x20Required.\x20The\x20name\x20of\
    \x20the\x20project\x20containing\x20the\x20metrics:\n\n\x20\x20\x20\x20\
    \x20\"projects/[PROJECT_ID]\"\n\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\xd5\
    \x01\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\xd5\x01\t\x0f\n\r\n\x05\
    \x04\x01\x02\0\x03\x12\x04\xd5\x01\x12\x13\n\x9f\x02\n\x04\x04\x01\x02\
    \x01\x12\x04\xdb\x01\x02\x18\x1a\x90\x02\x20Optional.\x20If\x20present,\
    \x20then\x20retrieve\x20the\x20next\x20batch\x20of\x20results\x20from\
    \x20the\n\x20preceding\x20call\x20to\x20this\x20method.\x20`pageToken`\
    \x20must\x20be\x20the\x20value\x20of\n\x20`nextPageToken`\x20from\x20the\
    \x20previous\x20response.\x20The\x20values\x20of\x20other\x20method\n\
    \x20parameters\x20should\x20be\x20identical\x20to\x20those\x20in\x20the\
    \x20previous\x20call.\n\n\r\n\x05\x04\x01\x02\x01\x05\x12\x04\xdb\x01\
    \x02\x08\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\xdb\x01\t\x13\n\r\n\x05\
    \x04\x01\x02\x01\x03\x12\x04\xdb\x01\x16\x17\n\xd8\x01\n\x04\x04\x01\x02\
    \x02\x12\x04\xe0\x01\x02\x16\x1a\xc9\x01\x20Optional.\x20The\x20maximum\
    \x20number\x20of\x20results\x20to\x20return\x20from\x20this\x20request.\
    \n\x20Non-positive\x20values\x20are\x20ignored.\x20The\x20presence\x20of\
    \x20`nextPageToken`\x20in\x20the\n\x20response\x20indicates\x20that\x20m\
    ore\x20results\x20might\x20be\x20available.\n\n\r\n\x05\x04\x01\x02\x02\
    \x05\x12\x04\xe0\x01\x02\x07\n\r\n\x05\x04\x01\x02\x02\x01\x12\x04\xe0\
    \x01\x08\x11\n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\xe0\x01\x14\x15\n4\n\
    \x02\x04\x02\x12\x06\xe4\x01\0\xec\x01\x01\x1a&\x20Result\x20returned\
    \x20from\x20ListLogMetrics.\n\n\x0b\n\x03\x04\x02\x01\x12\x04\xe4\x01\
    \x08\x1e\n-\n\x04\x04\x02\x02\0\x12\x04\xe6\x01\x02!\x1a\x1f\x20A\x20lis\
    t\x20of\x20logs-based\x20metrics.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\
    \xe6\x01\x02\n\n\r\n\x05\x04\x02\x02\0\x06\x12\x04\xe6\x01\x0b\x14\n\r\n\
    \x05\x04\x02\x02\0\x01\x12\x04\xe6\x01\x15\x1c\n\r\n\x05\x04\x02\x02\0\
    \x03\x12\x04\xe6\x01\x1f\x20\n\xdb\x01\n\x04\x04\x02\x02\x01\x12\x04\xeb\
    \x01\x02\x1d\x1a\xcc\x01\x20If\x20there\x20might\x20be\x20more\x20result\
    s\x20than\x20appear\x20in\x20this\x20response,\x20then\n\x20`nextPageTok\
    en`\x20is\x20included.\x20To\x20get\x20the\x20next\x20set\x20of\x20resul\
    ts,\x20call\x20this\n\x20method\x20again\x20using\x20the\x20value\x20of\
    \x20`nextPageToken`\x20as\x20`pageToken`.\n\n\r\n\x05\x04\x02\x02\x01\
    \x05\x12\x04\xeb\x01\x02\x08\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\xeb\
    \x01\t\x18\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\xeb\x01\x1b\x1c\n/\n\
    \x02\x04\x03\x12\x06\xef\x01\0\xf4\x01\x01\x1a!\x20The\x20parameters\x20\
    to\x20GetLogMetric.\n\n\x0b\n\x03\x04\x03\x01\x12\x04\xef\x01\x08\x1b\nj\
    \n\x04\x04\x03\x02\0\x12\x04\xf3\x01\x02\x19\x1a\\\x20The\x20resource\
    \x20name\x20of\x20the\x20desired\x20metric:\n\n\x20\x20\x20\x20\x20\"pro\
    jects/[PROJECT_ID]/metrics/[METRIC_ID]\"\n\n\r\n\x05\x04\x03\x02\0\x05\
    \x12\x04\xf3\x01\x02\x08\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\xf3\x01\t\
    \x14\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xf3\x01\x17\x18\n2\n\x02\x04\
    \x04\x12\x06\xf7\x01\0\x82\x02\x01\x1a$\x20The\x20parameters\x20to\x20Cr\
    eateLogMetric.\n\n\x0b\n\x03\x04\x04\x01\x12\x04\xf7\x01\x08\x1e\n\xa0\
    \x01\n\x04\x04\x04\x02\0\x12\x04\xfd\x01\x02\x14\x1a\x91\x01\x20The\x20r\
    esource\x20name\x20of\x20the\x20project\x20in\x20which\x20to\x20create\
    \x20the\x20metric:\n\n\x20\x20\x20\x20\x20\"projects/[PROJECT_ID]\"\n\n\
    \x20The\x20new\x20metric\x20must\x20be\x20provided\x20in\x20the\x20reque\
    st.\n\n\r\n\x05\x04\x04\x02\0\x05\x12\x04\xfd\x01\x02\x08\n\r\n\x05\x04\
    \x04\x02\0\x01\x12\x04\xfd\x01\t\x0f\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\
    \xfd\x01\x12\x13\nb\n\x04\x04\x04\x02\x01\x12\x04\x81\x02\x02\x17\x1aT\
    \x20The\x20new\x20logs-based\x20metric,\x20which\x20must\x20not\x20have\
    \x20an\x20identifier\x20that\n\x20already\x20exists.\n\n\r\n\x05\x04\x04\
    \x02\x01\x06\x12\x04\x81\x02\x02\x0b\n\r\n\x05\x04\x04\x02\x01\x01\x12\
    \x04\x81\x02\x0c\x12\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\x81\x02\x15\
    \x16\n2\n\x02\x04\x05\x12\x06\x85\x02\0\x91\x02\x01\x1a$\x20The\x20param\
    eters\x20to\x20UpdateLogMetric.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\x85\
    \x02\x08\x1e\n\xaa\x02\n\x04\x04\x05\x02\0\x12\x04\x8d\x02\x02\x19\x1a\
    \x9b\x02\x20The\x20resource\x20name\x20of\x20the\x20metric\x20to\x20upda\
    te:\n\n\x20\x20\x20\x20\x20\"projects/[PROJECT_ID]/metrics/[METRIC_ID]\"\
    \n\n\x20The\x20updated\x20metric\x20must\x20be\x20provided\x20in\x20the\
    \x20request\x20and\x20it's\n\x20`name`\x20field\x20must\x20be\x20the\x20\
    same\x20as\x20`[METRIC_ID]`\x20If\x20the\x20metric\n\x20does\x20not\x20e\
    xist\x20in\x20`[PROJECT_ID]`,\x20then\x20a\x20new\x20metric\x20is\x20cre\
    ated.\n\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\x8d\x02\x02\x08\n\r\n\x05\
    \x04\x05\x02\0\x01\x12\x04\x8d\x02\t\x14\n\r\n\x05\x04\x05\x02\0\x03\x12\
    \x04\x8d\x02\x17\x18\n#\n\x04\x04\x05\x02\x01\x12\x04\x90\x02\x02\x17\
    \x1a\x15\x20The\x20updated\x20metric.\n\n\r\n\x05\x04\x05\x02\x01\x06\
    \x12\x04\x90\x02\x02\x0b\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\x90\x02\
    \x0c\x12\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\x90\x02\x15\x16\n2\n\x02\
    \x04\x06\x12\x06\x94\x02\0\x99\x02\x01\x1a$\x20The\x20parameters\x20to\
    \x20DeleteLogMetric.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\x94\x02\x08\x1e\n\
    l\n\x04\x04\x06\x02\0\x12\x04\x98\x02\x02\x19\x1a^\x20The\x20resource\
    \x20name\x20of\x20the\x20metric\x20to\x20delete:\n\n\x20\x20\x20\x20\x20\
    \"projects/[PROJECT_ID]/metrics/[METRIC_ID]\"\n\n\r\n\x05\x04\x06\x02\0\
    \x05\x12\x04\x98\x02\x02\x08\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\x98\x02\
    \t\x14\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\x98\x02\x17\x18b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
