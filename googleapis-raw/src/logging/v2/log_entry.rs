// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/logging/v2/log_entry.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct LogEntry {
    // message fields
    pub log_name: ::std::string::String,
    pub resource: ::protobuf::SingularPtrField<super::monitored_resource::MonitoredResource>,
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub receive_timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub severity: super::log_severity::LogSeverity,
    pub insert_id: ::std::string::String,
    pub http_request: ::protobuf::SingularPtrField<super::http_request::HttpRequest>,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub metadata: ::protobuf::SingularPtrField<super::monitored_resource::MonitoredResourceMetadata>,
    pub operation: ::protobuf::SingularPtrField<LogEntryOperation>,
    pub trace: ::std::string::String,
    pub span_id: ::std::string::String,
    pub trace_sampled: bool,
    pub source_location: ::protobuf::SingularPtrField<LogEntrySourceLocation>,
    // message oneof groups
    pub payload: ::std::option::Option<LogEntry_oneof_payload>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogEntry {
    fn default() -> &'a LogEntry {
        <LogEntry as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum LogEntry_oneof_payload {
    proto_payload(::protobuf::well_known_types::Any),
    text_payload(::std::string::String),
    json_payload(::protobuf::well_known_types::Struct),
}

impl LogEntry {
    pub fn new() -> LogEntry {
        ::std::default::Default::default()
    }

    // string log_name = 12;


    pub fn get_log_name(&self) -> &str {
        &self.log_name
    }
    pub fn clear_log_name(&mut self) {
        self.log_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_log_name(&mut self, v: ::std::string::String) {
        self.log_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_log_name(&mut self) -> &mut ::std::string::String {
        &mut self.log_name
    }

    // Take field
    pub fn take_log_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.log_name, ::std::string::String::new())
    }

    // .google.api.MonitoredResource resource = 8;


    pub fn get_resource(&self) -> &super::monitored_resource::MonitoredResource {
        self.resource.as_ref().unwrap_or_else(|| <super::monitored_resource::MonitoredResource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: super::monitored_resource::MonitoredResource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut super::monitored_resource::MonitoredResource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> super::monitored_resource::MonitoredResource {
        self.resource.take().unwrap_or_else(|| super::monitored_resource::MonitoredResource::new())
    }

    // .google.protobuf.Any proto_payload = 2;


    pub fn get_proto_payload(&self) -> &::protobuf::well_known_types::Any {
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_proto_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_proto_payload(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_proto_payload(&mut self, v: ::protobuf::well_known_types::Any) {
        self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(v))
    }

    // Mutable pointer to the field.
    pub fn mut_proto_payload(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(::protobuf::well_known_types::Any::new()));
        }
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_proto_payload(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_proto_payload() {
            match self.payload.take() {
                ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }

    // string text_payload = 3;


    pub fn get_text_payload(&self) -> &str {
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_text_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_text_payload(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text_payload(&mut self, v: ::std::string::String) {
        self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text_payload(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(::std::string::String::new()));
        }
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text_payload(&mut self) -> ::std::string::String {
        if self.has_text_payload() {
            match self.payload.take() {
                ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.protobuf.Struct json_payload = 6;


    pub fn get_json_payload(&self) -> &::protobuf::well_known_types::Struct {
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::json_payload(ref v)) => v,
            _ => <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_json_payload(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_json_payload(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::json_payload(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_json_payload(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::json_payload(v))
    }

    // Mutable pointer to the field.
    pub fn mut_json_payload(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if let ::std::option::Option::Some(LogEntry_oneof_payload::json_payload(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::json_payload(::protobuf::well_known_types::Struct::new()));
        }
        match self.payload {
            ::std::option::Option::Some(LogEntry_oneof_payload::json_payload(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_json_payload(&mut self) -> ::protobuf::well_known_types::Struct {
        if self.has_json_payload() {
            match self.payload.take() {
                ::std::option::Option::Some(LogEntry_oneof_payload::json_payload(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Struct::new()
        }
    }

    // .google.protobuf.Timestamp timestamp = 9;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp receive_timestamp = 24;


    pub fn get_receive_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.receive_timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_receive_timestamp(&mut self) {
        self.receive_timestamp.clear();
    }

    pub fn has_receive_timestamp(&self) -> bool {
        self.receive_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_receive_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.receive_timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receive_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.receive_timestamp.is_none() {
            self.receive_timestamp.set_default();
        }
        self.receive_timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_receive_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.receive_timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.logging.type.LogSeverity severity = 10;


    pub fn get_severity(&self) -> super::log_severity::LogSeverity {
        self.severity
    }
    pub fn clear_severity(&mut self) {
        self.severity = super::log_severity::LogSeverity::DEFAULT;
    }

    // Param is passed by value, moved
    pub fn set_severity(&mut self, v: super::log_severity::LogSeverity) {
        self.severity = v;
    }

    // string insert_id = 4;


    pub fn get_insert_id(&self) -> &str {
        &self.insert_id
    }
    pub fn clear_insert_id(&mut self) {
        self.insert_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_insert_id(&mut self, v: ::std::string::String) {
        self.insert_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_insert_id(&mut self) -> &mut ::std::string::String {
        &mut self.insert_id
    }

    // Take field
    pub fn take_insert_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.insert_id, ::std::string::String::new())
    }

    // .google.logging.type.HttpRequest http_request = 7;


    pub fn get_http_request(&self) -> &super::http_request::HttpRequest {
        self.http_request.as_ref().unwrap_or_else(|| <super::http_request::HttpRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_http_request(&mut self) {
        self.http_request.clear();
    }

    pub fn has_http_request(&self) -> bool {
        self.http_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_request(&mut self, v: super::http_request::HttpRequest) {
        self.http_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http_request(&mut self) -> &mut super::http_request::HttpRequest {
        if self.http_request.is_none() {
            self.http_request.set_default();
        }
        self.http_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_http_request(&mut self) -> super::http_request::HttpRequest {
        self.http_request.take().unwrap_or_else(|| super::http_request::HttpRequest::new())
    }

    // repeated .google.logging.v2.LogEntry.LabelsEntry labels = 11;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }

    // .google.api.MonitoredResourceMetadata metadata = 25;


    pub fn get_metadata(&self) -> &super::monitored_resource::MonitoredResourceMetadata {
        self.metadata.as_ref().unwrap_or_else(|| <super::monitored_resource::MonitoredResourceMetadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: super::monitored_resource::MonitoredResourceMetadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut super::monitored_resource::MonitoredResourceMetadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> super::monitored_resource::MonitoredResourceMetadata {
        self.metadata.take().unwrap_or_else(|| super::monitored_resource::MonitoredResourceMetadata::new())
    }

    // .google.logging.v2.LogEntryOperation operation = 15;


    pub fn get_operation(&self) -> &LogEntryOperation {
        self.operation.as_ref().unwrap_or_else(|| <LogEntryOperation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_operation(&mut self) {
        self.operation.clear();
    }

    pub fn has_operation(&self) -> bool {
        self.operation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operation(&mut self, v: LogEntryOperation) {
        self.operation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operation(&mut self) -> &mut LogEntryOperation {
        if self.operation.is_none() {
            self.operation.set_default();
        }
        self.operation.as_mut().unwrap()
    }

    // Take field
    pub fn take_operation(&mut self) -> LogEntryOperation {
        self.operation.take().unwrap_or_else(|| LogEntryOperation::new())
    }

    // string trace = 22;


    pub fn get_trace(&self) -> &str {
        &self.trace
    }
    pub fn clear_trace(&mut self) {
        self.trace.clear();
    }

    // Param is passed by value, moved
    pub fn set_trace(&mut self, v: ::std::string::String) {
        self.trace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trace(&mut self) -> &mut ::std::string::String {
        &mut self.trace
    }

    // Take field
    pub fn take_trace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trace, ::std::string::String::new())
    }

    // string span_id = 27;


    pub fn get_span_id(&self) -> &str {
        &self.span_id
    }
    pub fn clear_span_id(&mut self) {
        self.span_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_span_id(&mut self, v: ::std::string::String) {
        self.span_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_span_id(&mut self) -> &mut ::std::string::String {
        &mut self.span_id
    }

    // Take field
    pub fn take_span_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.span_id, ::std::string::String::new())
    }

    // bool trace_sampled = 30;


    pub fn get_trace_sampled(&self) -> bool {
        self.trace_sampled
    }
    pub fn clear_trace_sampled(&mut self) {
        self.trace_sampled = false;
    }

    // Param is passed by value, moved
    pub fn set_trace_sampled(&mut self, v: bool) {
        self.trace_sampled = v;
    }

    // .google.logging.v2.LogEntrySourceLocation source_location = 23;


    pub fn get_source_location(&self) -> &LogEntrySourceLocation {
        self.source_location.as_ref().unwrap_or_else(|| <LogEntrySourceLocation as ::protobuf::Message>::default_instance())
    }
    pub fn clear_source_location(&mut self) {
        self.source_location.clear();
    }

    pub fn has_source_location(&self) -> bool {
        self.source_location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_location(&mut self, v: LogEntrySourceLocation) {
        self.source_location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_location(&mut self) -> &mut LogEntrySourceLocation {
        if self.source_location.is_none() {
            self.source_location.set_default();
        }
        self.source_location.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_location(&mut self) -> LogEntrySourceLocation {
        self.source_location.take().unwrap_or_else(|| LogEntrySourceLocation::new())
    }
}

impl ::protobuf::Message for LogEntry {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(LogEntry_oneof_payload::proto_payload(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(LogEntry_oneof_payload::json_payload(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.receive_timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.http_request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.operation {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.source_location {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.log_name)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::proto_payload(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::text_payload(is.read_string()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(LogEntry_oneof_payload::json_payload(is.read_message()?));
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.receive_timestamp)?;
                },
                10 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.severity, 10, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.insert_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.http_request)?;
                },
                11 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operation)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trace)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.span_id)?;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.trace_sampled = tmp;
                },
                23 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source_location)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.log_name.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.log_name);
        }
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.receive_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.severity != super::log_severity::LogSeverity::DEFAULT {
            my_size += ::protobuf::rt::enum_size(10, self.severity);
        }
        if !self.insert_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.insert_id);
        }
        if let Some(ref v) = self.http_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(11, &self.labels);
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.operation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.trace.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.trace);
        }
        if !self.span_id.is_empty() {
            my_size += ::protobuf::rt::string_size(27, &self.span_id);
        }
        if self.trace_sampled != false {
            my_size += 3;
        }
        if let Some(ref v) = self.source_location.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &LogEntry_oneof_payload::proto_payload(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &LogEntry_oneof_payload::text_payload(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &LogEntry_oneof_payload::json_payload(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.log_name.is_empty() {
            os.write_string(12, &self.log_name)?;
        }
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.receive_timestamp.as_ref() {
            os.write_tag(24, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.severity != super::log_severity::LogSeverity::DEFAULT {
            os.write_enum(10, ::protobuf::ProtobufEnum::value(&self.severity))?;
        }
        if !self.insert_id.is_empty() {
            os.write_string(4, &self.insert_id)?;
        }
        if let Some(ref v) = self.http_request.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(11, &self.labels, os)?;
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(25, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.operation.as_ref() {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.trace.is_empty() {
            os.write_string(22, &self.trace)?;
        }
        if !self.span_id.is_empty() {
            os.write_string(27, &self.span_id)?;
        }
        if self.trace_sampled != false {
            os.write_bool(30, self.trace_sampled)?;
        }
        if let Some(ref v) = self.source_location.as_ref() {
            os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &LogEntry_oneof_payload::proto_payload(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &LogEntry_oneof_payload::text_payload(ref v) => {
                    os.write_string(3, v)?;
                },
                &LogEntry_oneof_payload::json_payload(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogEntry {
        LogEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "log_name",
                |m: &LogEntry| { &m.log_name },
                |m: &mut LogEntry| { &mut m.log_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::monitored_resource::MonitoredResource>>(
                "resource",
                |m: &LogEntry| { &m.resource },
                |m: &mut LogEntry| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "proto_payload",
                LogEntry::has_proto_payload,
                LogEntry::get_proto_payload,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "text_payload",
                LogEntry::has_text_payload,
                LogEntry::get_text_payload,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Struct>(
                "json_payload",
                LogEntry::has_json_payload,
                LogEntry::get_json_payload,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &LogEntry| { &m.timestamp },
                |m: &mut LogEntry| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "receive_timestamp",
                |m: &LogEntry| { &m.receive_timestamp },
                |m: &mut LogEntry| { &mut m.receive_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::log_severity::LogSeverity>>(
                "severity",
                |m: &LogEntry| { &m.severity },
                |m: &mut LogEntry| { &mut m.severity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "insert_id",
                |m: &LogEntry| { &m.insert_id },
                |m: &mut LogEntry| { &mut m.insert_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::http_request::HttpRequest>>(
                "http_request",
                |m: &LogEntry| { &m.http_request },
                |m: &mut LogEntry| { &mut m.http_request },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &LogEntry| { &m.labels },
                |m: &mut LogEntry| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::monitored_resource::MonitoredResourceMetadata>>(
                "metadata",
                |m: &LogEntry| { &m.metadata },
                |m: &mut LogEntry| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LogEntryOperation>>(
                "operation",
                |m: &LogEntry| { &m.operation },
                |m: &mut LogEntry| { &mut m.operation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trace",
                |m: &LogEntry| { &m.trace },
                |m: &mut LogEntry| { &mut m.trace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "span_id",
                |m: &LogEntry| { &m.span_id },
                |m: &mut LogEntry| { &mut m.span_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "trace_sampled",
                |m: &LogEntry| { &m.trace_sampled },
                |m: &mut LogEntry| { &mut m.trace_sampled },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LogEntrySourceLocation>>(
                "source_location",
                |m: &LogEntry| { &m.source_location },
                |m: &mut LogEntry| { &mut m.source_location },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogEntry>(
                "LogEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogEntry {
        static instance: ::protobuf::rt::LazyV2<LogEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogEntry::new)
    }
}

impl ::protobuf::Clear for LogEntry {
    fn clear(&mut self) {
        self.log_name.clear();
        self.resource.clear();
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.payload = ::std::option::Option::None;
        self.timestamp.clear();
        self.receive_timestamp.clear();
        self.severity = super::log_severity::LogSeverity::DEFAULT;
        self.insert_id.clear();
        self.http_request.clear();
        self.labels.clear();
        self.metadata.clear();
        self.operation.clear();
        self.trace.clear();
        self.span_id.clear();
        self.trace_sampled = false;
        self.source_location.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogEntryOperation {
    // message fields
    pub id: ::std::string::String,
    pub producer: ::std::string::String,
    pub first: bool,
    pub last: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogEntryOperation {
    fn default() -> &'a LogEntryOperation {
        <LogEntryOperation as ::protobuf::Message>::default_instance()
    }
}

impl LogEntryOperation {
    pub fn new() -> LogEntryOperation {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string producer = 2;


    pub fn get_producer(&self) -> &str {
        &self.producer
    }
    pub fn clear_producer(&mut self) {
        self.producer.clear();
    }

    // Param is passed by value, moved
    pub fn set_producer(&mut self, v: ::std::string::String) {
        self.producer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_producer(&mut self) -> &mut ::std::string::String {
        &mut self.producer
    }

    // Take field
    pub fn take_producer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.producer, ::std::string::String::new())
    }

    // bool first = 3;


    pub fn get_first(&self) -> bool {
        self.first
    }
    pub fn clear_first(&mut self) {
        self.first = false;
    }

    // Param is passed by value, moved
    pub fn set_first(&mut self, v: bool) {
        self.first = v;
    }

    // bool last = 4;


    pub fn get_last(&self) -> bool {
        self.last
    }
    pub fn clear_last(&mut self) {
        self.last = false;
    }

    // Param is passed by value, moved
    pub fn set_last(&mut self, v: bool) {
        self.last = v;
    }
}

impl ::protobuf::Message for LogEntryOperation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.producer)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.first = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.last = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.producer.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.producer);
        }
        if self.first != false {
            my_size += 2;
        }
        if self.last != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.producer.is_empty() {
            os.write_string(2, &self.producer)?;
        }
        if self.first != false {
            os.write_bool(3, self.first)?;
        }
        if self.last != false {
            os.write_bool(4, self.last)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogEntryOperation {
        LogEntryOperation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &LogEntryOperation| { &m.id },
                |m: &mut LogEntryOperation| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "producer",
                |m: &LogEntryOperation| { &m.producer },
                |m: &mut LogEntryOperation| { &mut m.producer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "first",
                |m: &LogEntryOperation| { &m.first },
                |m: &mut LogEntryOperation| { &mut m.first },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "last",
                |m: &LogEntryOperation| { &m.last },
                |m: &mut LogEntryOperation| { &mut m.last },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogEntryOperation>(
                "LogEntryOperation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogEntryOperation {
        static instance: ::protobuf::rt::LazyV2<LogEntryOperation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogEntryOperation::new)
    }
}

impl ::protobuf::Clear for LogEntryOperation {
    fn clear(&mut self) {
        self.id.clear();
        self.producer.clear();
        self.first = false;
        self.last = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogEntryOperation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogEntryOperation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogEntrySourceLocation {
    // message fields
    pub file: ::std::string::String,
    pub line: i64,
    pub function: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogEntrySourceLocation {
    fn default() -> &'a LogEntrySourceLocation {
        <LogEntrySourceLocation as ::protobuf::Message>::default_instance()
    }
}

impl LogEntrySourceLocation {
    pub fn new() -> LogEntrySourceLocation {
        ::std::default::Default::default()
    }

    // string file = 1;


    pub fn get_file(&self) -> &str {
        &self.file
    }
    pub fn clear_file(&mut self) {
        self.file.clear();
    }

    // Param is passed by value, moved
    pub fn set_file(&mut self, v: ::std::string::String) {
        self.file = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file(&mut self) -> &mut ::std::string::String {
        &mut self.file
    }

    // Take field
    pub fn take_file(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.file, ::std::string::String::new())
    }

    // int64 line = 2;


    pub fn get_line(&self) -> i64 {
        self.line
    }
    pub fn clear_line(&mut self) {
        self.line = 0;
    }

    // Param is passed by value, moved
    pub fn set_line(&mut self, v: i64) {
        self.line = v;
    }

    // string function = 3;


    pub fn get_function(&self) -> &str {
        &self.function
    }
    pub fn clear_function(&mut self) {
        self.function.clear();
    }

    // Param is passed by value, moved
    pub fn set_function(&mut self, v: ::std::string::String) {
        self.function = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_function(&mut self) -> &mut ::std::string::String {
        &mut self.function
    }

    // Take field
    pub fn take_function(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.function, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LogEntrySourceLocation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.file)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.line = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.function)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.file.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.file);
        }
        if self.line != 0 {
            my_size += ::protobuf::rt::value_size(2, self.line, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.function.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.function);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.file.is_empty() {
            os.write_string(1, &self.file)?;
        }
        if self.line != 0 {
            os.write_int64(2, self.line)?;
        }
        if !self.function.is_empty() {
            os.write_string(3, &self.function)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogEntrySourceLocation {
        LogEntrySourceLocation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "file",
                |m: &LogEntrySourceLocation| { &m.file },
                |m: &mut LogEntrySourceLocation| { &mut m.file },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "line",
                |m: &LogEntrySourceLocation| { &m.line },
                |m: &mut LogEntrySourceLocation| { &mut m.line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "function",
                |m: &LogEntrySourceLocation| { &m.function },
                |m: &mut LogEntrySourceLocation| { &mut m.function },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogEntrySourceLocation>(
                "LogEntrySourceLocation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogEntrySourceLocation {
        static instance: ::protobuf::rt::LazyV2<LogEntrySourceLocation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogEntrySourceLocation::new)
    }
}

impl ::protobuf::Clear for LogEntrySourceLocation {
    fn clear(&mut self) {
        self.file.clear();
        self.line = 0;
        self.function.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogEntrySourceLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogEntrySourceLocation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!google/logging/v2/log_entry.proto\x12\x11google.logging.v2\x1a#google\
    /api/monitored_resource.proto\x1a&google/logging/type/http_request.proto\
    \x1a&google/logging/type/log_severity.proto\x1a\x19google/protobuf/any.p\
    roto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestam\
    p.proto\x1a\x17google/rpc/status.proto\x1a\x1cgoogle/api/annotations.pro\
    to\"\xdd\x07\n\x08LogEntry\x12\x19\n\x08log_name\x18\x0c\x20\x01(\tR\x07\
    logName\x129\n\x08resource\x18\x08\x20\x01(\x0b2\x1d.google.api.Monitore\
    dResourceR\x08resource\x12;\n\rproto_payload\x18\x02\x20\x01(\x0b2\x14.g\
    oogle.protobuf.AnyH\0R\x0cprotoPayload\x12#\n\x0ctext_payload\x18\x03\
    \x20\x01(\tH\0R\x0btextPayload\x12<\n\x0cjson_payload\x18\x06\x20\x01(\
    \x0b2\x17.google.protobuf.StructH\0R\x0bjsonPayload\x128\n\ttimestamp\
    \x18\t\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ttimestamp\x12G\n\
    \x11receive_timestamp\x18\x18\x20\x01(\x0b2\x1a.google.protobuf.Timestam\
    pR\x10receiveTimestamp\x12<\n\x08severity\x18\n\x20\x01(\x0e2\x20.google\
    .logging.type.LogSeverityR\x08severity\x12\x1b\n\tinsert_id\x18\x04\x20\
    \x01(\tR\x08insertId\x12C\n\x0chttp_request\x18\x07\x20\x01(\x0b2\x20.go\
    ogle.logging.type.HttpRequestR\x0bhttpRequest\x12?\n\x06labels\x18\x0b\
    \x20\x03(\x0b2'.google.logging.v2.LogEntry.LabelsEntryR\x06labels\x12E\n\
    \x08metadata\x18\x19\x20\x01(\x0b2%.google.api.MonitoredResourceMetadata\
    R\x08metadataB\x02\x18\x01\x12B\n\toperation\x18\x0f\x20\x01(\x0b2$.goog\
    le.logging.v2.LogEntryOperationR\toperation\x12\x14\n\x05trace\x18\x16\
    \x20\x01(\tR\x05trace\x12\x17\n\x07span_id\x18\x1b\x20\x01(\tR\x06spanId\
    \x12#\n\rtrace_sampled\x18\x1e\x20\x01(\x08R\x0ctraceSampled\x12R\n\x0fs\
    ource_location\x18\x17\x20\x01(\x0b2).google.logging.v2.LogEntrySourceLo\
    cationR\x0esourceLocation\x1a9\n\x0bLabelsEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x02\
    8\x01B\t\n\x07payload\"i\n\x11LogEntryOperation\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\tR\x02id\x12\x1a\n\x08producer\x18\x02\x20\x01(\tR\x08producer\
    \x12\x14\n\x05first\x18\x03\x20\x01(\x08R\x05first\x12\x12\n\x04last\x18\
    \x04\x20\x01(\x08R\x04last\"\\\n\x16LogEntrySourceLocation\x12\x12\n\x04\
    file\x18\x01\x20\x01(\tR\x04file\x12\x12\n\x04line\x18\x02\x20\x01(\x03R\
    \x04line\x12\x1a\n\x08function\x18\x03\x20\x01(\tR\x08functionB\x99\x01\
    \n\x15com.google.logging.v2B\rLogEntryProtoP\x01Z8google.golang.org/genp\
    roto/googleapis/logging/v2;logging\xf8\x01\x01\xaa\x02\x17Google.Cloud.L\
    ogging.V2\xca\x02\x17Google\\Cloud\\Logging\\V2J\xfeD\n\x07\x12\x05\x0f\
    \0\xce\x01\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyrig\
    ht\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\
    \x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\
    \x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20\
    the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20L\
    icense\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICEN\
    SE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agr\
    eed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\
    \x1a\n\t\n\x02\x03\0\x12\x03\x13\0-\n\t\n\x02\x03\x01\x12\x03\x14\00\n\t\
    \n\x02\x03\x02\x12\x03\x15\00\n\t\n\x02\x03\x03\x12\x03\x16\0#\n\t\n\x02\
    \x03\x04\x12\x03\x17\0&\n\t\n\x02\x03\x05\x12\x03\x18\0)\n\t\n\x02\x03\
    \x06\x12\x03\x19\0!\n\t\n\x02\x03\x07\x12\x03\x1a\0&\n\x08\n\x01\x08\x12\
    \x03\x1c\0\x1f\n\t\n\x02\x08\x1f\x12\x03\x1c\0\x1f\n\x08\n\x01\x08\x12\
    \x03\x1d\04\n\t\n\x02\x08%\x12\x03\x1d\04\n\x08\n\x01\x08\x12\x03\x1e\0O\
    \n\t\n\x02\x08\x0b\x12\x03\x1e\0O\n\x08\n\x01\x08\x12\x03\x1f\0\"\n\t\n\
    \x02\x08\n\x12\x03\x1f\0\"\n\x08\n\x01\x08\x12\x03\x20\0.\n\t\n\x02\x08\
    \x08\x12\x03\x20\0.\n\x08\n\x01\x08\x12\x03!\0.\n\t\n\x02\x08\x01\x12\
    \x03!\0.\n\x08\n\x01\x08\x12\x03\"\04\n\t\n\x02\x08)\x12\x03\"\04\n-\n\
    \x02\x04\0\x12\x05&\0\xa7\x01\x01\x1a\x20\x20An\x20individual\x20entry\
    \x20in\x20a\x20log.\n\n\n\n\n\x03\x04\0\x01\x12\x03&\x08\x10\n\xfb\x08\n\
    \x04\x04\0\x02\0\x12\x03=\x02\x17\x1a\xed\x08\x20Required.\x20The\x20res\
    ource\x20name\x20of\x20the\x20log\x20to\x20which\x20this\x20log\x20entry\
    \x20belongs:\n\n\x20\x20\x20\x20\x20\"projects/[PROJECT_ID]/logs/[LOG_ID\
    ]\"\n\x20\x20\x20\x20\x20\"organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\
    \"\n\x20\x20\x20\x20\x20\"billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG\
    _ID]\"\n\x20\x20\x20\x20\x20\"folders/[FOLDER_ID]/logs/[LOG_ID]\"\n\n\
    \x20A\x20project\x20number\x20may\x20optionally\x20be\x20used\x20in\x20p\
    lace\x20of\x20PROJECT_ID.\x20The\x20project\n\x20number\x20is\x20transla\
    ted\x20to\x20its\x20corresponding\x20PROJECT_ID\x20internally\x20and\x20\
    the\n\x20`log_name`\x20field\x20will\x20contain\x20PROJECT_ID\x20in\x20q\
    ueries\x20and\x20exports.\n\n\x20`[LOG_ID]`\x20must\x20be\x20URL-encoded\
    \x20within\x20`log_name`.\x20Example:\n\x20`\"organizations/1234567890/l\
    ogs/cloudresourcemanager.googleapis.com%2Factivity\"`.\n\x20`[LOG_ID]`\
    \x20must\x20be\x20less\x20than\x20512\x20characters\x20long\x20and\x20ca\
    n\x20only\x20include\x20the\n\x20following\x20characters:\x20upper\x20an\
    d\x20lower\x20case\x20alphanumeric\x20characters,\n\x20forward-slash,\
    \x20underscore,\x20hyphen,\x20and\x20period.\n\n\x20For\x20backward\x20c\
    ompatibility,\x20if\x20`log_name`\x20begins\x20with\x20a\x20forward-slas\
    h,\x20such\n\x20as\x20`/projects/...`,\x20then\x20the\x20log\x20entry\
    \x20is\x20ingested\x20as\x20usual\x20but\x20the\n\x20forward-slash\x20is\
    \x20removed.\x20Listing\x20the\x20log\x20entry\x20will\x20not\x20show\
    \x20the\x20leading\n\x20slash\x20and\x20filtering\x20for\x20a\x20log\x20\
    name\x20with\x20a\x20leading\x20slash\x20will\x20never\x20return\n\x20an\
    y\x20results.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03=\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03=\t\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03=\x14\
    \x16\n\xf2\x01\n\x04\x04\0\x02\x01\x12\x03D\x02,\x1a\xe4\x01\x20Required\
    .\x20The\x20monitored\x20resource\x20that\x20produced\x20this\x20log\x20\
    entry.\n\n\x20Example:\x20a\x20log\x20entry\x20that\x20reports\x20a\x20d\
    atabase\x20error\x20would\x20be\x20associated\x20with\n\x20the\x20monito\
    red\x20resource\x20designating\x20the\x20particular\x20database\x20that\
    \x20reported\n\x20the\x20error.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03D\
    \x02\x1e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03D\x1f'\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03D*+\nT\n\x04\x04\0\x08\0\x12\x04G\x02X\x03\x1aF\x20O\
    ptional.\x20The\x20log\x20entry\x20payload,\x20which\x20can\x20be\x20one\
    \x20of\x20multiple\x20types.\n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03G\x08\
    \x0f\n\xec\x02\n\x04\x04\0\x02\x02\x12\x03P\x04*\x1a\xde\x02\x20The\x20l\
    og\x20entry\x20payload,\x20represented\x20as\x20a\x20protocol\x20buffer.\
    \x20Some\x20Google\n\x20Cloud\x20Platform\x20services\x20use\x20this\x20\
    field\x20for\x20their\x20log\x20entry\x20payloads.\n\n\x20The\x20followi\
    ng\x20protocol\x20buffer\x20types\x20are\x20supported;\x20user-defined\
    \x20types\n\x20are\x20not\x20supported:\n\n\x20\x20\x20\"type.googleapis\
    .com/google.cloud.audit.AuditLog\"\n\x20\x20\x20\"type.googleapis.com/go\
    ogle.appengine.logging.v1.RequestLog\"\n\n\x0c\n\x05\x04\0\x02\x02\x06\
    \x12\x03P\x04\x17\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03P\x18%\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03P()\nN\n\x04\x04\0\x02\x03\x12\x03S\x04\
    \x1c\x1aA\x20The\x20log\x20entry\x20payload,\x20represented\x20as\x20a\
    \x20Unicode\x20string\x20(UTF-8).\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x03S\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03S\x0b\x17\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03S\x1a\x1b\ne\n\x04\x04\0\x02\x04\x12\x03W\x04,\
    \x1aX\x20The\x20log\x20entry\x20payload,\x20represented\x20as\x20a\x20st\
    ructure\x20that\x20is\n\x20expressed\x20as\x20a\x20JSON\x20object.\n\n\
    \x0c\n\x05\x04\0\x02\x04\x06\x12\x03W\x04\x1a\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03W\x1b'\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03W*+\n\xfb\x05\n\
    \x04\x04\0\x02\x05\x12\x03f\x02*\x1a\xed\x05\x20Optional.\x20The\x20time\
    \x20the\x20event\x20described\x20by\x20the\x20log\x20entry\x20occurred.\
    \x20\x20This\n\x20time\x20is\x20used\x20to\x20compute\x20the\x20log\x20e\
    ntry's\x20age\x20and\x20to\x20enforce\x20the\x20logs\n\x20retention\x20p\
    eriod.\x20If\x20this\x20field\x20is\x20omitted\x20in\x20a\x20new\x20log\
    \x20entry,\x20then\x20Logging\n\x20assigns\x20it\x20the\x20current\x20ti\
    me.\x20\x20Timestamps\x20have\x20nanosecond\x20accuracy,\x20but\n\x20tra\
    iling\x20zeros\x20in\x20the\x20fractional\x20seconds\x20might\x20be\x20o\
    mitted\x20when\x20the\n\x20timestamp\x20is\x20displayed.\n\n\x20Incoming\
    \x20log\x20entries\x20should\x20have\x20timestamps\x20that\x20are\x20no\
    \x20more\x20than\x20the\x20[logs\n\x20retention\x20period](/logging/quot\
    as)\x20in\x20the\x20past,\x20and\x20no\x20more\x20than\x2024\x20hours\n\
    \x20in\x20the\x20future.\x20Log\x20entries\x20outside\x20those\x20time\
    \x20boundaries\x20will\x20not\x20be\n\x20available\x20when\x20calling\
    \x20`entries.list`,\x20but\x20those\x20log\x20entries\x20can\x20still\
    \x20be\n\x20[exported\x20with\x20LogSinks](/logging/docs/api/tasks/expor\
    ting-logs).\n\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03f\x02\x1b\n\x0c\n\x05\
    \x04\0\x02\x05\x01\x12\x03f\x1c%\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03f(\
    )\nK\n\x04\x04\0\x02\x06\x12\x03i\x023\x1a>\x20Output\x20only.\x20The\
    \x20time\x20the\x20log\x20entry\x20was\x20received\x20by\x20Logging.\n\n\
    \x0c\n\x05\x04\0\x02\x06\x06\x12\x03i\x02\x1b\n\x0c\n\x05\x04\0\x02\x06\
    \x01\x12\x03i\x1c-\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03i02\nd\n\x04\x04\
    \0\x02\x07\x12\x03m\x020\x1aW\x20Optional.\x20The\x20severity\x20of\x20t\
    he\x20log\x20entry.\x20The\x20default\x20value\x20is\n\x20`LogSeverity.D\
    EFAULT`.\n\n\x0c\n\x05\x04\0\x02\x07\x06\x12\x03m\x02!\n\x0c\n\x05\x04\0\
    \x02\x07\x01\x12\x03m\"*\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03m-/\n\xa2\
    \x03\n\x04\x04\0\x02\x08\x12\x03u\x02\x17\x1a\x94\x03\x20Optional.\x20A\
    \x20unique\x20identifier\x20for\x20the\x20log\x20entry.\x20If\x20you\x20\
    provide\x20a\x20value,\n\x20then\x20Logging\x20considers\x20other\x20log\
    \x20entries\x20in\x20the\x20same\x20project,\x20with\x20the\x20same\n\
    \x20`timestamp`,\x20and\x20with\x20the\x20same\x20`insert_id`\x20to\x20b\
    e\x20duplicates\x20which\x20can\x20be\n\x20removed.\x20If\x20omitted\x20\
    in\x20new\x20log\x20entries,\x20then\x20Logging\x20assigns\x20its\x20own\
    \x20unique\n\x20identifier.\x20The\x20`insert_id`\x20is\x20also\x20used\
    \x20to\x20order\x20log\x20entries\x20that\x20have\x20the\n\x20same\x20`t\
    imestamp`\x20value.\n\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03u\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x08\x01\x12\x03u\t\x12\n\x0c\n\x05\x04\0\x02\x08\
    \x03\x12\x03u\x15\x16\nk\n\x04\x04\0\x02\t\x12\x03y\x023\x1a^\x20Optiona\
    l.\x20Information\x20about\x20the\x20HTTP\x20request\x20associated\x20wi\
    th\x20this\x20log\n\x20entry,\x20if\x20applicable.\n\n\x0c\n\x05\x04\0\
    \x02\t\x06\x12\x03y\x02!\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03y\".\n\x0c\n\
    \x05\x04\0\x02\t\x03\x12\x03y12\n{\n\x04\x04\0\x02\n\x12\x03}\x02\"\x1an\
    \x20Optional.\x20A\x20set\x20of\x20user-defined\x20(key,\x20value)\x20da\
    ta\x20that\x20provides\x20additional\n\x20information\x20about\x20the\
    \x20log\x20entry.\n\n\x0c\n\x05\x04\0\x02\n\x06\x12\x03}\x02\x15\n\x0c\n\
    \x05\x04\0\x02\n\x01\x12\x03}\x16\x1c\n\x0c\n\x05\x04\0\x02\n\x03\x12\
    \x03}\x1f!\n\xc1\x04\n\x04\x04\0\x02\x0b\x12\x04\x88\x01\x02I\x1a\xb2\
    \x04\x20Deprecated.\x20Output\x20only.\x20Additional\x20metadata\x20abou\
    t\x20the\x20monitored\x20resource.\n\n\x20Only\x20`k8s_container`,\x20`k\
    8s_pod`,\x20and\x20`k8s_node`\x20MonitoredResources\x20have\n\x20this\
    \x20field\x20populated\x20for\x20GKE\x20versions\x20older\x20than\x201.1\
    2.6.\x20For\x20GKE\x20versions\n\x201.12.6\x20and\x20above,\x20the\x20`m\
    etadata`\x20field\x20has\x20been\x20deprecated.\x20The\x20Kubernetes\n\
    \x20pod\x20labels\x20that\x20used\x20to\x20be\x20in\x20`metadata.userLab\
    els`\x20will\x20now\x20be\x20present\x20in\n\x20the\x20`labels`\x20field\
    \x20with\x20a\x20key\x20prefix\x20of\x20`k8s-pod/`.\x20The\x20Stackdrive\
    r\x20system\n\x20labels\x20that\x20were\x20present\x20in\x20the\x20`meta\
    data.systemLabels`\x20field\x20will\x20no\n\x20longer\x20be\x20available\
    \x20in\x20the\x20LogEntry.\n\n\r\n\x05\x04\0\x02\x0b\x06\x12\x04\x88\x01\
    \x02&\n\r\n\x05\x04\0\x02\x0b\x01\x12\x04\x88\x01'/\n\r\n\x05\x04\0\x02\
    \x0b\x03\x12\x04\x88\x0124\n\r\n\x05\x04\0\x02\x0b\x08\x12\x04\x88\x015H\
    \n\x0e\n\x06\x04\0\x02\x0b\x08\x03\x12\x04\x88\x016G\ng\n\x04\x04\0\x02\
    \x0c\x12\x04\x8c\x01\x02#\x1aY\x20Optional.\x20Information\x20about\x20a\
    n\x20operation\x20associated\x20with\x20the\x20log\x20entry,\x20if\n\x20\
    applicable.\n\n\r\n\x05\x04\0\x02\x0c\x06\x12\x04\x8c\x01\x02\x13\n\r\n\
    \x05\x04\0\x02\x0c\x01\x12\x04\x8c\x01\x14\x1d\n\r\n\x05\x04\0\x02\x0c\
    \x03\x12\x04\x8c\x01\x20\"\n\x93\x02\n\x04\x04\0\x02\r\x12\x04\x92\x01\
    \x02\x14\x1a\x84\x02\x20Optional.\x20Resource\x20name\x20of\x20the\x20tr\
    ace\x20associated\x20with\x20the\x20log\x20entry,\x20if\x20any.\n\x20If\
    \x20it\x20contains\x20a\x20relative\x20resource\x20name,\x20the\x20name\
    \x20is\x20assumed\x20to\x20be\x20relative\n\x20to\x20`//tracing.googleap\
    is.com`.\x20Example:\n\x20`projects/my-projectid/traces/06796866738c859f\
    2f19b7cfb3214824`\n\n\r\n\x05\x04\0\x02\r\x05\x12\x04\x92\x01\x02\x08\n\
    \r\n\x05\x04\0\x02\r\x01\x12\x04\x92\x01\t\x0e\n\r\n\x05\x04\0\x02\r\x03\
    \x12\x04\x92\x01\x11\x13\n\x80\x02\n\x04\x04\0\x02\x0e\x12\x04\x99\x01\
    \x02\x16\x1a\xf1\x01\x20Optional.\x20The\x20span\x20ID\x20within\x20the\
    \x20trace\x20associated\x20with\x20the\x20log\x20entry.\n\n\x20For\x20Tr\
    ace\x20spans,\x20this\x20is\x20the\x20same\x20format\x20that\x20the\x20T\
    race\x20API\x20v2\x20uses:\x20a\n\x2016-character\x20hexadecimal\x20enco\
    ding\x20of\x20an\x208-byte\x20array,\x20such\x20as\n\x20<code>\"00000000\
    0000004a\"</code>.\n\n\r\n\x05\x04\0\x02\x0e\x05\x12\x04\x99\x01\x02\x08\
    \n\r\n\x05\x04\0\x02\x0e\x01\x12\x04\x99\x01\t\x10\n\r\n\x05\x04\0\x02\
    \x0e\x03\x12\x04\x99\x01\x13\x15\n\xbc\x03\n\x04\x04\0\x02\x0f\x12\x04\
    \xa2\x01\x02\x1a\x1a\xad\x03\x20Optional.\x20The\x20sampling\x20decision\
    \x20of\x20the\x20trace\x20associated\x20with\x20the\x20log\x20entry.\n\n\
    \x20True\x20means\x20that\x20the\x20trace\x20resource\x20name\x20in\x20t\
    he\x20`trace`\x20field\x20was\x20sampled\n\x20for\x20storage\x20in\x20a\
    \x20trace\x20backend.\x20False\x20means\x20that\x20the\x20trace\x20was\
    \x20not\x20sampled\n\x20for\x20storage\x20when\x20this\x20log\x20entry\
    \x20was\x20written,\x20or\x20the\x20sampling\x20decision\x20was\n\x20unk\
    nown\x20at\x20the\x20time.\x20A\x20non-sampled\x20`trace`\x20value\x20is\
    \x20still\x20useful\x20as\x20a\n\x20request\x20correlation\x20identifier\
    .\x20The\x20default\x20is\x20False.\n\n\r\n\x05\x04\0\x02\x0f\x05\x12\
    \x04\xa2\x01\x02\x06\n\r\n\x05\x04\0\x02\x0f\x01\x12\x04\xa2\x01\x07\x14\
    \n\r\n\x05\x04\0\x02\x0f\x03\x12\x04\xa2\x01\x17\x19\nb\n\x04\x04\0\x02\
    \x10\x12\x04\xa6\x01\x02.\x1aT\x20Optional.\x20Source\x20code\x20locatio\
    n\x20information\x20associated\x20with\x20the\x20log\x20entry,\n\x20if\
    \x20any.\n\n\r\n\x05\x04\0\x02\x10\x06\x12\x04\xa6\x01\x02\x18\n\r\n\x05\
    \x04\0\x02\x10\x01\x12\x04\xa6\x01\x19(\n\r\n\x05\x04\0\x02\x10\x03\x12\
    \x04\xa6\x01+-\nx\n\x02\x04\x01\x12\x06\xab\x01\0\xba\x01\x01\x1aj\x20Ad\
    ditional\x20information\x20about\x20a\x20potentially\x20long-running\x20\
    operation\x20with\x20which\n\x20a\x20log\x20entry\x20is\x20associated.\n\
    \n\x0b\n\x03\x04\x01\x01\x12\x04\xab\x01\x08\x19\n\x91\x01\n\x04\x04\x01\
    \x02\0\x12\x04\xae\x01\x02\x10\x1a\x82\x01\x20Optional.\x20An\x20arbitra\
    ry\x20operation\x20identifier.\x20Log\x20entries\x20with\x20the\x20same\
    \n\x20identifier\x20are\x20assumed\x20to\x20be\x20part\x20of\x20the\x20s\
    ame\x20operation.\n\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\xae\x01\x02\x08\
    \n\r\n\x05\x04\x01\x02\0\x01\x12\x04\xae\x01\t\x0b\n\r\n\x05\x04\x01\x02\
    \0\x03\x12\x04\xae\x01\x0e\x0f\n\xe0\x01\n\x04\x04\x01\x02\x01\x12\x04\
    \xb3\x01\x02\x16\x1a\xd1\x01\x20Optional.\x20An\x20arbitrary\x20producer\
    \x20identifier.\x20The\x20combination\x20of\x20`id`\x20and\n\x20`produce\
    r`\x20must\x20be\x20globally\x20unique.\x20Examples\x20for\x20`producer`\
    :\n\x20`\"MyDivision.MyBigCompany.com\"`,\x20`\"github.com/MyProject/MyA\
    pplication\"`.\n\n\r\n\x05\x04\x01\x02\x01\x05\x12\x04\xb3\x01\x02\x08\n\
    \r\n\x05\x04\x01\x02\x01\x01\x12\x04\xb3\x01\t\x11\n\r\n\x05\x04\x01\x02\
    \x01\x03\x12\x04\xb3\x01\x14\x15\n[\n\x04\x04\x01\x02\x02\x12\x04\xb6\
    \x01\x02\x11\x1aM\x20Optional.\x20Set\x20this\x20to\x20True\x20if\x20thi\
    s\x20is\x20the\x20first\x20log\x20entry\x20in\x20the\x20operation.\n\n\r\
    \n\x05\x04\x01\x02\x02\x05\x12\x04\xb6\x01\x02\x06\n\r\n\x05\x04\x01\x02\
    \x02\x01\x12\x04\xb6\x01\x07\x0c\n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\
    \xb6\x01\x0f\x10\nZ\n\x04\x04\x01\x02\x03\x12\x04\xb9\x01\x02\x10\x1aL\
    \x20Optional.\x20Set\x20this\x20to\x20True\x20if\x20this\x20is\x20the\
    \x20last\x20log\x20entry\x20in\x20the\x20operation.\n\n\r\n\x05\x04\x01\
    \x02\x03\x05\x12\x04\xb9\x01\x02\x06\n\r\n\x05\x04\x01\x02\x03\x01\x12\
    \x04\xb9\x01\x07\x0b\n\r\n\x05\x04\x01\x02\x03\x03\x12\x04\xb9\x01\x0e\
    \x0f\nc\n\x02\x04\x02\x12\x06\xbe\x01\0\xce\x01\x01\x1aU\x20Additional\
    \x20information\x20about\x20the\x20source\x20code\x20location\x20that\
    \x20produced\x20the\x20log\n\x20entry.\n\n\x0b\n\x03\x04\x02\x01\x12\x04\
    \xbe\x01\x08\x1e\n\x89\x01\n\x04\x04\x02\x02\0\x12\x04\xc1\x01\x02\x12\
    \x1a{\x20Optional.\x20Source\x20file\x20name.\x20Depending\x20on\x20the\
    \x20runtime\x20environment,\x20this\n\x20might\x20be\x20a\x20simple\x20n\
    ame\x20or\x20a\x20fully-qualified\x20name.\n\n\r\n\x05\x04\x02\x02\0\x05\
    \x12\x04\xc1\x01\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xc1\x01\t\r\
    \n\r\n\x05\x04\x02\x02\0\x03\x12\x04\xc1\x01\x10\x11\nf\n\x04\x04\x02\
    \x02\x01\x12\x04\xc5\x01\x02\x11\x1aX\x20Optional.\x20Line\x20within\x20\
    the\x20source\x20file.\x201-based;\x200\x20indicates\x20no\x20line\x20nu\
    mber\n\x20available.\n\n\r\n\x05\x04\x02\x02\x01\x05\x12\x04\xc5\x01\x02\
    \x07\n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\xc5\x01\x08\x0c\n\r\n\x05\x04\
    \x02\x02\x01\x03\x12\x04\xc5\x01\x0f\x10\n\x88\x03\n\x04\x04\x02\x02\x02\
    \x12\x04\xcd\x01\x02\x16\x1a\xf9\x02\x20Optional.\x20Human-readable\x20n\
    ame\x20of\x20the\x20function\x20or\x20method\x20being\x20invoked,\x20wit\
    h\n\x20optional\x20context\x20such\x20as\x20the\x20class\x20or\x20packag\
    e\x20name.\x20This\x20information\x20may\x20be\n\x20used\x20in\x20contex\
    ts\x20such\x20as\x20the\x20logs\x20viewer,\x20where\x20a\x20file\x20and\
    \x20line\x20number\x20are\n\x20less\x20meaningful.\x20The\x20format\x20c\
    an\x20vary\x20by\x20language.\x20For\x20example:\n\x20`qual.if.ied.Class\
    .method`\x20(Java),\x20`dir/package.func`\x20(Go),\x20`function`\n\x20(P\
    ython).\n\n\r\n\x05\x04\x02\x02\x02\x05\x12\x04\xcd\x01\x02\x08\n\r\n\
    \x05\x04\x02\x02\x02\x01\x12\x04\xcd\x01\t\x11\n\r\n\x05\x04\x02\x02\x02\
    \x03\x12\x04\xcd\x01\x14\x15b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
