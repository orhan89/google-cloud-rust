// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/monitoring/v3/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct TypedValue {
    // message oneof groups
    pub value: ::std::option::Option<TypedValue_oneof_value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TypedValue {
    fn default() -> &'a TypedValue {
        <TypedValue as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TypedValue_oneof_value {
    bool_value(bool),
    int64_value(i64),
    double_value(f64),
    string_value(::std::string::String),
    distribution_value(super::distribution::Distribution),
}

impl TypedValue {
    pub fn new() -> TypedValue {
        ::std::default::Default::default()
    }

    // bool bool_value = 1;


    pub fn get_bool_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(TypedValue_oneof_value::bool_value(v)) => v,
            _ => false,
        }
    }
    pub fn clear_bool_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_bool_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(TypedValue_oneof_value::bool_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool_value(&mut self, v: bool) {
        self.value = ::std::option::Option::Some(TypedValue_oneof_value::bool_value(v))
    }

    // int64 int64_value = 2;


    pub fn get_int64_value(&self) -> i64 {
        match self.value {
            ::std::option::Option::Some(TypedValue_oneof_value::int64_value(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_int64_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_int64_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(TypedValue_oneof_value::int64_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int64_value(&mut self, v: i64) {
        self.value = ::std::option::Option::Some(TypedValue_oneof_value::int64_value(v))
    }

    // double double_value = 3;


    pub fn get_double_value(&self) -> f64 {
        match self.value {
            ::std::option::Option::Some(TypedValue_oneof_value::double_value(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_double_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_double_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(TypedValue_oneof_value::double_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double_value(&mut self, v: f64) {
        self.value = ::std::option::Option::Some(TypedValue_oneof_value::double_value(v))
    }

    // string string_value = 4;


    pub fn get_string_value(&self) -> &str {
        match self.value {
            ::std::option::Option::Some(TypedValue_oneof_value::string_value(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_string_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_string_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(TypedValue_oneof_value::string_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(TypedValue_oneof_value::string_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(TypedValue_oneof_value::string_value(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(TypedValue_oneof_value::string_value(::std::string::String::new()));
        }
        match self.value {
            ::std::option::Option::Some(TypedValue_oneof_value::string_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_value(&mut self) -> ::std::string::String {
        if self.has_string_value() {
            match self.value.take() {
                ::std::option::Option::Some(TypedValue_oneof_value::string_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.api.Distribution distribution_value = 5;


    pub fn get_distribution_value(&self) -> &super::distribution::Distribution {
        match self.value {
            ::std::option::Option::Some(TypedValue_oneof_value::distribution_value(ref v)) => v,
            _ => <super::distribution::Distribution as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_distribution_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_distribution_value(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(TypedValue_oneof_value::distribution_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_distribution_value(&mut self, v: super::distribution::Distribution) {
        self.value = ::std::option::Option::Some(TypedValue_oneof_value::distribution_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_distribution_value(&mut self) -> &mut super::distribution::Distribution {
        if let ::std::option::Option::Some(TypedValue_oneof_value::distribution_value(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(TypedValue_oneof_value::distribution_value(super::distribution::Distribution::new()));
        }
        match self.value {
            ::std::option::Option::Some(TypedValue_oneof_value::distribution_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_distribution_value(&mut self) -> super::distribution::Distribution {
        if self.has_distribution_value() {
            match self.value.take() {
                ::std::option::Option::Some(TypedValue_oneof_value::distribution_value(v)) => v,
                _ => panic!(),
            }
        } else {
            super::distribution::Distribution::new()
        }
    }
}

impl ::protobuf::Message for TypedValue {
    fn is_initialized(&self) -> bool {
        if let Some(TypedValue_oneof_value::distribution_value(ref v)) = self.value {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(TypedValue_oneof_value::bool_value(is.read_bool()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(TypedValue_oneof_value::int64_value(is.read_int64()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(TypedValue_oneof_value::double_value(is.read_double()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(TypedValue_oneof_value::string_value(is.read_string()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value = ::std::option::Option::Some(TypedValue_oneof_value::distribution_value(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &TypedValue_oneof_value::bool_value(v) => {
                    my_size += 2;
                },
                &TypedValue_oneof_value::int64_value(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &TypedValue_oneof_value::double_value(v) => {
                    my_size += 9;
                },
                &TypedValue_oneof_value::string_value(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
                &TypedValue_oneof_value::distribution_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &TypedValue_oneof_value::bool_value(v) => {
                    os.write_bool(1, v)?;
                },
                &TypedValue_oneof_value::int64_value(v) => {
                    os.write_int64(2, v)?;
                },
                &TypedValue_oneof_value::double_value(v) => {
                    os.write_double(3, v)?;
                },
                &TypedValue_oneof_value::string_value(ref v) => {
                    os.write_string(4, v)?;
                },
                &TypedValue_oneof_value::distribution_value(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TypedValue {
        TypedValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "bool_value",
                TypedValue::has_bool_value,
                TypedValue::get_bool_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                "int64_value",
                TypedValue::has_int64_value,
                TypedValue::get_int64_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                "double_value",
                TypedValue::has_double_value,
                TypedValue::get_double_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "string_value",
                TypedValue::has_string_value,
                TypedValue::get_string_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::distribution::Distribution>(
                "distribution_value",
                TypedValue::has_distribution_value,
                TypedValue::get_distribution_value,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TypedValue>(
                "TypedValue",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TypedValue {
        static instance: ::protobuf::rt::LazyV2<TypedValue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TypedValue::new)
    }
}

impl ::protobuf::Clear for TypedValue {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TypedValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TypedValue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TimeInterval {
    // message fields
    pub end_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub start_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TimeInterval {
    fn default() -> &'a TimeInterval {
        <TimeInterval as ::protobuf::Message>::default_instance()
    }
}

impl TimeInterval {
    pub fn new() -> TimeInterval {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp end_time = 2;


    pub fn get_end_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.end_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end_time(&mut self) {
        self.end_time.clear();
    }

    pub fn has_end_time(&self) -> bool {
        self.end_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.end_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.end_time.is_none() {
            self.end_time.set_default();
        }
        self.end_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.end_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp start_time = 1;


    pub fn get_start_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start_time(&mut self) {
        self.start_time.clear();
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start_time.is_none() {
            self.start_time.set_default();
        }
        self.start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for TimeInterval {
    fn is_initialized(&self) -> bool {
        for v in &self.end_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.start_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end_time)?;
                },
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.end_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.end_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimeInterval {
        TimeInterval::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "end_time",
                |m: &TimeInterval| { &m.end_time },
                |m: &mut TimeInterval| { &mut m.end_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "start_time",
                |m: &TimeInterval| { &m.start_time },
                |m: &mut TimeInterval| { &mut m.start_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TimeInterval>(
                "TimeInterval",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TimeInterval {
        static instance: ::protobuf::rt::LazyV2<TimeInterval> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TimeInterval::new)
    }
}

impl ::protobuf::Clear for TimeInterval {
    fn clear(&mut self) {
        self.end_time.clear();
        self.start_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimeInterval {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimeInterval {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Aggregation {
    // message fields
    pub alignment_period: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub per_series_aligner: Aggregation_Aligner,
    pub cross_series_reducer: Aggregation_Reducer,
    pub group_by_fields: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Aggregation {
    fn default() -> &'a Aggregation {
        <Aggregation as ::protobuf::Message>::default_instance()
    }
}

impl Aggregation {
    pub fn new() -> Aggregation {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration alignment_period = 1;


    pub fn get_alignment_period(&self) -> &::protobuf::well_known_types::Duration {
        self.alignment_period.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_alignment_period(&mut self) {
        self.alignment_period.clear();
    }

    pub fn has_alignment_period(&self) -> bool {
        self.alignment_period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alignment_period(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.alignment_period = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alignment_period(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.alignment_period.is_none() {
            self.alignment_period.set_default();
        }
        self.alignment_period.as_mut().unwrap()
    }

    // Take field
    pub fn take_alignment_period(&mut self) -> ::protobuf::well_known_types::Duration {
        self.alignment_period.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.monitoring.v3.Aggregation.Aligner per_series_aligner = 2;


    pub fn get_per_series_aligner(&self) -> Aggregation_Aligner {
        self.per_series_aligner
    }
    pub fn clear_per_series_aligner(&mut self) {
        self.per_series_aligner = Aggregation_Aligner::ALIGN_NONE;
    }

    // Param is passed by value, moved
    pub fn set_per_series_aligner(&mut self, v: Aggregation_Aligner) {
        self.per_series_aligner = v;
    }

    // .google.monitoring.v3.Aggregation.Reducer cross_series_reducer = 4;


    pub fn get_cross_series_reducer(&self) -> Aggregation_Reducer {
        self.cross_series_reducer
    }
    pub fn clear_cross_series_reducer(&mut self) {
        self.cross_series_reducer = Aggregation_Reducer::REDUCE_NONE;
    }

    // Param is passed by value, moved
    pub fn set_cross_series_reducer(&mut self, v: Aggregation_Reducer) {
        self.cross_series_reducer = v;
    }

    // repeated string group_by_fields = 5;


    pub fn get_group_by_fields(&self) -> &[::std::string::String] {
        &self.group_by_fields
    }
    pub fn clear_group_by_fields(&mut self) {
        self.group_by_fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_by_fields(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.group_by_fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_group_by_fields(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.group_by_fields
    }

    // Take field
    pub fn take_group_by_fields(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.group_by_fields, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Aggregation {
    fn is_initialized(&self) -> bool {
        for v in &self.alignment_period {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.alignment_period)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.per_series_aligner, 2, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.cross_series_reducer, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.group_by_fields)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.alignment_period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.per_series_aligner != Aggregation_Aligner::ALIGN_NONE {
            my_size += ::protobuf::rt::enum_size(2, self.per_series_aligner);
        }
        if self.cross_series_reducer != Aggregation_Reducer::REDUCE_NONE {
            my_size += ::protobuf::rt::enum_size(4, self.cross_series_reducer);
        }
        for value in &self.group_by_fields {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.alignment_period.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.per_series_aligner != Aggregation_Aligner::ALIGN_NONE {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.per_series_aligner))?;
        }
        if self.cross_series_reducer != Aggregation_Reducer::REDUCE_NONE {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.cross_series_reducer))?;
        }
        for v in &self.group_by_fields {
            os.write_string(5, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Aggregation {
        Aggregation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "alignment_period",
                |m: &Aggregation| { &m.alignment_period },
                |m: &mut Aggregation| { &mut m.alignment_period },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Aggregation_Aligner>>(
                "per_series_aligner",
                |m: &Aggregation| { &m.per_series_aligner },
                |m: &mut Aggregation| { &mut m.per_series_aligner },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Aggregation_Reducer>>(
                "cross_series_reducer",
                |m: &Aggregation| { &m.cross_series_reducer },
                |m: &mut Aggregation| { &mut m.cross_series_reducer },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group_by_fields",
                |m: &Aggregation| { &m.group_by_fields },
                |m: &mut Aggregation| { &mut m.group_by_fields },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Aggregation>(
                "Aggregation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Aggregation {
        static instance: ::protobuf::rt::LazyV2<Aggregation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Aggregation::new)
    }
}

impl ::protobuf::Clear for Aggregation {
    fn clear(&mut self) {
        self.alignment_period.clear();
        self.per_series_aligner = Aggregation_Aligner::ALIGN_NONE;
        self.cross_series_reducer = Aggregation_Reducer::REDUCE_NONE;
        self.group_by_fields.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Aggregation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Aggregation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Aggregation_Aligner {
    ALIGN_NONE = 0,
    ALIGN_DELTA = 1,
    ALIGN_RATE = 2,
    ALIGN_INTERPOLATE = 3,
    ALIGN_NEXT_OLDER = 4,
    ALIGN_MIN = 10,
    ALIGN_MAX = 11,
    ALIGN_MEAN = 12,
    ALIGN_COUNT = 13,
    ALIGN_SUM = 14,
    ALIGN_STDDEV = 15,
    ALIGN_COUNT_TRUE = 16,
    ALIGN_COUNT_FALSE = 24,
    ALIGN_FRACTION_TRUE = 17,
    ALIGN_PERCENTILE_99 = 18,
    ALIGN_PERCENTILE_95 = 19,
    ALIGN_PERCENTILE_50 = 20,
    ALIGN_PERCENTILE_05 = 21,
    ALIGN_PERCENT_CHANGE = 23,
}

impl ::protobuf::ProtobufEnum for Aggregation_Aligner {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Aggregation_Aligner> {
        match value {
            0 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_NONE),
            1 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_DELTA),
            2 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_RATE),
            3 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_INTERPOLATE),
            4 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_NEXT_OLDER),
            10 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_MIN),
            11 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_MAX),
            12 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_MEAN),
            13 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_COUNT),
            14 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_SUM),
            15 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_STDDEV),
            16 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_COUNT_TRUE),
            24 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_COUNT_FALSE),
            17 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_FRACTION_TRUE),
            18 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_PERCENTILE_99),
            19 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_PERCENTILE_95),
            20 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_PERCENTILE_50),
            21 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_PERCENTILE_05),
            23 => ::std::option::Option::Some(Aggregation_Aligner::ALIGN_PERCENT_CHANGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Aggregation_Aligner] = &[
            Aggregation_Aligner::ALIGN_NONE,
            Aggregation_Aligner::ALIGN_DELTA,
            Aggregation_Aligner::ALIGN_RATE,
            Aggregation_Aligner::ALIGN_INTERPOLATE,
            Aggregation_Aligner::ALIGN_NEXT_OLDER,
            Aggregation_Aligner::ALIGN_MIN,
            Aggregation_Aligner::ALIGN_MAX,
            Aggregation_Aligner::ALIGN_MEAN,
            Aggregation_Aligner::ALIGN_COUNT,
            Aggregation_Aligner::ALIGN_SUM,
            Aggregation_Aligner::ALIGN_STDDEV,
            Aggregation_Aligner::ALIGN_COUNT_TRUE,
            Aggregation_Aligner::ALIGN_COUNT_FALSE,
            Aggregation_Aligner::ALIGN_FRACTION_TRUE,
            Aggregation_Aligner::ALIGN_PERCENTILE_99,
            Aggregation_Aligner::ALIGN_PERCENTILE_95,
            Aggregation_Aligner::ALIGN_PERCENTILE_50,
            Aggregation_Aligner::ALIGN_PERCENTILE_05,
            Aggregation_Aligner::ALIGN_PERCENT_CHANGE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Aggregation_Aligner>("Aggregation.Aligner", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Aggregation_Aligner {
}

impl ::std::default::Default for Aggregation_Aligner {
    fn default() -> Self {
        Aggregation_Aligner::ALIGN_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for Aggregation_Aligner {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Aggregation_Reducer {
    REDUCE_NONE = 0,
    REDUCE_MEAN = 1,
    REDUCE_MIN = 2,
    REDUCE_MAX = 3,
    REDUCE_SUM = 4,
    REDUCE_STDDEV = 5,
    REDUCE_COUNT = 6,
    REDUCE_COUNT_TRUE = 7,
    REDUCE_COUNT_FALSE = 15,
    REDUCE_FRACTION_TRUE = 8,
    REDUCE_PERCENTILE_99 = 9,
    REDUCE_PERCENTILE_95 = 10,
    REDUCE_PERCENTILE_50 = 11,
    REDUCE_PERCENTILE_05 = 12,
}

impl ::protobuf::ProtobufEnum for Aggregation_Reducer {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Aggregation_Reducer> {
        match value {
            0 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_NONE),
            1 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_MEAN),
            2 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_MIN),
            3 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_MAX),
            4 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_SUM),
            5 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_STDDEV),
            6 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_COUNT),
            7 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_COUNT_TRUE),
            15 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_COUNT_FALSE),
            8 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_FRACTION_TRUE),
            9 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_PERCENTILE_99),
            10 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_PERCENTILE_95),
            11 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_PERCENTILE_50),
            12 => ::std::option::Option::Some(Aggregation_Reducer::REDUCE_PERCENTILE_05),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Aggregation_Reducer] = &[
            Aggregation_Reducer::REDUCE_NONE,
            Aggregation_Reducer::REDUCE_MEAN,
            Aggregation_Reducer::REDUCE_MIN,
            Aggregation_Reducer::REDUCE_MAX,
            Aggregation_Reducer::REDUCE_SUM,
            Aggregation_Reducer::REDUCE_STDDEV,
            Aggregation_Reducer::REDUCE_COUNT,
            Aggregation_Reducer::REDUCE_COUNT_TRUE,
            Aggregation_Reducer::REDUCE_COUNT_FALSE,
            Aggregation_Reducer::REDUCE_FRACTION_TRUE,
            Aggregation_Reducer::REDUCE_PERCENTILE_99,
            Aggregation_Reducer::REDUCE_PERCENTILE_95,
            Aggregation_Reducer::REDUCE_PERCENTILE_50,
            Aggregation_Reducer::REDUCE_PERCENTILE_05,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Aggregation_Reducer>("Aggregation.Reducer", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Aggregation_Reducer {
}

impl ::std::default::Default for Aggregation_Reducer {
    fn default() -> Self {
        Aggregation_Reducer::REDUCE_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for Aggregation_Reducer {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ComparisonType {
    COMPARISON_UNSPECIFIED = 0,
    COMPARISON_GT = 1,
    COMPARISON_GE = 2,
    COMPARISON_LT = 3,
    COMPARISON_LE = 4,
    COMPARISON_EQ = 5,
    COMPARISON_NE = 6,
}

impl ::protobuf::ProtobufEnum for ComparisonType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ComparisonType> {
        match value {
            0 => ::std::option::Option::Some(ComparisonType::COMPARISON_UNSPECIFIED),
            1 => ::std::option::Option::Some(ComparisonType::COMPARISON_GT),
            2 => ::std::option::Option::Some(ComparisonType::COMPARISON_GE),
            3 => ::std::option::Option::Some(ComparisonType::COMPARISON_LT),
            4 => ::std::option::Option::Some(ComparisonType::COMPARISON_LE),
            5 => ::std::option::Option::Some(ComparisonType::COMPARISON_EQ),
            6 => ::std::option::Option::Some(ComparisonType::COMPARISON_NE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ComparisonType] = &[
            ComparisonType::COMPARISON_UNSPECIFIED,
            ComparisonType::COMPARISON_GT,
            ComparisonType::COMPARISON_GE,
            ComparisonType::COMPARISON_LT,
            ComparisonType::COMPARISON_LE,
            ComparisonType::COMPARISON_EQ,
            ComparisonType::COMPARISON_NE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ComparisonType>("ComparisonType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ComparisonType {
}

impl ::std::default::Default for ComparisonType {
    fn default() -> Self {
        ComparisonType::COMPARISON_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for ComparisonType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ServiceTier {
    SERVICE_TIER_UNSPECIFIED = 0,
    SERVICE_TIER_BASIC = 1,
    SERVICE_TIER_PREMIUM = 2,
}

impl ::protobuf::ProtobufEnum for ServiceTier {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ServiceTier> {
        match value {
            0 => ::std::option::Option::Some(ServiceTier::SERVICE_TIER_UNSPECIFIED),
            1 => ::std::option::Option::Some(ServiceTier::SERVICE_TIER_BASIC),
            2 => ::std::option::Option::Some(ServiceTier::SERVICE_TIER_PREMIUM),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ServiceTier] = &[
            ServiceTier::SERVICE_TIER_UNSPECIFIED,
            ServiceTier::SERVICE_TIER_BASIC,
            ServiceTier::SERVICE_TIER_PREMIUM,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ServiceTier>("ServiceTier", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ServiceTier {
}

impl ::std::default::Default for ServiceTier {
    fn default() -> Self {
        ServiceTier::SERVICE_TIER_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceTier {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!google/monitoring/v3/common.proto\x12\x14google.monitoring.v3\x1a\x1d\
    google/api/distribution.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\
    \x1fgoogle/protobuf/timestamp.proto\"\xee\x01\n\nTypedValue\x12\x1f\n\nb\
    ool_value\x18\x01\x20\x01(\x08H\0R\tboolValue\x12!\n\x0bint64_value\x18\
    \x02\x20\x01(\x03H\0R\nint64Value\x12#\n\x0cdouble_value\x18\x03\x20\x01\
    (\x01H\0R\x0bdoubleValue\x12#\n\x0cstring_value\x18\x04\x20\x01(\tH\0R\
    \x0bstringValue\x12I\n\x12distribution_value\x18\x05\x20\x01(\x0b2\x18.g\
    oogle.api.DistributionH\0R\x11distributionValueB\x07\n\x05value\"\x80\
    \x01\n\x0cTimeInterval\x125\n\x08end_time\x18\x02\x20\x01(\x0b2\x1a.goog\
    le.protobuf.TimestampR\x07endTime\x129\n\nstart_time\x18\x01\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\tstartTime\"\xf3\x07\n\x0bAggregati\
    on\x12D\n\x10alignment_period\x18\x01\x20\x01(\x0b2\x19.google.protobuf.\
    DurationR\x0falignmentPeriod\x12W\n\x12per_series_aligner\x18\x02\x20\
    \x01(\x0e2).google.monitoring.v3.Aggregation.AlignerR\x10perSeriesAligne\
    r\x12[\n\x14cross_series_reducer\x18\x04\x20\x01(\x0e2).google.monitorin\
    g.v3.Aggregation.ReducerR\x12crossSeriesReducer\x12&\n\x0fgroup_by_field\
    s\x18\x05\x20\x03(\tR\rgroupByFields\"\x8b\x03\n\x07Aligner\x12\x0e\n\nA\
    LIGN_NONE\x10\0\x12\x0f\n\x0bALIGN_DELTA\x10\x01\x12\x0e\n\nALIGN_RATE\
    \x10\x02\x12\x15\n\x11ALIGN_INTERPOLATE\x10\x03\x12\x14\n\x10ALIGN_NEXT_\
    OLDER\x10\x04\x12\r\n\tALIGN_MIN\x10\n\x12\r\n\tALIGN_MAX\x10\x0b\x12\
    \x0e\n\nALIGN_MEAN\x10\x0c\x12\x0f\n\x0bALIGN_COUNT\x10\r\x12\r\n\tALIGN\
    _SUM\x10\x0e\x12\x10\n\x0cALIGN_STDDEV\x10\x0f\x12\x14\n\x10ALIGN_COUNT_\
    TRUE\x10\x10\x12\x15\n\x11ALIGN_COUNT_FALSE\x10\x18\x12\x17\n\x13ALIGN_F\
    RACTION_TRUE\x10\x11\x12\x17\n\x13ALIGN_PERCENTILE_99\x10\x12\x12\x17\n\
    \x13ALIGN_PERCENTILE_95\x10\x13\x12\x17\n\x13ALIGN_PERCENTILE_50\x10\x14\
    \x12\x17\n\x13ALIGN_PERCENTILE_05\x10\x15\x12\x18\n\x14ALIGN_PERCENT_CHA\
    NGE\x10\x17\"\xb1\x02\n\x07Reducer\x12\x0f\n\x0bREDUCE_NONE\x10\0\x12\
    \x0f\n\x0bREDUCE_MEAN\x10\x01\x12\x0e\n\nREDUCE_MIN\x10\x02\x12\x0e\n\nR\
    EDUCE_MAX\x10\x03\x12\x0e\n\nREDUCE_SUM\x10\x04\x12\x11\n\rREDUCE_STDDEV\
    \x10\x05\x12\x10\n\x0cREDUCE_COUNT\x10\x06\x12\x15\n\x11REDUCE_COUNT_TRU\
    E\x10\x07\x12\x16\n\x12REDUCE_COUNT_FALSE\x10\x0f\x12\x18\n\x14REDUCE_FR\
    ACTION_TRUE\x10\x08\x12\x18\n\x14REDUCE_PERCENTILE_99\x10\t\x12\x18\n\
    \x14REDUCE_PERCENTILE_95\x10\n\x12\x18\n\x14REDUCE_PERCENTILE_50\x10\x0b\
    \x12\x18\n\x14REDUCE_PERCENTILE_05\x10\x0c*\x9e\x01\n\x0eComparisonType\
    \x12\x1a\n\x16COMPARISON_UNSPECIFIED\x10\0\x12\x11\n\rCOMPARISON_GT\x10\
    \x01\x12\x11\n\rCOMPARISON_GE\x10\x02\x12\x11\n\rCOMPARISON_LT\x10\x03\
    \x12\x11\n\rCOMPARISON_LE\x10\x04\x12\x11\n\rCOMPARISON_EQ\x10\x05\x12\
    \x11\n\rCOMPARISON_NE\x10\x06*a\n\x0bServiceTier\x12\x1c\n\x18SERVICE_TI\
    ER_UNSPECIFIED\x10\0\x12\x16\n\x12SERVICE_TIER_BASIC\x10\x01\x12\x18\n\
    \x14SERVICE_TIER_PREMIUM\x10\x02\x1a\x02\x18\x01B\xa3\x01\n\x18com.googl\
    e.monitoring.v3B\x0bCommonProtoP\x01Z>google.golang.org/genproto/googlea\
    pis/monitoring/v3;monitoring\xaa\x02\x1aGoogle.Cloud.Monitoring.V3\xca\
    \x02\x1aGoogle\\Cloud\\Monitoring\\V3J\xc7\x9c\x01\n\x07\x12\x05\x0f\0\
    \xaf\x03\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\
    \x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20\
    License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20n\
    ot\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\
    \x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20Lice\
    nse\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-\
    2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\
    \x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\
    \x1d\n\t\n\x02\x03\0\x12\x03\x13\0'\n\t\n\x02\x03\x01\x12\x03\x14\0(\n\t\
    \n\x02\x03\x02\x12\x03\x15\0)\n\x08\n\x01\x08\x12\x03\x17\07\n\t\n\x02\
    \x08%\x12\x03\x17\07\n\x08\n\x01\x08\x12\x03\x18\0U\n\t\n\x02\x08\x0b\
    \x12\x03\x18\0U\n\x08\n\x01\x08\x12\x03\x19\0\"\n\t\n\x02\x08\n\x12\x03\
    \x19\0\"\n\x08\n\x01\x08\x12\x03\x1a\0,\n\t\n\x02\x08\x08\x12\x03\x1a\0,\
    \n\x08\n\x01\x08\x12\x03\x1b\01\n\t\n\x02\x08\x01\x12\x03\x1b\01\n\x08\n\
    \x01\x08\x12\x03\x1c\07\n\t\n\x02\x08)\x12\x03\x1c\07\n,\n\x02\x04\0\x12\
    \x04\x1f\03\x01\x1a\x20\x20A\x20single\x20strongly-typed\x20value.\n\n\n\
    \n\x03\x04\0\x01\x12\x03\x1f\x08\x12\n&\n\x04\x04\0\x08\0\x12\x04!\x022\
    \x03\x1a\x18\x20The\x20typed\x20value\x20field.\n\n\x0c\n\x05\x04\0\x08\
    \0\x01\x12\x03!\x08\r\n2\n\x04\x04\0\x02\0\x12\x03#\x04\x18\x1a%\x20A\
    \x20Boolean\x20value:\x20`true`\x20or\x20`false`.\n\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03#\x04\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03#\t\x13\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03#\x16\x17\nX\n\x04\x04\0\x02\x01\x12\
    \x03&\x04\x1a\x1aK\x20A\x2064-bit\x20integer.\x20Its\x20range\x20is\x20a\
    pproximately\x20&plusmn;9.2x10<sup>18</sup>.\n\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03&\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03&\n\x15\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03&\x18\x19\n\xb1\x01\n\x04\x04\0\x02\x02\
    \x12\x03+\x04\x1c\x1a\xa3\x01\x20A\x2064-bit\x20double-precision\x20floa\
    ting-point\x20number.\x20Its\x20magnitude\n\x20is\x20approximately\x20&p\
    lusmn;10<sup>&plusmn;300</sup>\x20and\x20it\x20has\x2016\n\x20significan\
    t\x20digits\x20of\x20precision.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03+\
    \x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03+\x0b\x17\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03+\x1a\x1b\n.\n\x04\x04\0\x02\x03\x12\x03.\x04\x1c\
    \x1a!\x20A\x20variable-length\x20string\x20value.\n\n\x0c\n\x05\x04\0\
    \x02\x03\x05\x12\x03.\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03.\x0b\
    \x17\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03.\x1a\x1b\n$\n\x04\x04\0\x02\
    \x04\x12\x031\x043\x1a\x17\x20A\x20distribution\x20value.\n\n\x0c\n\x05\
    \x04\0\x02\x04\x06\x12\x031\x04\x1b\n\x0c\n\x05\x04\0\x02\x04\x01\x12\
    \x031\x1c.\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03112\n\x87\t\n\x02\x04\
    \x01\x12\x04G\0O\x01\x1a\xfa\x08\x20A\x20closed\x20time\x20interval.\x20\
    It\x20extends\x20from\x20the\x20start\x20time\x20to\x20the\x20end\x20tim\
    e,\x20and\x20includes\x20both:\x20`[startTime,\x20endTime]`.\x20Valid\
    \x20time\x20intervals\x20depend\x20on\x20the\x20[`MetricKind`](/monitori\
    ng/api/ref_v3/rest/v3/projects.metricDescriptors#MetricKind)\x20of\x20th\
    e\x20metric\x20value.\x20In\x20no\x20case\x20can\x20the\x20end\x20time\
    \x20be\x20earlier\x20than\x20the\x20start\x20time.\n\n\x20*\x20For\x20a\
    \x20`GAUGE`\x20metric,\x20the\x20`startTime`\x20value\x20is\x20technical\
    ly\x20optional;\x20if\n\x20\x20\x20no\x20value\x20is\x20specified,\x20th\
    e\x20start\x20time\x20defaults\x20to\x20the\x20value\x20of\x20the\n\x20\
    \x20\x20end\x20time,\x20and\x20the\x20interval\x20represents\x20a\x20sin\
    gle\x20point\x20in\x20time.\x20If\x20both\n\x20\x20\x20start\x20and\x20e\
    nd\x20times\x20are\x20specified,\x20they\x20must\x20be\x20identical.\x20\
    Such\x20an\n\x20\x20\x20interval\x20is\x20valid\x20only\x20for\x20`GAUGE\
    `\x20metrics,\x20which\x20are\x20point-in-time\n\x20\x20\x20measurements\
    .\n\n\x20*\x20For\x20`DELTA`\x20and\x20`CUMULATIVE`\x20metrics,\x20the\
    \x20start\x20time\x20must\x20be\x20earlier\n\x20\x20\x20than\x20the\x20e\
    nd\x20time.\n\n\x20*\x20In\x20all\x20cases,\x20the\x20start\x20time\x20o\
    f\x20the\x20next\x20interval\x20must\x20be\n\x20\x20\x20at\x20least\x20a\
    \x20microsecond\x20after\x20the\x20end\x20time\x20of\x20the\x20previous\
    \x20interval.\n\x20\x20\x20Because\x20the\x20interval\x20is\x20closed,\
    \x20if\x20the\x20start\x20time\x20of\x20a\x20new\x20interval\n\x20\x20\
    \x20is\x20the\x20same\x20as\x20the\x20end\x20time\x20of\x20the\x20previo\
    us\x20interval,\x20data\x20written\n\x20\x20\x20at\x20the\x20new\x20star\
    t\x20time\x20could\x20overwrite\x20data\x20written\x20at\x20the\x20previ\
    ous\n\x20\x20\x20end\x20time.\n\n\n\n\x03\x04\x01\x01\x12\x03G\x08\x14\n\
    6\n\x04\x04\x01\x02\0\x12\x03I\x02)\x1a)\x20Required.\x20The\x20end\x20o\
    f\x20the\x20time\x20interval.\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03I\
    \x02\x1b\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03I\x1c$\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03I'(\n\xaa\x01\n\x04\x04\x01\x02\x01\x12\x03N\x02+\x1a\
    \x9c\x01\x20Optional.\x20The\x20beginning\x20of\x20the\x20time\x20interv\
    al.\x20\x20The\x20default\x20value\n\x20for\x20the\x20start\x20time\x20i\
    s\x20the\x20end\x20time.\x20The\x20start\x20time\x20must\x20not\x20be\n\
    \x20later\x20than\x20the\x20end\x20time.\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x06\x12\x03N\x02\x1b\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03N\x1c&\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03N)*\n\xad\x03\n\x02\x04\x02\x12\
    \x05W\0\xfc\x02\x01\x1a\x9f\x03\x20Describes\x20how\x20to\x20combine\x20\
    multiple\x20time\x20series\x20to\x20provide\x20different\x20views\x20of\
    \n\x20the\x20data.\x20\x20Aggregation\x20consists\x20of\x20an\x20alignme\
    nt\x20step\x20on\x20individual\x20time\n\x20series\x20(`alignment_period\
    `\x20and\x20`per_series_aligner`)\x20followed\x20by\x20an\x20optional\n\
    \x20reduction\x20step\x20of\x20the\x20data\x20across\x20the\x20aligned\
    \x20time\x20series\n\x20(`cross_series_reducer`\x20and\x20`group_by_fiel\
    ds`).\x20\x20For\x20more\x20details,\x20see\n\x20[Aggregation](/monitori\
    ng/api/learn_more#aggregation).\n\n\n\n\x03\x04\x02\x01\x12\x03W\x08\x13\
    \nu\n\x04\x04\x02\x04\0\x12\x05Z\x02\xef\x01\x03\x1af\x20The\x20Aligner\
    \x20describes\x20how\x20to\x20bring\x20the\x20data\x20points\x20in\x20a\
    \x20single\n\x20time\x20series\x20into\x20temporal\x20alignment.\n\n\x0c\
    \n\x05\x04\x02\x04\0\x01\x12\x03Z\x07\x0e\n\xb7\x01\n\x06\x04\x02\x04\0\
    \x02\0\x12\x03^\x04\x13\x1a\xa7\x01\x20No\x20alignment.\x20Raw\x20data\
    \x20is\x20returned.\x20Not\x20valid\x20if\x20cross-time\n\x20series\x20r\
    eduction\x20is\x20requested.\x20The\x20value\x20type\x20of\x20the\x20res\
    ult\x20is\n\x20the\x20same\x20as\x20the\x20value\x20type\x20of\x20the\
    \x20input.\n\n\x0e\n\x07\x04\x02\x04\0\x02\0\x01\x12\x03^\x04\x0e\n\x0e\
    \n\x07\x04\x02\x04\0\x02\0\x02\x12\x03^\x11\x12\n\xb2\x03\n\x06\x04\x02\
    \x04\0\x02\x01\x12\x03h\x04\x14\x1a\xa2\x03\x20Align\x20and\x20convert\
    \x20to\x20delta\x20metric\x20type.\x20This\x20alignment\x20is\x20valid\n\
    \x20for\x20cumulative\x20metrics\x20and\x20delta\x20metrics.\x20Aligning\
    \x20an\x20existing\n\x20delta\x20metric\x20to\x20a\x20delta\x20metric\
    \x20requires\x20that\x20the\x20alignment\n\x20period\x20be\x20increased.\
    \x20The\x20value\x20type\x20of\x20the\x20result\x20is\x20the\x20same\n\
    \x20as\x20the\x20value\x20type\x20of\x20the\x20input.\n\n\x20One\x20can\
    \x20think\x20of\x20this\x20aligner\x20as\x20a\x20rate\x20but\x20without\
    \x20time\x20units;\x20that\n\x20is,\x20the\x20output\x20is\x20conceptual\
    ly\x20(second_point\x20-\x20first_point).\n\n\x0e\n\x07\x04\x02\x04\0\
    \x02\x01\x01\x12\x03h\x04\x0f\n\x0e\n\x07\x04\x02\x04\0\x02\x01\x02\x12\
    \x03h\x12\x13\n\xdc\x04\n\x06\x04\x02\x04\0\x02\x02\x12\x03v\x04\x13\x1a\
    \xcc\x04\x20Align\x20and\x20convert\x20to\x20a\x20rate.\x20This\x20align\
    ment\x20is\x20valid\x20for\n\x20cumulative\x20metrics\x20and\x20delta\
    \x20metrics\x20with\x20numeric\x20values.\x20The\x20output\x20is\x20a\n\
    \x20gauge\x20metric\x20with\x20value\x20type\n\x20[DOUBLE][google.api.Me\
    tricDescriptor.ValueType.DOUBLE].\n\n\x20One\x20can\x20think\x20of\x20th\
    is\x20aligner\x20as\x20conceptually\x20providing\x20the\x20slope\x20of\n\
    \x20the\x20line\x20that\x20passes\x20through\x20the\x20value\x20at\x20th\
    e\x20start\x20and\x20end\x20of\x20the\n\x20window.\x20In\x20other\x20wor\
    ds,\x20this\x20is\x20conceptually\x20((y1\x20-\x20y0)/(t1\x20-\x20t0)),\
    \n\x20and\x20the\x20output\x20unit\x20is\x20one\x20that\x20has\x20a\x20\
    \"/time\"\x20dimension.\n\n\x20If,\x20by\x20rate,\x20you\x20are\x20looki\
    ng\x20for\x20percentage\x20change,\x20see\x20the\n\x20`ALIGN_PERCENT_CHA\
    NGE`\x20aligner\x20option.\n\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x01\x12\
    \x03v\x04\x0e\n\x0e\n\x07\x04\x02\x04\0\x02\x02\x02\x12\x03v\x11\x12\n\
    \xe7\x01\n\x06\x04\x02\x04\0\x02\x03\x12\x03|\x04\x1a\x1a\xd7\x01\x20Ali\
    gn\x20by\x20interpolating\x20between\x20adjacent\x20points\x20around\x20\
    the\n\x20period\x20boundary.\x20This\x20alignment\x20is\x20valid\x20for\
    \x20gauge\n\x20metrics\x20with\x20numeric\x20values.\x20The\x20value\x20\
    type\x20of\x20the\x20result\x20is\x20the\x20same\n\x20as\x20the\x20value\
    \x20type\x20of\x20the\x20input.\n\n\x0e\n\x07\x04\x02\x04\0\x02\x03\x01\
    \x12\x03|\x04\x15\n\x0e\n\x07\x04\x02\x04\0\x02\x03\x02\x12\x03|\x18\x19\
    \n\xdd\x01\n\x06\x04\x02\x04\0\x02\x04\x12\x04\x82\x01\x04\x19\x1a\xcc\
    \x01\x20Align\x20by\x20shifting\x20the\x20oldest\x20data\x20point\x20bef\
    ore\x20the\x20period\n\x20boundary\x20to\x20the\x20boundary.\x20This\x20\
    alignment\x20is\x20valid\x20for\x20gauge\n\x20metrics.\x20The\x20value\
    \x20type\x20of\x20the\x20result\x20is\x20the\x20same\x20as\x20the\n\x20v\
    alue\x20type\x20of\x20the\x20input.\n\n\x0f\n\x07\x04\x02\x04\0\x02\x04\
    \x01\x12\x04\x82\x01\x04\x14\n\x0f\n\x07\x04\x02\x04\0\x02\x04\x02\x12\
    \x04\x82\x01\x17\x18\n\xad\x02\n\x06\x04\x02\x04\0\x02\x05\x12\x04\x89\
    \x01\x04\x13\x1a\x9c\x02\x20Align\x20time\x20series\x20via\x20aggregatio\
    n.\x20The\x20resulting\x20data\x20point\x20in\n\x20the\x20alignment\x20p\
    eriod\x20is\x20the\x20minimum\x20of\x20all\x20data\x20points\x20in\x20th\
    e\n\x20period.\x20This\x20alignment\x20is\x20valid\x20for\x20gauge\x20an\
    d\x20delta\x20metrics\x20with\x20numeric\n\x20values.\x20The\x20value\
    \x20type\x20of\x20the\x20result\x20is\x20the\x20same\x20as\x20the\x20val\
    ue\n\x20type\x20of\x20the\x20input.\n\n\x0f\n\x07\x04\x02\x04\0\x02\x05\
    \x01\x12\x04\x89\x01\x04\r\n\x0f\n\x07\x04\x02\x04\0\x02\x05\x02\x12\x04\
    \x89\x01\x10\x12\n\xad\x02\n\x06\x04\x02\x04\0\x02\x06\x12\x04\x90\x01\
    \x04\x13\x1a\x9c\x02\x20Align\x20time\x20series\x20via\x20aggregation.\
    \x20The\x20resulting\x20data\x20point\x20in\n\x20the\x20alignment\x20per\
    iod\x20is\x20the\x20maximum\x20of\x20all\x20data\x20points\x20in\x20the\
    \n\x20period.\x20This\x20alignment\x20is\x20valid\x20for\x20gauge\x20and\
    \x20delta\x20metrics\x20with\x20numeric\n\x20values.\x20The\x20value\x20\
    type\x20of\x20the\x20result\x20is\x20the\x20same\x20as\x20the\x20value\n\
    \x20type\x20of\x20the\x20input.\n\n\x0f\n\x07\x04\x02\x04\0\x02\x06\x01\
    \x12\x04\x90\x01\x04\r\n\x0f\n\x07\x04\x02\x04\0\x02\x06\x02\x12\x04\x90\
    \x01\x10\x12\n\xcf\x02\n\x06\x04\x02\x04\0\x02\x07\x12\x04\x97\x01\x04\
    \x14\x1a\xbe\x02\x20Align\x20time\x20series\x20via\x20aggregation.\x20Th\
    e\x20resulting\x20data\x20point\x20in\n\x20the\x20alignment\x20period\
    \x20is\x20the\x20average\x20or\x20arithmetic\x20mean\x20of\x20all\n\x20d\
    ata\x20points\x20in\x20the\x20period.\x20This\x20alignment\x20is\x20vali\
    d\x20for\x20gauge\x20and\x20delta\n\x20metrics\x20with\x20numeric\x20val\
    ues.\x20The\x20value\x20type\x20of\x20the\x20output\x20is\n\x20[DOUBLE][\
    google.api.MetricDescriptor.ValueType.DOUBLE].\n\n\x0f\n\x07\x04\x02\x04\
    \0\x02\x07\x01\x12\x04\x97\x01\x04\x0e\n\x0f\n\x07\x04\x02\x04\0\x02\x07\
    \x02\x12\x04\x97\x01\x11\x13\n\xc3\x02\n\x06\x04\x02\x04\0\x02\x08\x12\
    \x04\x9e\x01\x04\x15\x1a\xb2\x02\x20Align\x20time\x20series\x20via\x20ag\
    gregation.\x20The\x20resulting\x20data\x20point\x20in\n\x20the\x20alignm\
    ent\x20period\x20is\x20the\x20count\x20of\x20all\x20data\x20points\x20in\
    \x20the\n\x20period.\x20This\x20alignment\x20is\x20valid\x20for\x20gauge\
    \x20and\x20delta\x20metrics\x20with\x20numeric\n\x20or\x20Boolean\x20val\
    ues.\x20The\x20value\x20type\x20of\x20the\x20output\x20is\n\x20[INT64][g\
    oogle.api.MetricDescriptor.ValueType.INT64].\n\n\x0f\n\x07\x04\x02\x04\0\
    \x02\x08\x01\x12\x04\x9e\x01\x04\x0f\n\x0f\n\x07\x04\x02\x04\0\x02\x08\
    \x02\x12\x04\x9e\x01\x12\x14\n\xba\x02\n\x06\x04\x02\x04\0\x02\t\x12\x04\
    \xa5\x01\x04\x13\x1a\xa9\x02\x20Align\x20time\x20series\x20via\x20aggreg\
    ation.\x20The\x20resulting\x20data\x20point\x20in\n\x20the\x20alignment\
    \x20period\x20is\x20the\x20sum\x20of\x20all\x20data\x20points\x20in\x20t\
    he\n\x20period.\x20This\x20alignment\x20is\x20valid\x20for\x20gauge\x20a\
    nd\x20delta\x20metrics\x20with\x20numeric\n\x20and\x20distribution\x20va\
    lues.\x20The\x20value\x20type\x20of\x20the\x20output\x20is\x20the\n\x20s\
    ame\x20as\x20the\x20value\x20type\x20of\x20the\x20input.\n\n\x0f\n\x07\
    \x04\x02\x04\0\x02\t\x01\x12\x04\xa5\x01\x04\r\n\x0f\n\x07\x04\x02\x04\0\
    \x02\t\x02\x12\x04\xa5\x01\x10\x12\n\xc7\x02\n\x06\x04\x02\x04\0\x02\n\
    \x12\x04\xac\x01\x04\x16\x1a\xb6\x02\x20Align\x20time\x20series\x20via\
    \x20aggregation.\x20The\x20resulting\x20data\x20point\x20in\n\x20the\x20\
    alignment\x20period\x20is\x20the\x20standard\x20deviation\x20of\x20all\
    \x20data\n\x20points\x20in\x20the\x20period.\x20This\x20alignment\x20is\
    \x20valid\x20for\x20gauge\x20and\x20delta\x20metrics\n\x20with\x20numeri\
    c\x20values.\x20The\x20value\x20type\x20of\x20the\x20output\x20is\n\x20[\
    DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].\n\n\x0f\n\x07\x04\
    \x02\x04\0\x02\n\x01\x12\x04\xac\x01\x04\x10\n\x0f\n\x07\x04\x02\x04\0\
    \x02\n\x02\x12\x04\xac\x01\x13\x15\n\xb6\x02\n\x06\x04\x02\x04\0\x02\x0b\
    \x12\x04\xb3\x01\x04\x1a\x1a\xa5\x02\x20Align\x20time\x20series\x20via\
    \x20aggregation.\x20The\x20resulting\x20data\x20point\x20in\n\x20the\x20\
    alignment\x20period\x20is\x20the\x20count\x20of\x20True-valued\x20data\
    \x20points\x20in\x20the\n\x20period.\x20This\x20alignment\x20is\x20valid\
    \x20for\x20gauge\x20metrics\x20with\n\x20Boolean\x20values.\x20The\x20va\
    lue\x20type\x20of\x20the\x20output\x20is\n\x20[INT64][google.api.MetricD\
    escriptor.ValueType.INT64].\n\n\x0f\n\x07\x04\x02\x04\0\x02\x0b\x01\x12\
    \x04\xb3\x01\x04\x14\n\x0f\n\x07\x04\x02\x04\0\x02\x0b\x02\x12\x04\xb3\
    \x01\x17\x19\n\xb7\x02\n\x06\x04\x02\x04\0\x02\x0c\x12\x04\xba\x01\x04\
    \x1b\x1a\xa6\x02\x20Align\x20time\x20series\x20via\x20aggregation.\x20Th\
    e\x20resulting\x20data\x20point\x20in\n\x20the\x20alignment\x20period\
    \x20is\x20the\x20count\x20of\x20False-valued\x20data\x20points\x20in\x20\
    the\n\x20period.\x20This\x20alignment\x20is\x20valid\x20for\x20gauge\x20\
    metrics\x20with\n\x20Boolean\x20values.\x20The\x20value\x20type\x20of\
    \x20the\x20output\x20is\n\x20[INT64][google.api.MetricDescriptor.ValueTy\
    pe.INT64].\n\n\x0f\n\x07\x04\x02\x04\0\x02\x0c\x01\x12\x04\xba\x01\x04\
    \x15\n\x0f\n\x07\x04\x02\x04\0\x02\x0c\x02\x12\x04\xba\x01\x18\x1a\n\xd6\
    \x02\n\x06\x04\x02\x04\0\x02\r\x12\x04\xc1\x01\x04\x1d\x1a\xc5\x02\x20Al\
    ign\x20time\x20series\x20via\x20aggregation.\x20The\x20resulting\x20data\
    \x20point\x20in\n\x20the\x20alignment\x20period\x20is\x20the\x20fraction\
    \x20of\x20True-valued\x20data\x20points\x20in\x20the\n\x20period.\x20Thi\
    s\x20alignment\x20is\x20valid\x20for\x20gauge\x20metrics\x20with\x20Bool\
    ean\x20values.\n\x20The\x20output\x20value\x20is\x20in\x20the\x20range\
    \x20[0,\x201]\x20and\x20has\x20value\x20type\n\x20[DOUBLE][google.api.Me\
    tricDescriptor.ValueType.DOUBLE].\n\n\x0f\n\x07\x04\x02\x04\0\x02\r\x01\
    \x12\x04\xc1\x01\x04\x17\n\x0f\n\x07\x04\x02\x04\0\x02\r\x02\x12\x04\xc1\
    \x01\x1a\x1c\n\xd6\x02\n\x06\x04\x02\x04\0\x02\x0e\x12\x04\xc8\x01\x04\
    \x1d\x1a\xc5\x02\x20Align\x20time\x20series\x20via\x20aggregation.\x20Th\
    e\x20resulting\x20data\x20point\x20in\n\x20the\x20alignment\x20period\
    \x20is\x20the\x2099th\x20percentile\x20of\x20all\x20data\n\x20points\x20\
    in\x20the\x20period.\x20This\x20alignment\x20is\x20valid\x20for\x20gauge\
    \x20and\x20delta\x20metrics\n\x20with\x20distribution\x20values.\x20The\
    \x20output\x20is\x20a\x20gauge\x20metric\x20with\x20value\x20type\n\x20[\
    DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].\n\n\x0f\n\x07\x04\
    \x02\x04\0\x02\x0e\x01\x12\x04\xc8\x01\x04\x17\n\x0f\n\x07\x04\x02\x04\0\
    \x02\x0e\x02\x12\x04\xc8\x01\x1a\x1c\n\xd6\x02\n\x06\x04\x02\x04\0\x02\
    \x0f\x12\x04\xcf\x01\x04\x1d\x1a\xc5\x02\x20Align\x20time\x20series\x20v\
    ia\x20aggregation.\x20The\x20resulting\x20data\x20point\x20in\n\x20the\
    \x20alignment\x20period\x20is\x20the\x2095th\x20percentile\x20of\x20all\
    \x20data\n\x20points\x20in\x20the\x20period.\x20This\x20alignment\x20is\
    \x20valid\x20for\x20gauge\x20and\x20delta\x20metrics\n\x20with\x20distri\
    bution\x20values.\x20The\x20output\x20is\x20a\x20gauge\x20metric\x20with\
    \x20value\x20type\n\x20[DOUBLE][google.api.MetricDescriptor.ValueType.DO\
    UBLE].\n\n\x0f\n\x07\x04\x02\x04\0\x02\x0f\x01\x12\x04\xcf\x01\x04\x17\n\
    \x0f\n\x07\x04\x02\x04\0\x02\x0f\x02\x12\x04\xcf\x01\x1a\x1c\n\xd6\x02\n\
    \x06\x04\x02\x04\0\x02\x10\x12\x04\xd6\x01\x04\x1d\x1a\xc5\x02\x20Align\
    \x20time\x20series\x20via\x20aggregation.\x20The\x20resulting\x20data\
    \x20point\x20in\n\x20the\x20alignment\x20period\x20is\x20the\x2050th\x20\
    percentile\x20of\x20all\x20data\n\x20points\x20in\x20the\x20period.\x20T\
    his\x20alignment\x20is\x20valid\x20for\x20gauge\x20and\x20delta\x20metri\
    cs\n\x20with\x20distribution\x20values.\x20The\x20output\x20is\x20a\x20g\
    auge\x20metric\x20with\x20value\x20type\n\x20[DOUBLE][google.api.MetricD\
    escriptor.ValueType.DOUBLE].\n\n\x0f\n\x07\x04\x02\x04\0\x02\x10\x01\x12\
    \x04\xd6\x01\x04\x17\n\x0f\n\x07\x04\x02\x04\0\x02\x10\x02\x12\x04\xd6\
    \x01\x1a\x1c\n\xd5\x02\n\x06\x04\x02\x04\0\x02\x11\x12\x04\xdd\x01\x04\
    \x1d\x1a\xc4\x02\x20Align\x20time\x20series\x20via\x20aggregation.\x20Th\
    e\x20resulting\x20data\x20point\x20in\n\x20the\x20alignment\x20period\
    \x20is\x20the\x205th\x20percentile\x20of\x20all\x20data\n\x20points\x20i\
    n\x20the\x20period.\x20This\x20alignment\x20is\x20valid\x20for\x20gauge\
    \x20and\x20delta\x20metrics\n\x20with\x20distribution\x20values.\x20The\
    \x20output\x20is\x20a\x20gauge\x20metric\x20with\x20value\x20type\n\x20[\
    DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].\n\n\x0f\n\x07\x04\
    \x02\x04\0\x02\x11\x01\x12\x04\xdd\x01\x04\x17\n\x0f\n\x07\x04\x02\x04\0\
    \x02\x11\x02\x12\x04\xdd\x01\x1a\x1c\n\xc3\x07\n\x06\x04\x02\x04\0\x02\
    \x12\x12\x04\xee\x01\x04\x1e\x1a\xb2\x07\x20Align\x20and\x20convert\x20t\
    o\x20a\x20percentage\x20change.\x20This\x20alignment\x20is\x20valid\x20f\
    or\n\x20gauge\x20and\x20delta\x20metrics\x20with\x20numeric\x20values.\
    \x20This\x20alignment\x20conceptually\n\x20computes\x20the\x20equivalent\
    \x20of\x20\"((current\x20-\x20previous)/previous)*100\"\n\x20where\x20pr\
    evious\x20value\x20is\x20determined\x20based\x20on\x20the\x20alignmentPe\
    riod.\n\x20In\x20the\x20event\x20that\x20previous\x20is\x200\x20the\x20c\
    alculated\x20value\x20is\x20infinity\x20with\x20the\n\x20exception\x20th\
    at\x20if\x20both\x20(current\x20-\x20previous)\x20and\x20previous\x20are\
    \x200\x20the\n\x20calculated\x20value\x20is\x200.\n\x20A\x2010\x20minute\
    \x20moving\x20mean\x20is\x20computed\x20at\x20each\x20point\x20of\x20the\
    \x20time\x20window\n\x20prior\x20to\x20the\x20above\x20calculation\x20to\
    \x20smooth\x20the\x20metric\x20and\x20prevent\x20false\n\x20positives\
    \x20from\x20very\x20short\x20lived\x20spikes.\n\x20Only\x20applicable\
    \x20for\x20data\x20that\x20is\x20>=\x200.\x20Any\x20values\x20<\x200\x20\
    are\x20treated\x20as\n\x20no\x20data.\x20While\x20delta\x20metrics\x20ar\
    e\x20accepted\x20by\x20this\x20alignment\x20special\x20care\n\x20should\
    \x20be\x20taken\x20that\x20the\x20values\x20for\x20the\x20metric\x20will\
    \x20always\x20be\x20positive.\n\x20The\x20output\x20is\x20a\x20gauge\x20\
    metric\x20with\x20value\x20type\n\x20[DOUBLE][google.api.MetricDescripto\
    r.ValueType.DOUBLE].\n\n\x0f\n\x07\x04\x02\x04\0\x02\x12\x01\x12\x04\xee\
    \x01\x04\x18\n\x0f\n\x07\x04\x02\x04\0\x02\x12\x02\x12\x04\xee\x01\x1b\
    \x1d\nx\n\x04\x04\x02\x04\x01\x12\x06\xf3\x01\x02\xc7\x02\x03\x1ah\x20A\
    \x20Reducer\x20describes\x20how\x20to\x20aggregate\x20data\x20points\x20\
    from\x20multiple\n\x20time\x20series\x20into\x20a\x20single\x20time\x20s\
    eries.\n\n\r\n\x05\x04\x02\x04\x01\x01\x12\x04\xf3\x01\x07\x0e\nY\n\x06\
    \x04\x02\x04\x01\x02\0\x12\x04\xf6\x01\x04\x14\x1aI\x20No\x20cross-time\
    \x20series\x20reduction.\x20The\x20output\x20of\x20the\x20aligner\x20is\
    \n\x20returned.\n\n\x0f\n\x07\x04\x02\x04\x01\x02\0\x01\x12\x04\xf6\x01\
    \x04\x0f\n\x0f\n\x07\x04\x02\x04\x01\x02\0\x02\x12\x04\xf6\x01\x12\x13\n\
    \x8f\x02\n\x06\x04\x02\x04\x01\x02\x01\x12\x04\xfc\x01\x04\x14\x1a\xfe\
    \x01\x20Reduce\x20by\x20computing\x20the\x20mean\x20across\x20time\x20se\
    ries\x20for\x20each\n\x20alignment\x20period.\x20This\x20reducer\x20is\
    \x20valid\x20for\x20delta\x20and\n\x20gauge\x20metrics\x20with\x20numeri\
    c\x20or\x20distribution\x20values.\x20The\x20value\x20type\x20of\x20the\
    \n\x20output\x20is\x20[DOUBLE][google.api.MetricDescriptor.ValueType.DOU\
    BLE].\n\n\x0f\n\x07\x04\x02\x04\x01\x02\x01\x01\x12\x04\xfc\x01\x04\x0f\
    \n\x0f\n\x07\x04\x02\x04\x01\x02\x01\x02\x12\x04\xfc\x01\x12\x13\n\xf3\
    \x01\n\x06\x04\x02\x04\x01\x02\x02\x12\x04\x82\x02\x04\x13\x1a\xe2\x01\
    \x20Reduce\x20by\x20computing\x20the\x20minimum\x20across\x20time\x20ser\
    ies\x20for\x20each\n\x20alignment\x20period.\x20This\x20reducer\x20is\
    \x20valid\x20for\x20delta\x20and\n\x20gauge\x20metrics\x20with\x20numeri\
    c\x20values.\x20The\x20value\x20type\x20of\x20the\x20output\n\x20is\x20t\
    he\x20same\x20as\x20the\x20value\x20type\x20of\x20the\x20input.\n\n\x0f\
    \n\x07\x04\x02\x04\x01\x02\x02\x01\x12\x04\x82\x02\x04\x0e\n\x0f\n\x07\
    \x04\x02\x04\x01\x02\x02\x02\x12\x04\x82\x02\x11\x12\n\xf3\x01\n\x06\x04\
    \x02\x04\x01\x02\x03\x12\x04\x88\x02\x04\x13\x1a\xe2\x01\x20Reduce\x20by\
    \x20computing\x20the\x20maximum\x20across\x20time\x20series\x20for\x20ea\
    ch\n\x20alignment\x20period.\x20This\x20reducer\x20is\x20valid\x20for\
    \x20delta\x20and\n\x20gauge\x20metrics\x20with\x20numeric\x20values.\x20\
    The\x20value\x20type\x20of\x20the\x20output\n\x20is\x20the\x20same\x20as\
    \x20the\x20value\x20type\x20of\x20the\x20input.\n\n\x0f\n\x07\x04\x02\
    \x04\x01\x02\x03\x01\x12\x04\x88\x02\x04\x0e\n\x0f\n\x07\x04\x02\x04\x01\
    \x02\x03\x02\x12\x04\x88\x02\x11\x12\n\x80\x02\n\x06\x04\x02\x04\x01\x02\
    \x04\x12\x04\x8e\x02\x04\x13\x1a\xef\x01\x20Reduce\x20by\x20computing\
    \x20the\x20sum\x20across\x20time\x20series\x20for\x20each\n\x20alignment\
    \x20period.\x20This\x20reducer\x20is\x20valid\x20for\x20delta\x20and\n\
    \x20gauge\x20metrics\x20with\x20numeric\x20and\x20distribution\x20values\
    .\x20The\x20value\x20type\x20of\n\x20the\x20output\x20is\x20the\x20same\
    \x20as\x20the\x20value\x20type\x20of\x20the\x20input.\n\n\x0f\n\x07\x04\
    \x02\x04\x01\x02\x04\x01\x12\x04\x8e\x02\x04\x0e\n\x0f\n\x07\x04\x02\x04\
    \x01\x02\x04\x02\x12\x04\x8e\x02\x11\x12\n\x9d\x02\n\x06\x04\x02\x04\x01\
    \x02\x05\x12\x04\x94\x02\x04\x16\x1a\x8c\x02\x20Reduce\x20by\x20computin\
    g\x20the\x20standard\x20deviation\x20across\x20time\x20series\n\x20for\
    \x20each\x20alignment\x20period.\x20This\x20reducer\x20is\x20valid\x20fo\
    r\x20delta\n\x20and\x20gauge\x20metrics\x20with\x20numeric\x20or\x20dist\
    ribution\x20values.\x20The\x20value\x20type\x20of\n\x20the\x20output\x20\
    is\x20[DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].\n\n\x0f\n\
    \x07\x04\x02\x04\x01\x02\x05\x01\x12\x04\x94\x02\x04\x11\n\x0f\n\x07\x04\
    \x02\x04\x01\x02\x05\x02\x12\x04\x94\x02\x14\x15\n\xb3\x02\n\x06\x04\x02\
    \x04\x01\x02\x06\x12\x04\x9b\x02\x04\x15\x1a\xa2\x02\x20Reduce\x20by\x20\
    computing\x20the\x20count\x20of\x20data\x20points\x20across\x20time\x20s\
    eries\n\x20for\x20each\x20alignment\x20period.\x20This\x20reducer\x20is\
    \x20valid\x20for\x20delta\n\x20and\x20gauge\x20metrics\x20of\x20numeric,\
    \x20Boolean,\x20distribution,\x20and\x20string\x20value\n\x20type.\x20Th\
    e\x20value\x20type\x20of\x20the\x20output\x20is\n\x20[INT64][google.api.\
    MetricDescriptor.ValueType.INT64].\n\n\x0f\n\x07\x04\x02\x04\x01\x02\x06\
    \x01\x12\x04\x9b\x02\x04\x10\n\x0f\n\x07\x04\x02\x04\x01\x02\x06\x02\x12\
    \x04\x9b\x02\x13\x14\n\x9b\x02\n\x06\x04\x02\x04\x01\x02\x07\x12\x04\xa1\
    \x02\x04\x1a\x1a\x8a\x02\x20Reduce\x20by\x20computing\x20the\x20count\
    \x20of\x20True-valued\x20data\x20points\x20across\x20time\n\x20series\
    \x20for\x20each\x20alignment\x20period.\x20This\x20reducer\x20is\x20vali\
    d\x20for\x20delta\n\x20and\x20gauge\x20metrics\x20of\x20Boolean\x20value\
    \x20type.\x20The\x20value\x20type\x20of\n\x20the\x20output\x20is\x20[INT\
    64][google.api.MetricDescriptor.ValueType.INT64].\n\n\x0f\n\x07\x04\x02\
    \x04\x01\x02\x07\x01\x12\x04\xa1\x02\x04\x15\n\x0f\n\x07\x04\x02\x04\x01\
    \x02\x07\x02\x12\x04\xa1\x02\x18\x19\n\x9c\x02\n\x06\x04\x02\x04\x01\x02\
    \x08\x12\x04\xa7\x02\x04\x1c\x1a\x8b\x02\x20Reduce\x20by\x20computing\
    \x20the\x20count\x20of\x20False-valued\x20data\x20points\x20across\x20ti\
    me\n\x20series\x20for\x20each\x20alignment\x20period.\x20This\x20reducer\
    \x20is\x20valid\x20for\x20delta\n\x20and\x20gauge\x20metrics\x20of\x20Bo\
    olean\x20value\x20type.\x20The\x20value\x20type\x20of\n\x20the\x20output\
    \x20is\x20[INT64][google.api.MetricDescriptor.ValueType.INT64].\n\n\x0f\
    \n\x07\x04\x02\x04\x01\x02\x08\x01\x12\x04\xa7\x02\x04\x16\n\x0f\n\x07\
    \x04\x02\x04\x01\x02\x08\x02\x12\x04\xa7\x02\x19\x1b\n\xbc\x02\n\x06\x04\
    \x02\x04\x01\x02\t\x12\x04\xae\x02\x04\x1d\x1a\xab\x02\x20Reduce\x20by\
    \x20computing\x20the\x20fraction\x20of\x20True-valued\x20data\x20points\
    \x20across\x20time\n\x20series\x20for\x20each\x20alignment\x20period.\
    \x20This\x20reducer\x20is\x20valid\x20for\x20delta\n\x20and\x20gauge\x20\
    metrics\x20of\x20Boolean\x20value\x20type.\x20The\x20output\x20value\x20\
    is\x20in\x20the\n\x20range\x20[0,\x201]\x20and\x20has\x20value\x20type\n\
    \x20[DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].\n\n\x0f\n\
    \x07\x04\x02\x04\x01\x02\t\x01\x12\x04\xae\x02\x04\x18\n\x0f\n\x07\x04\
    \x02\x04\x01\x02\t\x02\x12\x04\xae\x02\x1b\x1c\n\x9c\x02\n\x06\x04\x02\
    \x04\x01\x02\n\x12\x04\xb4\x02\x04\x1d\x1a\x8b\x02\x20Reduce\x20by\x20co\
    mputing\x2099th\x20percentile\x20of\x20data\x20points\x20across\x20time\
    \x20series\n\x20for\x20each\x20alignment\x20period.\x20This\x20reducer\
    \x20is\x20valid\x20for\x20gauge\x20and\x20delta\n\x20metrics\x20of\x20nu\
    meric\x20and\x20distribution\x20type.\x20The\x20value\x20of\x20the\x20ou\
    tput\x20is\n\x20[DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE]\n\
    \n\x0f\n\x07\x04\x02\x04\x01\x02\n\x01\x12\x04\xb4\x02\x04\x18\n\x0f\n\
    \x07\x04\x02\x04\x01\x02\n\x02\x12\x04\xb4\x02\x1b\x1c\n\x9c\x02\n\x06\
    \x04\x02\x04\x01\x02\x0b\x12\x04\xba\x02\x04\x1e\x1a\x8b\x02\x20Reduce\
    \x20by\x20computing\x2095th\x20percentile\x20of\x20data\x20points\x20acr\
    oss\x20time\x20series\n\x20for\x20each\x20alignment\x20period.\x20This\
    \x20reducer\x20is\x20valid\x20for\x20gauge\x20and\x20delta\n\x20metrics\
    \x20of\x20numeric\x20and\x20distribution\x20type.\x20The\x20value\x20of\
    \x20the\x20output\x20is\n\x20[DOUBLE][google.api.MetricDescriptor.ValueT\
    ype.DOUBLE]\n\n\x0f\n\x07\x04\x02\x04\x01\x02\x0b\x01\x12\x04\xba\x02\
    \x04\x18\n\x0f\n\x07\x04\x02\x04\x01\x02\x0b\x02\x12\x04\xba\x02\x1b\x1d\
    \n\x9c\x02\n\x06\x04\x02\x04\x01\x02\x0c\x12\x04\xc0\x02\x04\x1e\x1a\x8b\
    \x02\x20Reduce\x20by\x20computing\x2050th\x20percentile\x20of\x20data\
    \x20points\x20across\x20time\x20series\n\x20for\x20each\x20alignment\x20\
    period.\x20This\x20reducer\x20is\x20valid\x20for\x20gauge\x20and\x20delt\
    a\n\x20metrics\x20of\x20numeric\x20and\x20distribution\x20type.\x20The\
    \x20value\x20of\x20the\x20output\x20is\n\x20[DOUBLE][google.api.MetricDe\
    scriptor.ValueType.DOUBLE]\n\n\x0f\n\x07\x04\x02\x04\x01\x02\x0c\x01\x12\
    \x04\xc0\x02\x04\x18\n\x0f\n\x07\x04\x02\x04\x01\x02\x0c\x02\x12\x04\xc0\
    \x02\x1b\x1d\n\x9b\x02\n\x06\x04\x02\x04\x01\x02\r\x12\x04\xc6\x02\x04\
    \x1e\x1a\x8a\x02\x20Reduce\x20by\x20computing\x205th\x20percentile\x20of\
    \x20data\x20points\x20across\x20time\x20series\n\x20for\x20each\x20align\
    ment\x20period.\x20This\x20reducer\x20is\x20valid\x20for\x20gauge\x20and\
    \x20delta\n\x20metrics\x20of\x20numeric\x20and\x20distribution\x20type.\
    \x20The\x20value\x20of\x20the\x20output\x20is\n\x20[DOUBLE][google.api.M\
    etricDescriptor.ValueType.DOUBLE]\n\n\x0f\n\x07\x04\x02\x04\x01\x02\r\
    \x01\x12\x04\xc6\x02\x04\x18\n\x0f\n\x07\x04\x02\x04\x01\x02\r\x02\x12\
    \x04\xc6\x02\x1b\x1d\n\xf4\x03\n\x04\x04\x02\x02\0\x12\x04\xd1\x02\x020\
    \x1a\xe5\x03\x20The\x20alignment\x20period\x20for\x20per-[time\x20series\
    ][google.monitoring.v3.TimeSeries]\n\x20alignment.\x20If\x20present,\x20\
    `alignmentPeriod`\x20must\x20be\x20at\x20least\x2060\n\x20seconds.\x20\
    \x20After\x20per-time\x20series\x20alignment,\x20each\x20time\x20series\
    \x20will\n\x20contain\x20data\x20points\x20only\x20on\x20the\x20period\
    \x20boundaries.\x20If\n\x20`perSeriesAligner`\x20is\x20not\x20specified\
    \x20or\x20equals\x20`ALIGN_NONE`,\x20then\n\x20this\x20field\x20is\x20ig\
    nored.\x20If\x20`perSeriesAligner`\x20is\x20specified\x20and\n\x20does\
    \x20not\x20equal\x20`ALIGN_NONE`,\x20then\x20this\x20field\x20must\x20be\
    \x20defined;\n\x20otherwise\x20an\x20error\x20is\x20returned.\n\n\r\n\
    \x05\x04\x02\x02\0\x06\x12\x04\xd1\x02\x02\x1a\n\r\n\x05\x04\x02\x02\0\
    \x01\x12\x04\xd1\x02\x1b+\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\xd1\x02./\
    \n\xad\x04\n\x04\x04\x02\x02\x01\x12\x04\xde\x02\x02!\x1a\x9e\x04\x20The\
    \x20approach\x20to\x20be\x20used\x20to\x20align\x20individual\x20time\
    \x20series.\x20Not\x20all\n\x20alignment\x20functions\x20may\x20be\x20ap\
    plied\x20to\x20all\x20time\x20series,\x20depending\n\x20on\x20the\x20met\
    ric\x20type\x20and\x20value\x20type\x20of\x20the\x20original\x20time\n\
    \x20series.\x20Alignment\x20may\x20change\x20the\x20metric\x20type\x20or\
    \x20the\x20value\x20type\x20of\n\x20the\x20time\x20series.\n\n\x20Time\
    \x20series\x20data\x20must\x20be\x20aligned\x20in\x20order\x20to\x20perf\
    orm\x20cross-time\n\x20series\x20reduction.\x20If\x20`crossSeriesReducer\
    `\x20is\x20specified,\x20then\n\x20`perSeriesAligner`\x20must\x20be\x20s\
    pecified\x20and\x20not\x20equal\x20`ALIGN_NONE`\n\x20and\x20`alignmentPe\
    riod`\x20must\x20be\x20specified;\x20otherwise,\x20an\x20error\x20is\n\
    \x20returned.\n\n\r\n\x05\x04\x02\x02\x01\x06\x12\x04\xde\x02\x02\t\n\r\
    \n\x05\x04\x02\x02\x01\x01\x12\x04\xde\x02\n\x1c\n\r\n\x05\x04\x02\x02\
    \x01\x03\x12\x04\xde\x02\x1f\x20\n\xa2\x04\n\x04\x04\x02\x02\x02\x12\x04\
    \xeb\x02\x02#\x1a\x93\x04\x20The\x20approach\x20to\x20be\x20used\x20to\
    \x20combine\x20time\x20series.\x20Not\x20all\x20reducer\n\x20functions\
    \x20may\x20be\x20applied\x20to\x20all\x20time\x20series,\x20depending\
    \x20on\x20the\n\x20metric\x20type\x20and\x20the\x20value\x20type\x20of\
    \x20the\x20original\x20time\n\x20series.\x20Reduction\x20may\x20change\
    \x20the\x20metric\x20type\x20of\x20value\x20type\x20of\x20the\n\x20time\
    \x20series.\n\n\x20Time\x20series\x20data\x20must\x20be\x20aligned\x20in\
    \x20order\x20to\x20perform\x20cross-time\n\x20series\x20reduction.\x20If\
    \x20`crossSeriesReducer`\x20is\x20specified,\x20then\n\x20`perSeriesAlig\
    ner`\x20must\x20be\x20specified\x20and\x20not\x20equal\x20`ALIGN_NONE`\n\
    \x20and\x20`alignmentPeriod`\x20must\x20be\x20specified;\x20otherwise,\
    \x20an\x20error\x20is\n\x20returned.\n\n\r\n\x05\x04\x02\x02\x02\x06\x12\
    \x04\xeb\x02\x02\t\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\xeb\x02\n\x1e\n\
    \r\n\x05\x04\x02\x02\x02\x03\x12\x04\xeb\x02!\"\n\xc9\x06\n\x04\x04\x02\
    \x02\x03\x12\x04\xfb\x02\x02&\x1a\xba\x06\x20The\x20set\x20of\x20fields\
    \x20to\x20preserve\x20when\x20`crossSeriesReducer`\x20is\n\x20specified.\
    \x20The\x20`groupByFields`\x20determine\x20how\x20the\x20time\x20series\
    \x20are\n\x20partitioned\x20into\x20subsets\x20prior\x20to\x20applying\
    \x20the\x20aggregation\n\x20function.\x20Each\x20subset\x20contains\x20t\
    ime\x20series\x20that\x20have\x20the\x20same\n\x20value\x20for\x20each\
    \x20of\x20the\x20grouping\x20fields.\x20Each\x20individual\x20time\n\x20\
    series\x20is\x20a\x20member\x20of\x20exactly\x20one\x20subset.\x20The\n\
    \x20`crossSeriesReducer`\x20is\x20applied\x20to\x20each\x20subset\x20of\
    \x20time\x20series.\n\x20It\x20is\x20not\x20possible\x20to\x20reduce\x20\
    across\x20different\x20resource\x20types,\x20so\n\x20this\x20field\x20im\
    plicitly\x20contains\x20`resource.type`.\x20\x20Fields\x20not\n\x20speci\
    fied\x20in\x20`groupByFields`\x20are\x20aggregated\x20away.\x20\x20If\n\
    \x20`groupByFields`\x20is\x20not\x20specified\x20and\x20all\x20the\x20ti\
    me\x20series\x20have\n\x20the\x20same\x20resource\x20type,\x20then\x20th\
    e\x20time\x20series\x20are\x20aggregated\x20into\n\x20a\x20single\x20out\
    put\x20time\x20series.\x20If\x20`crossSeriesReducer`\x20is\x20not\n\x20d\
    efined,\x20this\x20field\x20is\x20ignored.\n\n\r\n\x05\x04\x02\x02\x03\
    \x04\x12\x04\xfb\x02\x02\n\n\r\n\x05\x04\x02\x02\x03\x05\x12\x04\xfb\x02\
    \x0b\x11\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\xfb\x02\x12!\n\r\n\x05\
    \x04\x02\x02\x03\x03\x12\x04\xfb\x02$%\na\n\x02\x05\0\x12\x06\x80\x03\0\
    \x95\x03\x01\x1aS\x20Specifies\x20an\x20ordering\x20relationship\x20on\
    \x20two\x20arguments,\x20here\x20called\x20left\x20and\n\x20right.\n\n\
    \x0b\n\x03\x05\0\x01\x12\x04\x80\x03\x05\x13\n6\n\x04\x05\0\x02\0\x12\
    \x04\x82\x03\x02\x1d\x1a(\x20No\x20ordering\x20relationship\x20is\x20spe\
    cified.\n\n\r\n\x05\x05\0\x02\0\x01\x12\x04\x82\x03\x02\x18\n\r\n\x05\
    \x05\0\x02\0\x02\x12\x04\x82\x03\x1b\x1c\nE\n\x04\x05\0\x02\x01\x12\x04\
    \x85\x03\x02\x14\x1a7\x20The\x20left\x20argument\x20is\x20greater\x20tha\
    n\x20the\x20right\x20argument.\n\n\r\n\x05\x05\0\x02\x01\x01\x12\x04\x85\
    \x03\x02\x0f\n\r\n\x05\x05\0\x02\x01\x02\x12\x04\x85\x03\x12\x13\nQ\n\
    \x04\x05\0\x02\x02\x12\x04\x88\x03\x02\x14\x1aC\x20The\x20left\x20argume\
    nt\x20is\x20greater\x20than\x20or\x20equal\x20to\x20the\x20right\x20argu\
    ment.\n\n\r\n\x05\x05\0\x02\x02\x01\x12\x04\x88\x03\x02\x0f\n\r\n\x05\
    \x05\0\x02\x02\x02\x12\x04\x88\x03\x12\x13\nB\n\x04\x05\0\x02\x03\x12\
    \x04\x8b\x03\x02\x14\x1a4\x20The\x20left\x20argument\x20is\x20less\x20th\
    an\x20the\x20right\x20argument.\n\n\r\n\x05\x05\0\x02\x03\x01\x12\x04\
    \x8b\x03\x02\x0f\n\r\n\x05\x05\0\x02\x03\x02\x12\x04\x8b\x03\x12\x13\nN\
    \n\x04\x05\0\x02\x04\x12\x04\x8e\x03\x02\x14\x1a@\x20The\x20left\x20argu\
    ment\x20is\x20less\x20than\x20or\x20equal\x20to\x20the\x20right\x20argum\
    ent.\n\n\r\n\x05\x05\0\x02\x04\x01\x12\x04\x8e\x03\x02\x0f\n\r\n\x05\x05\
    \0\x02\x04\x02\x12\x04\x8e\x03\x12\x13\nA\n\x04\x05\0\x02\x05\x12\x04\
    \x91\x03\x02\x14\x1a3\x20The\x20left\x20argument\x20is\x20equal\x20to\
    \x20the\x20right\x20argument.\n\n\r\n\x05\x05\0\x02\x05\x01\x12\x04\x91\
    \x03\x02\x0f\n\r\n\x05\x05\0\x02\x05\x02\x12\x04\x91\x03\x12\x13\nE\n\
    \x04\x05\0\x02\x06\x12\x04\x94\x03\x02\x14\x1a7\x20The\x20left\x20argume\
    nt\x20is\x20not\x20equal\x20to\x20the\x20right\x20argument.\n\n\r\n\x05\
    \x05\0\x02\x06\x01\x12\x04\x94\x03\x02\x0f\n\r\n\x05\x05\0\x02\x06\x02\
    \x12\x04\x94\x03\x12\x13\n\xad\x01\n\x02\x05\x01\x12\x06\x9b\x03\0\xaf\
    \x03\x01\x1a\x9e\x01\x20The\x20tier\x20of\x20service\x20for\x20a\x20Work\
    space.\x20Please\x20see\x20the\n\x20[service\x20tiers\n\x20documentation\
    ](https://cloud.google.com/monitoring/workspaces/tiers)\x20for\x20more\n\
    \x20details.\n\n\x0b\n\x03\x05\x01\x01\x12\x04\x9b\x03\x05\x10\n\x0b\n\
    \x03\x05\x01\x03\x12\x04\x9c\x03\x02\x1b\n\x0c\n\x04\x05\x01\x03\x03\x12\
    \x04\x9c\x03\x02\x1b\nj\n\x04\x05\x01\x02\0\x12\x04\xa0\x03\x02\x1f\x1a\
    \\\x20An\x20invalid\x20sentinel\x20value,\x20used\x20to\x20indicate\x20t\
    hat\x20a\x20tier\x20has\x20not\n\x20been\x20provided\x20explicitly.\n\n\
    \r\n\x05\x05\x01\x02\0\x01\x12\x04\xa0\x03\x02\x1a\n\r\n\x05\x05\x01\x02\
    \0\x02\x12\x04\xa0\x03\x1d\x1e\n\xc7\x02\n\x04\x05\x01\x02\x01\x12\x04\
    \xa7\x03\x02\x19\x1a\xb8\x02\x20The\x20Stackdriver\x20Basic\x20tier,\x20\
    a\x20free\x20tier\x20of\x20service\x20that\x20provides\x20basic\n\x20fea\
    tures,\x20a\x20moderate\x20allotment\x20of\x20logs,\x20and\x20access\x20\
    to\x20built-in\x20metrics.\n\x20A\x20number\x20of\x20features\x20are\x20\
    not\x20available\x20in\x20this\x20tier.\x20For\x20more\x20details,\n\x20\
    see\x20[the\x20service\x20tiers\n\x20documentation](https://cloud.google\
    .com/monitoring/workspaces/tiers).\n\n\r\n\x05\x05\x01\x02\x01\x01\x12\
    \x04\xa7\x03\x02\x14\n\r\n\x05\x05\x01\x02\x01\x02\x12\x04\xa7\x03\x17\
    \x18\n\xda\x02\n\x04\x05\x01\x02\x02\x12\x04\xae\x03\x02\x1b\x1a\xcb\x02\
    \x20The\x20Stackdriver\x20Premium\x20tier,\x20a\x20higher,\x20more\x20ex\
    pensive\x20tier\x20of\x20service\n\x20that\x20provides\x20access\x20to\
    \x20all\x20Stackdriver\x20features,\x20lets\x20you\x20use\x20Stackdriver\
    \n\x20with\x20AWS\x20accounts,\x20and\x20has\x20a\x20larger\x20allotment\
    s\x20for\x20logs\x20and\x20metrics.\x20For\n\x20more\x20details,\x20see\
    \x20[the\x20service\x20tiers\n\x20documentation](https://cloud.google.co\
    m/monitoring/workspaces/tiers).\n\n\r\n\x05\x05\x01\x02\x02\x01\x12\x04\
    \xae\x03\x02\x16\n\r\n\x05\x05\x01\x02\x02\x02\x12\x04\xae\x03\x19\x1ab\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
