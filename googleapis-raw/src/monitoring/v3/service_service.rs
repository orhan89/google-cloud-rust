// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/monitoring/v3/service_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct CreateServiceRequest {
    // message fields
    pub parent: ::std::string::String,
    pub service_id: ::std::string::String,
    pub service: ::protobuf::SingularPtrField<super::service::Service>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateServiceRequest {
    fn default() -> &'a CreateServiceRequest {
        <CreateServiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateServiceRequest {
    pub fn new() -> CreateServiceRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string service_id = 3;


    pub fn get_service_id(&self) -> &str {
        &self.service_id
    }
    pub fn clear_service_id(&mut self) {
        self.service_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_id(&mut self, v: ::std::string::String) {
        self.service_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_id(&mut self) -> &mut ::std::string::String {
        &mut self.service_id
    }

    // Take field
    pub fn take_service_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_id, ::std::string::String::new())
    }

    // .google.monitoring.v3.Service service = 2;


    pub fn get_service(&self) -> &super::service::Service {
        self.service.as_ref().unwrap_or_else(|| <super::service::Service as ::protobuf::Message>::default_instance())
    }
    pub fn clear_service(&mut self) {
        self.service.clear();
    }

    pub fn has_service(&self) -> bool {
        self.service.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: super::service::Service) {
        self.service = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service(&mut self) -> &mut super::service::Service {
        if self.service.is_none() {
            self.service.set_default();
        }
        self.service.as_mut().unwrap()
    }

    // Take field
    pub fn take_service(&mut self) -> super::service::Service {
        self.service.take().unwrap_or_else(|| super::service::Service::new())
    }
}

impl ::protobuf::Message for CreateServiceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.service {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.service)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.service_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.service_id);
        }
        if let Some(ref v) = self.service.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.service_id.is_empty() {
            os.write_string(3, &self.service_id)?;
        }
        if let Some(ref v) = self.service.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateServiceRequest {
        CreateServiceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreateServiceRequest| { &m.parent },
                |m: &mut CreateServiceRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_id",
                |m: &CreateServiceRequest| { &m.service_id },
                |m: &mut CreateServiceRequest| { &mut m.service_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::service::Service>>(
                "service",
                |m: &CreateServiceRequest| { &m.service },
                |m: &mut CreateServiceRequest| { &mut m.service },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateServiceRequest>(
                "CreateServiceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateServiceRequest {
        static instance: ::protobuf::rt::LazyV2<CreateServiceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateServiceRequest::new)
    }
}

impl ::protobuf::Clear for CreateServiceRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.service_id.clear();
        self.service.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateServiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateServiceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetServiceRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetServiceRequest {
    fn default() -> &'a GetServiceRequest {
        <GetServiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetServiceRequest {
    pub fn new() -> GetServiceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetServiceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetServiceRequest {
        GetServiceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetServiceRequest| { &m.name },
                |m: &mut GetServiceRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetServiceRequest>(
                "GetServiceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetServiceRequest {
        static instance: ::protobuf::rt::LazyV2<GetServiceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetServiceRequest::new)
    }
}

impl ::protobuf::Clear for GetServiceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetServiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetServiceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListServicesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub filter: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListServicesRequest {
    fn default() -> &'a ListServicesRequest {
        <ListServicesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListServicesRequest {
    pub fn new() -> ListServicesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string filter = 2;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // int32 page_size = 3;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 4;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListServicesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.filter);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.filter.is_empty() {
            os.write_string(2, &self.filter)?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(4, &self.page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListServicesRequest {
        ListServicesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListServicesRequest| { &m.parent },
                |m: &mut ListServicesRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &ListServicesRequest| { &m.filter },
                |m: &mut ListServicesRequest| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListServicesRequest| { &m.page_size },
                |m: &mut ListServicesRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListServicesRequest| { &m.page_token },
                |m: &mut ListServicesRequest| { &mut m.page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListServicesRequest>(
                "ListServicesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListServicesRequest {
        static instance: ::protobuf::rt::LazyV2<ListServicesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListServicesRequest::new)
    }
}

impl ::protobuf::Clear for ListServicesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.filter.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListServicesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListServicesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListServicesResponse {
    // message fields
    pub services: ::protobuf::RepeatedField<super::service::Service>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListServicesResponse {
    fn default() -> &'a ListServicesResponse {
        <ListServicesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListServicesResponse {
    pub fn new() -> ListServicesResponse {
        ::std::default::Default::default()
    }

    // repeated .google.monitoring.v3.Service services = 1;


    pub fn get_services(&self) -> &[super::service::Service] {
        &self.services
    }
    pub fn clear_services(&mut self) {
        self.services.clear();
    }

    // Param is passed by value, moved
    pub fn set_services(&mut self, v: ::protobuf::RepeatedField<super::service::Service>) {
        self.services = v;
    }

    // Mutable pointer to the field.
    pub fn mut_services(&mut self) -> &mut ::protobuf::RepeatedField<super::service::Service> {
        &mut self.services
    }

    // Take field
    pub fn take_services(&mut self) -> ::protobuf::RepeatedField<super::service::Service> {
        ::std::mem::replace(&mut self.services, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListServicesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.services {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.services)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.services {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.services {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListServicesResponse {
        ListServicesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::service::Service>>(
                "services",
                |m: &ListServicesResponse| { &m.services },
                |m: &mut ListServicesResponse| { &mut m.services },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListServicesResponse| { &m.next_page_token },
                |m: &mut ListServicesResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListServicesResponse>(
                "ListServicesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListServicesResponse {
        static instance: ::protobuf::rt::LazyV2<ListServicesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListServicesResponse::new)
    }
}

impl ::protobuf::Clear for ListServicesResponse {
    fn clear(&mut self) {
        self.services.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListServicesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListServicesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateServiceRequest {
    // message fields
    pub service: ::protobuf::SingularPtrField<super::service::Service>,
    pub update_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateServiceRequest {
    fn default() -> &'a UpdateServiceRequest {
        <UpdateServiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateServiceRequest {
    pub fn new() -> UpdateServiceRequest {
        ::std::default::Default::default()
    }

    // .google.monitoring.v3.Service service = 1;


    pub fn get_service(&self) -> &super::service::Service {
        self.service.as_ref().unwrap_or_else(|| <super::service::Service as ::protobuf::Message>::default_instance())
    }
    pub fn clear_service(&mut self) {
        self.service.clear();
    }

    pub fn has_service(&self) -> bool {
        self.service.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: super::service::Service) {
        self.service = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service(&mut self) -> &mut super::service::Service {
        if self.service.is_none() {
            self.service.set_default();
        }
        self.service.as_mut().unwrap()
    }

    // Take field
    pub fn take_service(&mut self) -> super::service::Service {
        self.service.take().unwrap_or_else(|| super::service::Service::new())
    }

    // .google.protobuf.FieldMask update_mask = 2;


    pub fn get_update_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.update_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.update_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }
}

impl ::protobuf::Message for UpdateServiceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.service {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.service)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.service.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.service.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateServiceRequest {
        UpdateServiceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::service::Service>>(
                "service",
                |m: &UpdateServiceRequest| { &m.service },
                |m: &mut UpdateServiceRequest| { &mut m.service },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "update_mask",
                |m: &UpdateServiceRequest| { &m.update_mask },
                |m: &mut UpdateServiceRequest| { &mut m.update_mask },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateServiceRequest>(
                "UpdateServiceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateServiceRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateServiceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateServiceRequest::new)
    }
}

impl ::protobuf::Clear for UpdateServiceRequest {
    fn clear(&mut self) {
        self.service.clear();
        self.update_mask.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateServiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateServiceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteServiceRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteServiceRequest {
    fn default() -> &'a DeleteServiceRequest {
        <DeleteServiceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteServiceRequest {
    pub fn new() -> DeleteServiceRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteServiceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteServiceRequest {
        DeleteServiceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteServiceRequest| { &m.name },
                |m: &mut DeleteServiceRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteServiceRequest>(
                "DeleteServiceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteServiceRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteServiceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteServiceRequest::new)
    }
}

impl ::protobuf::Clear for DeleteServiceRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteServiceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteServiceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateServiceLevelObjectiveRequest {
    // message fields
    pub parent: ::std::string::String,
    pub service_level_objective_id: ::std::string::String,
    pub service_level_objective: ::protobuf::SingularPtrField<super::service::ServiceLevelObjective>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateServiceLevelObjectiveRequest {
    fn default() -> &'a CreateServiceLevelObjectiveRequest {
        <CreateServiceLevelObjectiveRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateServiceLevelObjectiveRequest {
    pub fn new() -> CreateServiceLevelObjectiveRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string service_level_objective_id = 3;


    pub fn get_service_level_objective_id(&self) -> &str {
        &self.service_level_objective_id
    }
    pub fn clear_service_level_objective_id(&mut self) {
        self.service_level_objective_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_level_objective_id(&mut self, v: ::std::string::String) {
        self.service_level_objective_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_level_objective_id(&mut self) -> &mut ::std::string::String {
        &mut self.service_level_objective_id
    }

    // Take field
    pub fn take_service_level_objective_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_level_objective_id, ::std::string::String::new())
    }

    // .google.monitoring.v3.ServiceLevelObjective service_level_objective = 2;


    pub fn get_service_level_objective(&self) -> &super::service::ServiceLevelObjective {
        self.service_level_objective.as_ref().unwrap_or_else(|| <super::service::ServiceLevelObjective as ::protobuf::Message>::default_instance())
    }
    pub fn clear_service_level_objective(&mut self) {
        self.service_level_objective.clear();
    }

    pub fn has_service_level_objective(&self) -> bool {
        self.service_level_objective.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_level_objective(&mut self, v: super::service::ServiceLevelObjective) {
        self.service_level_objective = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_level_objective(&mut self) -> &mut super::service::ServiceLevelObjective {
        if self.service_level_objective.is_none() {
            self.service_level_objective.set_default();
        }
        self.service_level_objective.as_mut().unwrap()
    }

    // Take field
    pub fn take_service_level_objective(&mut self) -> super::service::ServiceLevelObjective {
        self.service_level_objective.take().unwrap_or_else(|| super::service::ServiceLevelObjective::new())
    }
}

impl ::protobuf::Message for CreateServiceLevelObjectiveRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.service_level_objective {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_level_objective_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.service_level_objective)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.service_level_objective_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.service_level_objective_id);
        }
        if let Some(ref v) = self.service_level_objective.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.service_level_objective_id.is_empty() {
            os.write_string(3, &self.service_level_objective_id)?;
        }
        if let Some(ref v) = self.service_level_objective.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateServiceLevelObjectiveRequest {
        CreateServiceLevelObjectiveRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &CreateServiceLevelObjectiveRequest| { &m.parent },
                |m: &mut CreateServiceLevelObjectiveRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_level_objective_id",
                |m: &CreateServiceLevelObjectiveRequest| { &m.service_level_objective_id },
                |m: &mut CreateServiceLevelObjectiveRequest| { &mut m.service_level_objective_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::service::ServiceLevelObjective>>(
                "service_level_objective",
                |m: &CreateServiceLevelObjectiveRequest| { &m.service_level_objective },
                |m: &mut CreateServiceLevelObjectiveRequest| { &mut m.service_level_objective },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateServiceLevelObjectiveRequest>(
                "CreateServiceLevelObjectiveRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateServiceLevelObjectiveRequest {
        static instance: ::protobuf::rt::LazyV2<CreateServiceLevelObjectiveRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateServiceLevelObjectiveRequest::new)
    }
}

impl ::protobuf::Clear for CreateServiceLevelObjectiveRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.service_level_objective_id.clear();
        self.service_level_objective.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateServiceLevelObjectiveRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateServiceLevelObjectiveRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetServiceLevelObjectiveRequest {
    // message fields
    pub name: ::std::string::String,
    pub view: super::service::ServiceLevelObjective_View,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetServiceLevelObjectiveRequest {
    fn default() -> &'a GetServiceLevelObjectiveRequest {
        <GetServiceLevelObjectiveRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetServiceLevelObjectiveRequest {
    pub fn new() -> GetServiceLevelObjectiveRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.monitoring.v3.ServiceLevelObjective.View view = 2;


    pub fn get_view(&self) -> super::service::ServiceLevelObjective_View {
        self.view
    }
    pub fn clear_view(&mut self) {
        self.view = super::service::ServiceLevelObjective_View::VIEW_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_view(&mut self, v: super::service::ServiceLevelObjective_View) {
        self.view = v;
    }
}

impl ::protobuf::Message for GetServiceLevelObjectiveRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.view, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.view != super::service::ServiceLevelObjective_View::VIEW_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.view);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.view != super::service::ServiceLevelObjective_View::VIEW_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.view))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetServiceLevelObjectiveRequest {
        GetServiceLevelObjectiveRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GetServiceLevelObjectiveRequest| { &m.name },
                |m: &mut GetServiceLevelObjectiveRequest| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::service::ServiceLevelObjective_View>>(
                "view",
                |m: &GetServiceLevelObjectiveRequest| { &m.view },
                |m: &mut GetServiceLevelObjectiveRequest| { &mut m.view },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetServiceLevelObjectiveRequest>(
                "GetServiceLevelObjectiveRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetServiceLevelObjectiveRequest {
        static instance: ::protobuf::rt::LazyV2<GetServiceLevelObjectiveRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetServiceLevelObjectiveRequest::new)
    }
}

impl ::protobuf::Clear for GetServiceLevelObjectiveRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.view = super::service::ServiceLevelObjective_View::VIEW_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetServiceLevelObjectiveRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetServiceLevelObjectiveRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListServiceLevelObjectivesRequest {
    // message fields
    pub parent: ::std::string::String,
    pub filter: ::std::string::String,
    pub page_size: i32,
    pub page_token: ::std::string::String,
    pub view: super::service::ServiceLevelObjective_View,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListServiceLevelObjectivesRequest {
    fn default() -> &'a ListServiceLevelObjectivesRequest {
        <ListServiceLevelObjectivesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListServiceLevelObjectivesRequest {
    pub fn new() -> ListServiceLevelObjectivesRequest {
        ::std::default::Default::default()
    }

    // string parent = 1;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string filter = 2;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // int32 page_size = 3;


    pub fn get_page_size(&self) -> i32 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: i32) {
        self.page_size = v;
    }

    // string page_token = 4;


    pub fn get_page_token(&self) -> &str {
        &self.page_token
    }
    pub fn clear_page_token(&mut self) {
        self.page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_page_token(&mut self, v: ::std::string::String) {
        self.page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.page_token
    }

    // Take field
    pub fn take_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.page_token, ::std::string::String::new())
    }

    // .google.monitoring.v3.ServiceLevelObjective.View view = 5;


    pub fn get_view(&self) -> super::service::ServiceLevelObjective_View {
        self.view
    }
    pub fn clear_view(&mut self) {
        self.view = super::service::ServiceLevelObjective_View::VIEW_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_view(&mut self, v: super::service::ServiceLevelObjective_View) {
        self.view = v;
    }
}

impl ::protobuf::Message for ListServiceLevelObjectivesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.page_size = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.page_token)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.view, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parent);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.filter);
        }
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.page_token);
        }
        if self.view != super::service::ServiceLevelObjective_View::VIEW_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(5, self.view);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.parent.is_empty() {
            os.write_string(1, &self.parent)?;
        }
        if !self.filter.is_empty() {
            os.write_string(2, &self.filter)?;
        }
        if self.page_size != 0 {
            os.write_int32(3, self.page_size)?;
        }
        if !self.page_token.is_empty() {
            os.write_string(4, &self.page_token)?;
        }
        if self.view != super::service::ServiceLevelObjective_View::VIEW_UNSPECIFIED {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.view))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListServiceLevelObjectivesRequest {
        ListServiceLevelObjectivesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &ListServiceLevelObjectivesRequest| { &m.parent },
                |m: &mut ListServiceLevelObjectivesRequest| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &ListServiceLevelObjectivesRequest| { &m.filter },
                |m: &mut ListServiceLevelObjectivesRequest| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "page_size",
                |m: &ListServiceLevelObjectivesRequest| { &m.page_size },
                |m: &mut ListServiceLevelObjectivesRequest| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "page_token",
                |m: &ListServiceLevelObjectivesRequest| { &m.page_token },
                |m: &mut ListServiceLevelObjectivesRequest| { &mut m.page_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::service::ServiceLevelObjective_View>>(
                "view",
                |m: &ListServiceLevelObjectivesRequest| { &m.view },
                |m: &mut ListServiceLevelObjectivesRequest| { &mut m.view },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListServiceLevelObjectivesRequest>(
                "ListServiceLevelObjectivesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListServiceLevelObjectivesRequest {
        static instance: ::protobuf::rt::LazyV2<ListServiceLevelObjectivesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListServiceLevelObjectivesRequest::new)
    }
}

impl ::protobuf::Clear for ListServiceLevelObjectivesRequest {
    fn clear(&mut self) {
        self.parent.clear();
        self.filter.clear();
        self.page_size = 0;
        self.page_token.clear();
        self.view = super::service::ServiceLevelObjective_View::VIEW_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListServiceLevelObjectivesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListServiceLevelObjectivesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListServiceLevelObjectivesResponse {
    // message fields
    pub service_level_objectives: ::protobuf::RepeatedField<super::service::ServiceLevelObjective>,
    pub next_page_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListServiceLevelObjectivesResponse {
    fn default() -> &'a ListServiceLevelObjectivesResponse {
        <ListServiceLevelObjectivesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListServiceLevelObjectivesResponse {
    pub fn new() -> ListServiceLevelObjectivesResponse {
        ::std::default::Default::default()
    }

    // repeated .google.monitoring.v3.ServiceLevelObjective service_level_objectives = 1;


    pub fn get_service_level_objectives(&self) -> &[super::service::ServiceLevelObjective] {
        &self.service_level_objectives
    }
    pub fn clear_service_level_objectives(&mut self) {
        self.service_level_objectives.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_level_objectives(&mut self, v: ::protobuf::RepeatedField<super::service::ServiceLevelObjective>) {
        self.service_level_objectives = v;
    }

    // Mutable pointer to the field.
    pub fn mut_service_level_objectives(&mut self) -> &mut ::protobuf::RepeatedField<super::service::ServiceLevelObjective> {
        &mut self.service_level_objectives
    }

    // Take field
    pub fn take_service_level_objectives(&mut self) -> ::protobuf::RepeatedField<super::service::ServiceLevelObjective> {
        ::std::mem::replace(&mut self.service_level_objectives, ::protobuf::RepeatedField::new())
    }

    // string next_page_token = 2;


    pub fn get_next_page_token(&self) -> &str {
        &self.next_page_token
    }
    pub fn clear_next_page_token(&mut self) {
        self.next_page_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_page_token(&mut self, v: ::std::string::String) {
        self.next_page_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_page_token(&mut self) -> &mut ::std::string::String {
        &mut self.next_page_token
    }

    // Take field
    pub fn take_next_page_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.next_page_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListServiceLevelObjectivesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.service_level_objectives {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.service_level_objectives)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.next_page_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.service_level_objectives {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.next_page_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.next_page_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.service_level_objectives {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.next_page_token.is_empty() {
            os.write_string(2, &self.next_page_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListServiceLevelObjectivesResponse {
        ListServiceLevelObjectivesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::service::ServiceLevelObjective>>(
                "service_level_objectives",
                |m: &ListServiceLevelObjectivesResponse| { &m.service_level_objectives },
                |m: &mut ListServiceLevelObjectivesResponse| { &mut m.service_level_objectives },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "next_page_token",
                |m: &ListServiceLevelObjectivesResponse| { &m.next_page_token },
                |m: &mut ListServiceLevelObjectivesResponse| { &mut m.next_page_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListServiceLevelObjectivesResponse>(
                "ListServiceLevelObjectivesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListServiceLevelObjectivesResponse {
        static instance: ::protobuf::rt::LazyV2<ListServiceLevelObjectivesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListServiceLevelObjectivesResponse::new)
    }
}

impl ::protobuf::Clear for ListServiceLevelObjectivesResponse {
    fn clear(&mut self) {
        self.service_level_objectives.clear();
        self.next_page_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListServiceLevelObjectivesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListServiceLevelObjectivesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateServiceLevelObjectiveRequest {
    // message fields
    pub service_level_objective: ::protobuf::SingularPtrField<super::service::ServiceLevelObjective>,
    pub update_mask: ::protobuf::SingularPtrField<::protobuf::well_known_types::FieldMask>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateServiceLevelObjectiveRequest {
    fn default() -> &'a UpdateServiceLevelObjectiveRequest {
        <UpdateServiceLevelObjectiveRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateServiceLevelObjectiveRequest {
    pub fn new() -> UpdateServiceLevelObjectiveRequest {
        ::std::default::Default::default()
    }

    // .google.monitoring.v3.ServiceLevelObjective service_level_objective = 1;


    pub fn get_service_level_objective(&self) -> &super::service::ServiceLevelObjective {
        self.service_level_objective.as_ref().unwrap_or_else(|| <super::service::ServiceLevelObjective as ::protobuf::Message>::default_instance())
    }
    pub fn clear_service_level_objective(&mut self) {
        self.service_level_objective.clear();
    }

    pub fn has_service_level_objective(&self) -> bool {
        self.service_level_objective.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_level_objective(&mut self, v: super::service::ServiceLevelObjective) {
        self.service_level_objective = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_level_objective(&mut self) -> &mut super::service::ServiceLevelObjective {
        if self.service_level_objective.is_none() {
            self.service_level_objective.set_default();
        }
        self.service_level_objective.as_mut().unwrap()
    }

    // Take field
    pub fn take_service_level_objective(&mut self) -> super::service::ServiceLevelObjective {
        self.service_level_objective.take().unwrap_or_else(|| super::service::ServiceLevelObjective::new())
    }

    // .google.protobuf.FieldMask update_mask = 2;


    pub fn get_update_mask(&self) -> &::protobuf::well_known_types::FieldMask {
        self.update_mask.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::FieldMask as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: ::protobuf::well_known_types::FieldMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut ::protobuf::well_known_types::FieldMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> ::protobuf::well_known_types::FieldMask {
        self.update_mask.take().unwrap_or_else(|| ::protobuf::well_known_types::FieldMask::new())
    }
}

impl ::protobuf::Message for UpdateServiceLevelObjectiveRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.service_level_objective {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.service_level_objective)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.service_level_objective.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.service_level_objective.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateServiceLevelObjectiveRequest {
        UpdateServiceLevelObjectiveRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::service::ServiceLevelObjective>>(
                "service_level_objective",
                |m: &UpdateServiceLevelObjectiveRequest| { &m.service_level_objective },
                |m: &mut UpdateServiceLevelObjectiveRequest| { &mut m.service_level_objective },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::FieldMask>>(
                "update_mask",
                |m: &UpdateServiceLevelObjectiveRequest| { &m.update_mask },
                |m: &mut UpdateServiceLevelObjectiveRequest| { &mut m.update_mask },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateServiceLevelObjectiveRequest>(
                "UpdateServiceLevelObjectiveRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateServiceLevelObjectiveRequest {
        static instance: ::protobuf::rt::LazyV2<UpdateServiceLevelObjectiveRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateServiceLevelObjectiveRequest::new)
    }
}

impl ::protobuf::Clear for UpdateServiceLevelObjectiveRequest {
    fn clear(&mut self) {
        self.service_level_objective.clear();
        self.update_mask.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateServiceLevelObjectiveRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateServiceLevelObjectiveRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteServiceLevelObjectiveRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteServiceLevelObjectiveRequest {
    fn default() -> &'a DeleteServiceLevelObjectiveRequest {
        <DeleteServiceLevelObjectiveRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteServiceLevelObjectiveRequest {
    pub fn new() -> DeleteServiceLevelObjectiveRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteServiceLevelObjectiveRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteServiceLevelObjectiveRequest {
        DeleteServiceLevelObjectiveRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DeleteServiceLevelObjectiveRequest| { &m.name },
                |m: &mut DeleteServiceLevelObjectiveRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteServiceLevelObjectiveRequest>(
                "DeleteServiceLevelObjectiveRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteServiceLevelObjectiveRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteServiceLevelObjectiveRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteServiceLevelObjectiveRequest::new)
    }
}

impl ::protobuf::Clear for DeleteServiceLevelObjectiveRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteServiceLevelObjectiveRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteServiceLevelObjectiveRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*google/monitoring/v3/service_service.proto\x12\x14google.monitoring.v\
    3\x1a\x1cgoogle/api/annotations.proto\x1a#google/api/monitored_resource.\
    proto\x1a\"google/monitoring/v3/service.proto\x1a\x1bgoogle/protobuf/emp\
    ty.proto\x1a\x20google/protobuf/field_mask.proto\x1a\x17google/api/clien\
    t.proto\"\x86\x01\n\x14CreateServiceRequest\x12\x16\n\x06parent\x18\x01\
    \x20\x01(\tR\x06parent\x12\x1d\n\nservice_id\x18\x03\x20\x01(\tR\tservic\
    eId\x127\n\x07service\x18\x02\x20\x01(\x0b2\x1d.google.monitoring.v3.Ser\
    viceR\x07service\"'\n\x11GetServiceRequest\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\"\x81\x01\n\x13ListServicesRequest\x12\x16\n\x06parent\
    \x18\x01\x20\x01(\tR\x06parent\x12\x16\n\x06filter\x18\x02\x20\x01(\tR\
    \x06filter\x12\x1b\n\tpage_size\x18\x03\x20\x01(\x05R\x08pageSize\x12\
    \x1d\n\npage_token\x18\x04\x20\x01(\tR\tpageToken\"y\n\x14ListServicesRe\
    sponse\x129\n\x08services\x18\x01\x20\x03(\x0b2\x1d.google.monitoring.v3\
    .ServiceR\x08services\x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\rnex\
    tPageToken\"\x8c\x01\n\x14UpdateServiceRequest\x127\n\x07service\x18\x01\
    \x20\x01(\x0b2\x1d.google.monitoring.v3.ServiceR\x07service\x12;\n\x0bup\
    date_mask\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.FieldMaskR\nupdateMa\
    sk\"*\n\x14DeleteServiceRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\"\xde\x01\n\"CreateServiceLevelObjectiveRequest\x12\x16\n\x06pa\
    rent\x18\x01\x20\x01(\tR\x06parent\x12;\n\x1aservice_level_objective_id\
    \x18\x03\x20\x01(\tR\x17serviceLevelObjectiveId\x12c\n\x17service_level_\
    objective\x18\x02\x20\x01(\x0b2+.google.monitoring.v3.ServiceLevelObject\
    iveR\x15serviceLevelObjective\"{\n\x1fGetServiceLevelObjectiveRequest\
    \x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12D\n\x04view\x18\x02\
    \x20\x01(\x0e20.google.monitoring.v3.ServiceLevelObjective.ViewR\x04view\
    \"\xd5\x01\n!ListServiceLevelObjectivesRequest\x12\x16\n\x06parent\x18\
    \x01\x20\x01(\tR\x06parent\x12\x16\n\x06filter\x18\x02\x20\x01(\tR\x06fi\
    lter\x12\x1b\n\tpage_size\x18\x03\x20\x01(\x05R\x08pageSize\x12\x1d\n\np\
    age_token\x18\x04\x20\x01(\tR\tpageToken\x12D\n\x04view\x18\x05\x20\x01(\
    \x0e20.google.monitoring.v3.ServiceLevelObjective.ViewR\x04view\"\xb3\
    \x01\n\"ListServiceLevelObjectivesResponse\x12e\n\x18service_level_objec\
    tives\x18\x01\x20\x03(\x0b2+.google.monitoring.v3.ServiceLevelObjectiveR\
    \x16serviceLevelObjectives\x12&\n\x0fnext_page_token\x18\x02\x20\x01(\tR\
    \rnextPageToken\"\xc6\x01\n\"UpdateServiceLevelObjectiveRequest\x12c\n\
    \x17service_level_objective\x18\x01\x20\x01(\x0b2+.google.monitoring.v3.\
    ServiceLevelObjectiveR\x15serviceLevelObjective\x12;\n\x0bupdate_mask\
    \x18\x02\x20\x01(\x0b2\x1a.google.protobuf.FieldMaskR\nupdateMask\"8\n\"\
    DeleteServiceLevelObjectiveRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name2\xe5\x0e\n\x18ServiceMonitoringService\x12\x86\x01\n\rCreateSer\
    vice\x12*.google.monitoring.v3.CreateServiceRequest\x1a\x1d.google.monit\
    oring.v3.Service\"*\x82\xd3\xe4\x93\x02$\"\x19/v3/{parent=*/*}/services:\
    \x07service\x12w\n\nGetService\x12'.google.monitoring.v3.GetServiceReque\
    st\x1a\x1d.google.monitoring.v3.Service\"!\x82\xd3\xe4\x93\x02\x1b\x12\
    \x19/v3/{name=*/*/services/*}\x12\x88\x01\n\x0cListServices\x12).google.\
    monitoring.v3.ListServicesRequest\x1a*.google.monitoring.v3.ListServices\
    Response\"!\x82\xd3\xe4\x93\x02\x1b\x12\x19/v3/{parent=*/*}/services\x12\
    \x8e\x01\n\rUpdateService\x12*.google.monitoring.v3.UpdateServiceRequest\
    \x1a\x1d.google.monitoring.v3.Service\"2\x82\xd3\xe4\x93\x02,2!/v3/{serv\
    ice.name=*/*/services/*}:\x07service\x12v\n\rDeleteService\x12*.google.m\
    onitoring.v3.DeleteServiceRequest\x1a\x16.google.protobuf.Empty\"!\x82\
    \xd3\xe4\x93\x02\x1b*\x19/v3/{name=*/*/services/*}\x12\xd9\x01\n\x1bCrea\
    teServiceLevelObjective\x128.google.monitoring.v3.CreateServiceLevelObje\
    ctiveRequest\x1a+.google.monitoring.v3.ServiceLevelObjective\"S\x82\xd3\
    \xe4\x93\x02M\"2/v3/{parent=*/*/services/*}/serviceLevelObjectives:\x17s\
    ervice_level_objective\x12\xba\x01\n\x18GetServiceLevelObjective\x125.go\
    ogle.monitoring.v3.GetServiceLevelObjectiveRequest\x1a+.google.monitorin\
    g.v3.ServiceLevelObjective\":\x82\xd3\xe4\x93\x024\x122/v3/{name=*/*/ser\
    vices/*/serviceLevelObjectives/*}\x12\xcb\x01\n\x1aListServiceLevelObjec\
    tives\x127.google.monitoring.v3.ListServiceLevelObjectivesRequest\x1a8.g\
    oogle.monitoring.v3.ListServiceLevelObjectivesResponse\":\x82\xd3\xe4\
    \x93\x024\x122/v3/{parent=*/*/services/*}/serviceLevelObjectives\x12\xf1\
    \x01\n\x1bUpdateServiceLevelObjective\x128.google.monitoring.v3.UpdateSe\
    rviceLevelObjectiveRequest\x1a+.google.monitoring.v3.ServiceLevelObjecti\
    ve\"k\x82\xd3\xe4\x93\x02e2J/v3/{service_level_objective.name=*/*/servic\
    es/*/serviceLevelObjectives/*}:\x17service_level_objective\x12\xab\x01\n\
    \x1bDeleteServiceLevelObjective\x128.google.monitoring.v3.DeleteServiceL\
    evelObjectiveRequest\x1a\x16.google.protobuf.Empty\":\x82\xd3\xe4\x93\
    \x024*2/v3/{name=*/*/services/*/serviceLevelObjectives/*}\x1a\xa9\x01\
    \xd2A\x89\x01https://www.googleapis.com/auth/cloud-platform,https://www.\
    googleapis.com/auth/monitoring,https://www.googleapis.com/auth/monitorin\
    g.read\xcaA\x19monitoring.googleapis.comB\xb5\x01\n\x18com.google.monito\
    ring.v3B\x1dServiceMonitoringServiceProtoP\x01Z>google.golang.org/genpro\
    to/googleapis/monitoring/v3;monitoring\xaa\x02\x1aGoogle.Cloud.Monitorin\
    g.V3\xca\x02\x1aGoogle\\Cloud\\Monitoring\\V3J\xafF\n\x07\x12\x05\x0f\0\
    \x9c\x02\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\
    \x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20\
    License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20n\
    ot\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\
    \x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20Lice\
    nse\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-\
    2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\
    \x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\
    \x1d\n\t\n\x02\x03\0\x12\x03\x13\0&\n\t\n\x02\x03\x01\x12\x03\x14\0-\n\t\
    \n\x02\x03\x02\x12\x03\x15\0,\n\t\n\x02\x03\x03\x12\x03\x16\0%\n\t\n\x02\
    \x03\x04\x12\x03\x17\0*\n\t\n\x02\x03\x05\x12\x03\x18\0!\n\x08\n\x01\x08\
    \x12\x03\x1a\07\n\t\n\x02\x08%\x12\x03\x1a\07\n\x08\n\x01\x08\x12\x03\
    \x1b\0U\n\t\n\x02\x08\x0b\x12\x03\x1b\0U\n\x08\n\x01\x08\x12\x03\x1c\0\"\
    \n\t\n\x02\x08\n\x12\x03\x1c\0\"\n\x08\n\x01\x08\x12\x03\x1d\0>\n\t\n\
    \x02\x08\x08\x12\x03\x1d\0>\n\x08\n\x01\x08\x12\x03\x1e\01\n\t\n\x02\x08\
    \x01\x12\x03\x1e\01\n\x08\n\x01\x08\x12\x03\x1f\07\n\t\n\x02\x08)\x12\
    \x03\x1f\07\n\x96\x02\n\x02\x06\0\x12\x04%\0u\x01\x1a\x89\x02\x20The\x20\
    Stackdriver\x20Monitoring\x20Service-Oriented\x20Monitoring\x20API\x20ha\
    s\x20endpoints\x20for\n\x20managing\x20and\x20querying\x20aspects\x20of\
    \x20a\x20workspace's\x20services.\x20These\x20include\x20the\n\x20`Servi\
    ce`'s\x20monitored\x20resources,\x20its\x20Service-Level\x20Objectives,\
    \x20and\x20a\x20taxonomy\n\x20of\x20categorized\x20Health\x20Metrics.\n\
    \n\n\n\x03\x06\0\x01\x12\x03%\x08\x20\n\n\n\x03\x06\0\x03\x12\x03&\x02A\
    \n\x0c\n\x05\x06\0\x03\x99\x08\x12\x03&\x02A\n\x0b\n\x03\x06\0\x03\x12\
    \x04'\x02*8\n\r\n\x05\x06\0\x03\x9a\x08\x12\x04'\x02*8\n#\n\x04\x06\0\
    \x02\0\x12\x04-\x022\x03\x1a\x15\x20Create\x20a\x20`Service`.\n\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03-\x06\x13\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03-\x14(\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03-3:\n\r\n\x05\x06\0\x02\0\
    \x04\x12\x04.\x041\x06\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04.\
    \x041\x06\n(\n\x04\x06\0\x02\x01\x12\x045\x029\x03\x1a\x1a\x20Get\x20the\
    \x20named\x20`Service`.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x035\x06\x10\
    \n\x0c\n\x05\x06\0\x02\x01\x02\x12\x035\x11\"\n\x0c\n\x05\x06\0\x02\x01\
    \x03\x12\x035-4\n\r\n\x05\x06\0\x02\x01\x04\x12\x046\x048\x06\n\x11\n\t\
    \x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x046\x048\x06\n3\n\x04\x06\0\x02\
    \x02\x12\x04<\x02@\x03\x1a%\x20List\x20`Service`s\x20for\x20this\x20work\
    space.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03<\x06\x12\n\x0c\n\x05\x06\
    \0\x02\x02\x02\x12\x03<\x13&\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03<1E\n\
    \r\n\x05\x06\0\x02\x02\x04\x12\x04=\x04?\x06\n\x11\n\t\x06\0\x02\x02\x04\
    \xb0\xca\xbc\"\x12\x04=\x04?\x06\n&\n\x04\x06\0\x02\x03\x12\x04C\x02H\
    \x03\x1a\x18\x20Update\x20this\x20`Service`.\n\n\x0c\n\x05\x06\0\x02\x03\
    \x01\x12\x03C\x06\x13\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03C\x14(\n\x0c\
    \n\x05\x06\0\x02\x03\x03\x12\x03C3:\n\r\n\x05\x06\0\x02\x03\x04\x12\x04D\
    \x04G\x06\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04D\x04G\x06\n+\
    \n\x04\x06\0\x02\x04\x12\x04K\x02O\x03\x1a\x1d\x20Soft\x20delete\x20this\
    \x20`Service`.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03K\x06\x13\n\x0c\n\
    \x05\x06\0\x02\x04\x02\x12\x03K\x14(\n\x0c\n\x05\x06\0\x02\x04\x03\x12\
    \x03K3H\n\r\n\x05\x06\0\x02\x04\x04\x12\x04L\x04N\x06\n\x11\n\t\x06\0\
    \x02\x04\x04\xb0\xca\xbc\"\x12\x04L\x04N\x06\nI\n\x04\x06\0\x02\x05\x12\
    \x04R\x02W\x03\x1a;\x20Create\x20a\x20`ServiceLevelObjective`\x20for\x20\
    the\x20given\x20`Service`.\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03R\x06!\
    \n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03R\"D\n\x0c\n\x05\x06\0\x02\x05\x03\
    \x12\x03ROd\n\r\n\x05\x06\0\x02\x05\x04\x12\x04S\x04V\x06\n\x11\n\t\x06\
    \0\x02\x05\x04\xb0\xca\xbc\"\x12\x04S\x04V\x06\n6\n\x04\x06\0\x02\x06\
    \x12\x04Z\x02^\x03\x1a(\x20Get\x20a\x20`ServiceLevelObjective`\x20by\x20\
    name.\n\n\x0c\n\x05\x06\0\x02\x06\x01\x12\x03Z\x06\x1e\n\x0c\n\x05\x06\0\
    \x02\x06\x02\x12\x03Z\x1f>\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03ZI^\n\r\
    \n\x05\x06\0\x02\x06\x04\x12\x04[\x04]\x06\n\x11\n\t\x06\0\x02\x06\x04\
    \xb0\xca\xbc\"\x12\x04[\x04]\x06\nJ\n\x04\x06\0\x02\x07\x12\x04a\x02e\
    \x03\x1a<\x20List\x20the\x20`ServiceLevelObjective`s\x20for\x20the\x20gi\
    ven\x20`Service`.\n\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03a\x06\x20\n\x0c\
    \n\x05\x06\0\x02\x07\x02\x12\x03a!B\n\x0c\n\x05\x06\0\x02\x07\x03\x12\
    \x03aMo\n\r\n\x05\x06\0\x02\x07\x04\x12\x04b\x04d\x06\n\x11\n\t\x06\0\
    \x02\x07\x04\xb0\xca\xbc\"\x12\x04b\x04d\x06\n9\n\x04\x06\0\x02\x08\x12\
    \x04h\x02m\x03\x1a+\x20Update\x20the\x20given\x20`ServiceLevelObjective`\
    .\n\n\x0c\n\x05\x06\0\x02\x08\x01\x12\x03h\x06!\n\x0c\n\x05\x06\0\x02\
    \x08\x02\x12\x03h\"D\n\x0c\n\x05\x06\0\x02\x08\x03\x12\x03hOd\n\r\n\x05\
    \x06\0\x02\x08\x04\x12\x04i\x04l\x06\n\x11\n\t\x06\0\x02\x08\x04\xb0\xca\
    \xbc\"\x12\x04i\x04l\x06\n9\n\x04\x06\0\x02\t\x12\x04p\x02t\x03\x1a+\x20\
    Delete\x20the\x20given\x20`ServiceLevelObjective`.\n\n\x0c\n\x05\x06\0\
    \x02\t\x01\x12\x03p\x06!\n\x0c\n\x05\x06\0\x02\t\x02\x12\x03p\"D\n\x0c\n\
    \x05\x06\0\x02\t\x03\x12\x03pOd\n\r\n\x05\x06\0\x02\t\x04\x12\x04q\x04s\
    \x06\n\x11\n\t\x06\0\x02\t\x04\xb0\xca\xbc\"\x12\x04q\x04s\x06\n+\n\x02\
    \x04\0\x12\x05x\0\x83\x01\x01\x1a\x1e\x20The\x20`CreateService`\x20reque\
    st.\n\n\n\n\x03\x04\0\x01\x12\x03x\x08\x1c\n[\n\x04\x04\0\x02\0\x12\x03{\
    \x02\x14\x1aN\x20Resource\x20name\x20of\x20the\x20parent\x20workspace.\n\
    \x20Of\x20the\x20form\x20`projects/{project_id}`.\n\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03{\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03{\t\x0f\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03{\x12\x13\n\x92\x01\n\x04\x04\0\x02\
    \x01\x12\x03\x7f\x02\x18\x1a\x84\x01\x20Optional.\x20The\x20Service\x20i\
    d\x20to\x20use\x20for\x20this\x20Service.\x20If\x20omitted,\x20an\x20id\
    \x20will\x20be\n\x20generated\x20instead.\x20Must\x20match\x20the\x20pat\
    tern\x20[a-z0-9\\-]+\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x7f\x02\x08\
    \n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x7f\t\x13\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x7f\x16\x17\n(\n\x04\x04\0\x02\x02\x12\x04\x82\x01\x02\
    \x16\x1a\x1a\x20The\x20`Service`\x20to\x20create.\n\n\r\n\x05\x04\0\x02\
    \x02\x06\x12\x04\x82\x01\x02\t\n\r\n\x05\x04\0\x02\x02\x01\x12\x04\x82\
    \x01\n\x11\n\r\n\x05\x04\0\x02\x02\x03\x12\x04\x82\x01\x14\x15\n)\n\x02\
    \x04\x01\x12\x06\x86\x01\0\x8a\x01\x01\x1a\x1b\x20The\x20`GetService`\
    \x20request.\n\n\x0b\n\x03\x04\x01\x01\x12\x04\x86\x01\x08\x19\nk\n\x04\
    \x04\x01\x02\0\x12\x04\x89\x01\x02\x12\x1a]\x20Resource\x20name\x20of\
    \x20the\x20`Service`.\n\x20Of\x20the\x20form\x20`projects/{project_id}/s\
    ervices/{service_id}`.\n\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\x89\x01\x02\
    \x08\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\x89\x01\t\r\n\r\n\x05\x04\x01\
    \x02\0\x03\x12\x04\x89\x01\x10\x11\n+\n\x02\x04\x02\x12\x06\x8d\x01\0\
    \xab\x01\x01\x1a\x1d\x20The\x20`ListServices`\x20request.\n\n\x0b\n\x03\
    \x04\x02\x01\x12\x04\x8d\x01\x08\x1b\n^\n\x04\x04\x02\x02\0\x12\x04\x90\
    \x01\x02\x14\x1aP\x20Resource\x20name\x20of\x20the\x20parent\x20`Workspa\
    ce`.\n\x20Of\x20the\x20form\x20`projects/{project_id}`.\n\n\r\n\x05\x04\
    \x02\x02\0\x05\x12\x04\x90\x01\x02\x08\n\r\n\x05\x04\x02\x02\0\x01\x12\
    \x04\x90\x01\t\x0f\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\x90\x01\x12\x13\n\
    \xf7\x04\n\x04\x04\x02\x02\x01\x12\x04\xa1\x01\x02\x14\x1a\xe8\x04\x20A\
    \x20filter\x20specifying\x20what\x20`Service`s\x20to\x20return.\x20The\
    \x20filter\x20currently\n\x20supports\x20the\x20following\x20fields:\n\n\
    \x20\x20\x20\x20\x20-\x20`identifier_case`\n\x20\x20\x20\x20\x20-\x20`ap\
    p_engine.module_id`\n\x20\x20\x20\x20\x20-\x20`cloud_endpoints.service`\
    \n\x20\x20\x20\x20\x20-\x20`cluster_istio.location`\n\x20\x20\x20\x20\
    \x20-\x20`cluster_istio.cluster_name`\n\x20\x20\x20\x20\x20-\x20`cluster\
    _istio.service_namespace`\n\x20\x20\x20\x20\x20-\x20`cluster_istio.servi\
    ce_name`\n\n\x20`identifier_case`\x20refers\x20to\x20which\x20option\x20\
    in\x20the\x20identifier\x20oneof\x20is\n\x20populated.\x20For\x20example\
    ,\x20the\x20filter\x20`identifier_case\x20=\x20\"CUSTOM\"`\x20would\x20m\
    atch\n\x20all\x20services\x20with\x20a\x20value\x20for\x20the\x20`custom\
    `\x20field.\x20Valid\x20options\x20are\n\x20\"CUSTOM\",\x20\"APP_ENGINE\
    \",\x20\"CLOUD_ENDPOINTS\",\x20and\x20\"CLUSTER_ISTIO\".\n\n\r\n\x05\x04\
    \x02\x02\x01\x05\x12\x04\xa1\x01\x02\x08\n\r\n\x05\x04\x02\x02\x01\x01\
    \x12\x04\xa1\x01\t\x0f\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\xa1\x01\x12\
    \x13\nv\n\x04\x04\x02\x02\x02\x12\x04\xa5\x01\x02\x16\x1ah\x20A\x20non-n\
    egative\x20number\x20that\x20is\x20the\x20maximum\x20number\x20of\x20res\
    ults\x20to\x20return.\n\x20When\x200,\x20use\x20default\x20page\x20size.\
    \n\n\r\n\x05\x04\x02\x02\x02\x05\x12\x04\xa5\x01\x02\x07\n\r\n\x05\x04\
    \x02\x02\x02\x01\x12\x04\xa5\x01\x08\x11\n\r\n\x05\x04\x02\x02\x02\x03\
    \x12\x04\xa5\x01\x14\x15\n\xe8\x01\n\x04\x04\x02\x02\x03\x12\x04\xaa\x01\
    \x02\x18\x1a\xd9\x01\x20If\x20this\x20field\x20is\x20not\x20empty\x20the\
    n\x20it\x20must\x20contain\x20the\x20`nextPageToken`\x20value\n\x20retur\
    ned\x20by\x20a\x20previous\x20call\x20to\x20this\x20method.\x20\x20Using\
    \x20this\x20field\x20causes\x20the\n\x20method\x20to\x20return\x20additi\
    onal\x20results\x20from\x20the\x20previous\x20method\x20call.\n\n\r\n\
    \x05\x04\x02\x02\x03\x05\x12\x04\xaa\x01\x02\x08\n\r\n\x05\x04\x02\x02\
    \x03\x01\x12\x04\xaa\x01\t\x13\n\r\n\x05\x04\x02\x02\x03\x03\x12\x04\xaa\
    \x01\x16\x17\n,\n\x02\x04\x03\x12\x06\xae\x01\0\xb6\x01\x01\x1a\x1e\x20T\
    he\x20`ListServices`\x20response.\n\n\x0b\n\x03\x04\x03\x01\x12\x04\xae\
    \x01\x08\x1c\n=\n\x04\x04\x03\x02\0\x12\x04\xb0\x01\x02\x20\x1a/\x20The\
    \x20`Service`s\x20matching\x20the\x20specified\x20filter.\n\n\r\n\x05\
    \x04\x03\x02\0\x04\x12\x04\xb0\x01\x02\n\n\r\n\x05\x04\x03\x02\0\x06\x12\
    \x04\xb0\x01\x0b\x12\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\xb0\x01\x13\x1b\
    \n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xb0\x01\x1e\x1f\n\xd1\x01\n\x04\x04\
    \x03\x02\x01\x12\x04\xb5\x01\x02\x1d\x1a\xc2\x01\x20If\x20there\x20are\
    \x20more\x20results\x20than\x20have\x20been\x20returned,\x20then\x20this\
    \x20field\x20is\x20set\n\x20to\x20a\x20non-empty\x20value.\x20\x20To\x20\
    see\x20the\x20additional\x20results,\n\x20use\x20that\x20value\x20as\x20\
    `pageToken`\x20in\x20the\x20next\x20call\x20to\x20this\x20method.\n\n\r\
    \n\x05\x04\x03\x02\x01\x05\x12\x04\xb5\x01\x02\x08\n\r\n\x05\x04\x03\x02\
    \x01\x01\x12\x04\xb5\x01\t\x18\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\xb5\
    \x01\x1b\x1c\n,\n\x02\x04\x04\x12\x06\xb9\x01\0\xc0\x01\x01\x1a\x1e\x20T\
    he\x20`UpdateService`\x20request.\n\n\x0b\n\x03\x04\x04\x01\x12\x04\xb9\
    \x01\x08\x1c\ng\n\x04\x04\x04\x02\0\x12\x04\xbc\x01\x02\x16\x1aY\x20The\
    \x20`Service`\x20to\x20draw\x20updates\x20from.\n\x20The\x20given\x20`na\
    me`\x20specifies\x20the\x20resource\x20to\x20update.\n\n\r\n\x05\x04\x04\
    \x02\0\x06\x12\x04\xbc\x01\x02\t\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xbc\
    \x01\n\x11\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\xbc\x01\x14\x15\nQ\n\x04\
    \x04\x04\x02\x01\x12\x04\xbf\x01\x02,\x1aC\x20A\x20set\x20of\x20field\
    \x20paths\x20defining\x20which\x20fields\x20to\x20use\x20for\x20the\x20u\
    pdate.\n\n\r\n\x05\x04\x04\x02\x01\x06\x12\x04\xbf\x01\x02\x1b\n\r\n\x05\
    \x04\x04\x02\x01\x01\x12\x04\xbf\x01\x1c'\n\r\n\x05\x04\x04\x02\x01\x03\
    \x12\x04\xbf\x01*+\n,\n\x02\x04\x05\x12\x06\xc3\x01\0\xc7\x01\x01\x1a\
    \x1e\x20The\x20`DeleteService`\x20request.\n\n\x0b\n\x03\x04\x05\x01\x12\
    \x04\xc3\x01\x08\x1c\nt\n\x04\x04\x05\x02\0\x12\x04\xc6\x01\x02\x12\x1af\
    \x20Resource\x20name\x20of\x20the\x20`Service`\x20to\x20delete.\n\x20Of\
    \x20the\x20form\x20`projects/{project_id}/service/{service_id}`.\n\n\r\n\
    \x05\x04\x05\x02\0\x05\x12\x04\xc6\x01\x02\x08\n\r\n\x05\x04\x05\x02\0\
    \x01\x12\x04\xc6\x01\t\r\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xc6\x01\x10\
    \x11\n:\n\x02\x04\x06\x12\x06\xca\x01\0\xd8\x01\x01\x1a,\x20The\x20`Crea\
    teServiceLevelObjective`\x20request.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\
    \xca\x01\x08*\nr\n\x04\x04\x06\x02\0\x12\x04\xcd\x01\x02\x14\x1ad\x20Res\
    ource\x20name\x20of\x20the\x20parent\x20`Service`.\n\x20Of\x20the\x20for\
    m\x20`projects/{project_id}/services/{service_id}`.\n\n\r\n\x05\x04\x06\
    \x02\0\x05\x12\x04\xcd\x01\x02\x08\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\
    \xcd\x01\t\x0f\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xcd\x01\x12\x13\n\xb0\
    \x01\n\x04\x04\x06\x02\x01\x12\x04\xd2\x01\x02(\x1a\xa1\x01\x20Optional.\
    \x20The\x20ServiceLevelObjective\x20id\x20to\x20use\x20for\x20this\n\x20\
    ServiceLevelObjective.\x20If\x20omitted,\x20an\x20id\x20will\x20be\x20ge\
    nerated\x20instead.\x20Must\n\x20match\x20the\x20pattern\x20[a-z0-9\\-]+\
    \n\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\xd2\x01\x02\x08\n\r\n\x05\x04\
    \x06\x02\x01\x01\x12\x04\xd2\x01\t#\n\r\n\x05\x04\x06\x02\x01\x03\x12\
    \x04\xd2\x01&'\n\x94\x01\n\x04\x04\x06\x02\x02\x12\x04\xd7\x01\x024\x1a\
    \x85\x01\x20The\x20`ServiceLevelObjective`\x20to\x20create.\n\x20The\x20\
    provided\x20`name`\x20will\x20be\x20respected\x20if\x20no\x20`ServiceLev\
    elObjective`\x20exists\n\x20with\x20this\x20name.\n\n\r\n\x05\x04\x06\
    \x02\x02\x06\x12\x04\xd7\x01\x02\x17\n\r\n\x05\x04\x06\x02\x02\x01\x12\
    \x04\xd7\x01\x18/\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\xd7\x0123\n7\n\
    \x02\x04\x07\x12\x06\xdb\x01\0\xe6\x01\x01\x1a)\x20The\x20`GetServiceLev\
    elObjective`\x20request.\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xdb\x01\x08'\
    \n\xa4\x01\n\x04\x04\x07\x02\0\x12\x04\xdf\x01\x02\x12\x1a\x95\x01\x20Re\
    source\x20name\x20of\x20the\x20`ServiceLevelObjective`\x20to\x20get.\n\
    \x20Of\x20the\x20form\n\x20`projects/{project_id}/services/{service_id}/\
    serviceLevelObjectives/{slo_name}`.\n\n\r\n\x05\x04\x07\x02\0\x05\x12\
    \x04\xdf\x01\x02\x08\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xdf\x01\t\r\n\r\
    \n\x05\x04\x07\x02\0\x03\x12\x04\xdf\x01\x10\x11\n\xb3\x02\n\x04\x04\x07\
    \x02\x01\x12\x04\xe5\x01\x02&\x1a\xa4\x02\x20View\x20of\x20the\x20`Servi\
    ceLevelObjective`\x20to\x20return.\x20If\x20`DEFAULT`,\x20return\x20the\
    \n\x20`ServiceLevelObjective`\x20as\x20originally\x20defined.\x20If\x20`\
    EXPLICIT`\x20and\x20the\n\x20`ServiceLevelObjective`\x20is\x20defined\
    \x20in\x20terms\x20of\x20a\x20`BasicSli`,\x20replace\x20the\n\x20`BasicS\
    li`\x20with\x20a\x20`RequestBasedSli`\x20spelling\x20out\x20how\x20the\
    \x20SLI\x20is\x20computed.\n\n\r\n\x05\x04\x07\x02\x01\x06\x12\x04\xe5\
    \x01\x02\x1c\n\r\n\x05\x04\x07\x02\x01\x01\x12\x04\xe5\x01\x1d!\n\r\n\
    \x05\x04\x07\x02\x01\x03\x12\x04\xe5\x01$%\n9\n\x02\x04\x08\x12\x06\xe9\
    \x01\0\xff\x01\x01\x1a+\x20The\x20`ListServiceLevelObjectives`\x20reques\
    t.\n\n\x0b\n\x03\x04\x08\x01\x12\x04\xe9\x01\x08)\nr\n\x04\x04\x08\x02\0\
    \x12\x04\xec\x01\x02\x14\x1ad\x20Resource\x20name\x20of\x20the\x20parent\
    \x20`Service`.\n\x20Of\x20the\x20form\x20`projects/{project_id}/services\
    /{service_id}`.\n\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xec\x01\x02\x08\n\
    \r\n\x05\x04\x08\x02\0\x01\x12\x04\xec\x01\t\x0f\n\r\n\x05\x04\x08\x02\0\
    \x03\x12\x04\xec\x01\x12\x13\nL\n\x04\x04\x08\x02\x01\x12\x04\xef\x01\
    \x02\x14\x1a>\x20A\x20filter\x20specifying\x20what\x20`ServiceLevelObjec\
    tive`s\x20to\x20return.\n\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\xef\x01\
    \x02\x08\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\xef\x01\t\x0f\n\r\n\x05\
    \x04\x08\x02\x01\x03\x12\x04\xef\x01\x12\x13\nv\n\x04\x04\x08\x02\x02\
    \x12\x04\xf3\x01\x02\x16\x1ah\x20A\x20non-negative\x20number\x20that\x20\
    is\x20the\x20maximum\x20number\x20of\x20results\x20to\x20return.\n\x20Wh\
    en\x200,\x20use\x20default\x20page\x20size.\n\n\r\n\x05\x04\x08\x02\x02\
    \x05\x12\x04\xf3\x01\x02\x07\n\r\n\x05\x04\x08\x02\x02\x01\x12\x04\xf3\
    \x01\x08\x11\n\r\n\x05\x04\x08\x02\x02\x03\x12\x04\xf3\x01\x14\x15\n\xe8\
    \x01\n\x04\x04\x08\x02\x03\x12\x04\xf8\x01\x02\x18\x1a\xd9\x01\x20If\x20\
    this\x20field\x20is\x20not\x20empty\x20then\x20it\x20must\x20contain\x20\
    the\x20`nextPageToken`\x20value\n\x20returned\x20by\x20a\x20previous\x20\
    call\x20to\x20this\x20method.\x20\x20Using\x20this\x20field\x20causes\
    \x20the\n\x20method\x20to\x20return\x20additional\x20results\x20from\x20\
    the\x20previous\x20method\x20call.\n\n\r\n\x05\x04\x08\x02\x03\x05\x12\
    \x04\xf8\x01\x02\x08\n\r\n\x05\x04\x08\x02\x03\x01\x12\x04\xf8\x01\t\x13\
    \n\r\n\x05\x04\x08\x02\x03\x03\x12\x04\xf8\x01\x16\x17\n\xb5\x02\n\x04\
    \x04\x08\x02\x04\x12\x04\xfe\x01\x02&\x1a\xa6\x02\x20View\x20of\x20the\
    \x20`ServiceLevelObjective`s\x20to\x20return.\x20If\x20`DEFAULT`,\x20ret\
    urn\x20each\n\x20`ServiceLevelObjective`\x20as\x20originally\x20defined.\
    \x20If\x20`EXPLICIT`\x20and\x20the\n\x20`ServiceLevelObjective`\x20is\
    \x20defined\x20in\x20terms\x20of\x20a\x20`BasicSli`,\x20replace\x20the\n\
    \x20`BasicSli`\x20with\x20a\x20`RequestBasedSli`\x20spelling\x20out\x20h\
    ow\x20the\x20SLI\x20is\x20computed.\n\n\r\n\x05\x04\x08\x02\x04\x06\x12\
    \x04\xfe\x01\x02\x1c\n\r\n\x05\x04\x08\x02\x04\x01\x12\x04\xfe\x01\x1d!\
    \n\r\n\x05\x04\x08\x02\x04\x03\x12\x04\xfe\x01$%\n:\n\x02\x04\t\x12\x06\
    \x82\x02\0\x8a\x02\x01\x1a,\x20The\x20`ListServiceLevelObjectives`\x20re\
    sponse.\n\n\x0b\n\x03\x04\t\x01\x12\x04\x82\x02\x08*\nK\n\x04\x04\t\x02\
    \0\x12\x04\x84\x02\x02>\x1a=\x20The\x20`ServiceLevelObjective`s\x20match\
    ing\x20the\x20specified\x20filter.\n\n\r\n\x05\x04\t\x02\0\x04\x12\x04\
    \x84\x02\x02\n\n\r\n\x05\x04\t\x02\0\x06\x12\x04\x84\x02\x0b\x20\n\r\n\
    \x05\x04\t\x02\0\x01\x12\x04\x84\x02!9\n\r\n\x05\x04\t\x02\0\x03\x12\x04\
    \x84\x02<=\n\xd1\x01\n\x04\x04\t\x02\x01\x12\x04\x89\x02\x02\x1d\x1a\xc2\
    \x01\x20If\x20there\x20are\x20more\x20results\x20than\x20have\x20been\
    \x20returned,\x20then\x20this\x20field\x20is\x20set\n\x20to\x20a\x20non-\
    empty\x20value.\x20\x20To\x20see\x20the\x20additional\x20results,\n\x20u\
    se\x20that\x20value\x20as\x20`pageToken`\x20in\x20the\x20next\x20call\
    \x20to\x20this\x20method.\n\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\x89\x02\
    \x02\x08\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\x89\x02\t\x18\n\r\n\x05\x04\
    \t\x02\x01\x03\x12\x04\x89\x02\x1b\x1c\n:\n\x02\x04\n\x12\x06\x8d\x02\0\
    \x94\x02\x01\x1a,\x20The\x20`UpdateServiceLevelObjective`\x20request.\n\
    \n\x0b\n\x03\x04\n\x01\x12\x04\x8d\x02\x08*\nu\n\x04\x04\n\x02\0\x12\x04\
    \x90\x02\x024\x1ag\x20The\x20`ServiceLevelObjective`\x20to\x20draw\x20up\
    dates\x20from.\n\x20The\x20given\x20`name`\x20specifies\x20the\x20resour\
    ce\x20to\x20update.\n\n\r\n\x05\x04\n\x02\0\x06\x12\x04\x90\x02\x02\x17\
    \n\r\n\x05\x04\n\x02\0\x01\x12\x04\x90\x02\x18/\n\r\n\x05\x04\n\x02\0\
    \x03\x12\x04\x90\x0223\nQ\n\x04\x04\n\x02\x01\x12\x04\x93\x02\x02,\x1aC\
    \x20A\x20set\x20of\x20field\x20paths\x20defining\x20which\x20fields\x20t\
    o\x20use\x20for\x20the\x20update.\n\n\r\n\x05\x04\n\x02\x01\x06\x12\x04\
    \x93\x02\x02\x1b\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\x93\x02\x1c'\n\r\n\
    \x05\x04\n\x02\x01\x03\x12\x04\x93\x02*+\n:\n\x02\x04\x0b\x12\x06\x97\
    \x02\0\x9c\x02\x01\x1a,\x20The\x20`DeleteServiceLevelObjective`\x20reque\
    st.\n\n\x0b\n\x03\x04\x0b\x01\x12\x04\x97\x02\x08*\n\xa7\x01\n\x04\x04\
    \x0b\x02\0\x12\x04\x9b\x02\x02\x12\x1a\x98\x01\x20Resource\x20name\x20of\
    \x20the\x20`ServiceLevelObjective`\x20to\x20delete.\n\x20Of\x20the\x20fo\
    rm\n\x20`projects/{project_id}/services/{service_id}/serviceLevelObjecti\
    ves/{slo_name}`.\n\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\x9b\x02\x02\x08\n\
    \r\n\x05\x04\x0b\x02\0\x01\x12\x04\x9b\x02\t\r\n\r\n\x05\x04\x0b\x02\0\
    \x03\x12\x04\x9b\x02\x10\x11b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
