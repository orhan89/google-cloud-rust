// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/monitoring/v3/group.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Group {
    // message fields
    pub name: ::std::string::String,
    pub display_name: ::std::string::String,
    pub parent_name: ::std::string::String,
    pub filter: ::std::string::String,
    pub is_cluster: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Group {
    fn default() -> &'a Group {
        <Group as ::protobuf::Message>::default_instance()
    }
}

impl Group {
    pub fn new() -> Group {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string display_name = 2;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // string parent_name = 3;


    pub fn get_parent_name(&self) -> &str {
        &self.parent_name
    }
    pub fn clear_parent_name(&mut self) {
        self.parent_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent_name(&mut self, v: ::std::string::String) {
        self.parent_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent_name(&mut self) -> &mut ::std::string::String {
        &mut self.parent_name
    }

    // Take field
    pub fn take_parent_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent_name, ::std::string::String::new())
    }

    // string filter = 5;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // bool is_cluster = 6;


    pub fn get_is_cluster(&self) -> bool {
        self.is_cluster
    }
    pub fn clear_is_cluster(&mut self) {
        self.is_cluster = false;
    }

    // Param is passed by value, moved
    pub fn set_is_cluster(&mut self, v: bool) {
        self.is_cluster = v;
    }
}

impl ::protobuf::Message for Group {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent_name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_cluster = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.display_name);
        }
        if !self.parent_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.parent_name);
        }
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.filter);
        }
        if self.is_cluster != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(2, &self.display_name)?;
        }
        if !self.parent_name.is_empty() {
            os.write_string(3, &self.parent_name)?;
        }
        if !self.filter.is_empty() {
            os.write_string(5, &self.filter)?;
        }
        if self.is_cluster != false {
            os.write_bool(6, self.is_cluster)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Group {
        Group::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Group| { &m.name },
                |m: &mut Group| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &Group| { &m.display_name },
                |m: &mut Group| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent_name",
                |m: &Group| { &m.parent_name },
                |m: &mut Group| { &mut m.parent_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &Group| { &m.filter },
                |m: &mut Group| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_cluster",
                |m: &Group| { &m.is_cluster },
                |m: &mut Group| { &mut m.is_cluster },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Group>(
                "Group",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Group {
        static instance: ::protobuf::rt::LazyV2<Group> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Group::new)
    }
}

impl ::protobuf::Clear for Group {
    fn clear(&mut self) {
        self.name.clear();
        self.display_name.clear();
        self.parent_name.clear();
        self.filter.clear();
        self.is_cluster = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Group {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Group {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20google/monitoring/v3/group.proto\x12\x14google.monitoring.v3\"\x96\
    \x01\n\x05Group\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12!\n\x0c\
    display_name\x18\x02\x20\x01(\tR\x0bdisplayName\x12\x1f\n\x0bparent_name\
    \x18\x03\x20\x01(\tR\nparentName\x12\x16\n\x06filter\x18\x05\x20\x01(\tR\
    \x06filter\x12\x1d\n\nis_cluster\x18\x06\x20\x01(\x08R\tisClusterB\xa2\
    \x01\n\x18com.google.monitoring.v3B\nGroupProtoP\x01Z>google.golang.org/\
    genproto/googleapis/monitoring/v3;monitoring\xaa\x02\x1aGoogle.Cloud.Mon\
    itoring.V3\xca\x02\x1aGoogle\\Cloud\\Monitoring\\V3J\x80\x1a\n\x06\x12\
    \x04\x0f\0K\x01\n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyri\
    ght\x202019\x20Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\
    \x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\
    \x20not\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20\
    the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20L\
    icense\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICEN\
    SE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agr\
    eed\x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\
    \x1d\n\x08\n\x01\x08\x12\x03\x13\07\n\t\n\x02\x08%\x12\x03\x13\07\n\x08\
    \n\x01\x08\x12\x03\x14\0U\n\t\n\x02\x08\x0b\x12\x03\x14\0U\n\x08\n\x01\
    \x08\x12\x03\x15\0\"\n\t\n\x02\x08\n\x12\x03\x15\0\"\n\x08\n\x01\x08\x12\
    \x03\x16\0+\n\t\n\x02\x08\x08\x12\x03\x16\0+\n\x08\n\x01\x08\x12\x03\x17\
    \01\n\t\n\x02\x08\x01\x12\x03\x17\01\n\x08\n\x01\x08\x12\x03\x18\07\n\t\
    \n\x02\x08)\x12\x03\x18\07\n\xef\x0b\n\x02\x04\0\x12\x044\0K\x01\x1a\xe2\
    \x0b\x20The\x20description\x20of\x20a\x20dynamic\x20collection\x20of\x20\
    monitored\x20resources.\x20Each\x20group\n\x20has\x20a\x20filter\x20that\
    \x20is\x20matched\x20against\x20monitored\x20resources\x20and\x20their\
    \x20associated\n\x20metadata.\x20If\x20a\x20group's\x20filter\x20matches\
    \x20an\x20available\x20monitored\x20resource,\x20then\n\x20that\x20resou\
    rce\x20is\x20a\x20member\x20of\x20that\x20group.\x20\x20Groups\x20can\
    \x20contain\x20any\x20number\x20of\n\x20monitored\x20resources,\x20and\
    \x20each\x20monitored\x20resource\x20can\x20be\x20a\x20member\x20of\x20a\
    ny\n\x20number\x20of\x20groups.\n\n\x20Groups\x20can\x20be\x20nested\x20\
    in\x20parent-child\x20hierarchies.\x20The\x20`parentName`\x20field\n\x20\
    identifies\x20an\x20optional\x20parent\x20for\x20each\x20group.\x20\x20I\
    f\x20a\x20group\x20has\x20a\x20parent,\x20then\n\x20the\x20only\x20monit\
    ored\x20resources\x20available\x20to\x20be\x20matched\x20by\x20the\x20gr\
    oup's\x20filter\n\x20are\x20the\x20resources\x20contained\x20in\x20the\
    \x20parent\x20group.\x20\x20In\x20other\x20words,\x20a\x20group\n\x20con\
    tains\x20the\x20monitored\x20resources\x20that\x20match\x20its\x20filter\
    \x20and\x20the\x20filters\x20of\x20all\n\x20the\x20group's\x20ancestors.\
    \x20\x20A\x20group\x20without\x20a\x20parent\x20can\x20contain\x20any\
    \x20monitored\n\x20resource.\n\n\x20For\x20example,\x20consider\x20an\
    \x20infrastructure\x20running\x20a\x20set\x20of\x20instances\x20with\x20\
    two\n\x20user-defined\x20tags:\x20`\"environment\"`\x20and\x20`\"role\"`\
    .\x20A\x20parent\x20group\x20has\x20a\x20filter,\n\x20`environment=\"pro\
    duction\"`.\x20\x20A\x20child\x20of\x20that\x20parent\x20group\x20has\
    \x20a\x20filter,\n\x20`role=\"transcoder\"`.\x20\x20The\x20parent\x20gro\
    up\x20contains\x20all\x20instances\x20in\x20the\n\x20production\x20envir\
    onment,\x20regardless\x20of\x20their\x20roles.\x20\x20The\x20child\x20gr\
    oup\x20contains\n\x20instances\x20that\x20have\x20the\x20transcoder\x20r\
    ole\x20*and*\x20are\x20in\x20the\x20production\n\x20environment.\n\n\x20\
    The\x20monitored\x20resources\x20contained\x20in\x20a\x20group\x20can\
    \x20change\x20at\x20any\x20moment,\n\x20depending\x20on\x20what\x20resou\
    rces\x20exist\x20and\x20what\x20filters\x20are\x20associated\x20with\x20\
    the\n\x20group\x20and\x20its\x20ancestors.\n\n\n\n\x03\x04\0\x01\x12\x03\
    4\x08\r\n\xc0\x02\n\x04\x04\0\x02\0\x12\x03:\x02\x12\x1a\xb2\x02\x20Outp\
    ut\x20only.\x20The\x20name\x20of\x20this\x20group.\x20The\x20format\x20i\
    s\n\x20`\"projects/{project_id_or_number}/groups/{group_id}\"`.\n\x20Whe\
    n\x20creating\x20a\x20group,\x20this\x20field\x20is\x20ignored\x20and\
    \x20a\x20new\x20name\x20is\x20created\n\x20consisting\x20of\x20the\x20pr\
    oject\x20specified\x20in\x20the\x20call\x20to\x20`CreateGroup`\n\x20and\
    \x20a\x20unique\x20`{group_id}`\x20that\x20is\x20generated\x20automatica\
    lly.\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03:\x02\x08\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03:\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03:\x10\x11\nS\
    \n\x04\x04\0\x02\x01\x12\x03=\x02\x1a\x1aF\x20A\x20user-assigned\x20name\
    \x20for\x20this\x20group,\x20used\x20only\x20for\x20display\x20purposes.\
    \n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03=\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03=\t\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03=\x18\x19\n\
    \xc8\x01\n\x04\x04\0\x02\x02\x12\x03B\x02\x19\x1a\xba\x01\x20The\x20name\
    \x20of\x20the\x20group's\x20parent,\x20if\x20it\x20has\x20one.\n\x20The\
    \x20format\x20is\x20`\"projects/{project_id_or_number}/groups/{group_id}\
    \"`.\n\x20For\x20groups\x20with\x20no\x20parent,\x20`parentName`\x20is\
    \x20the\x20empty\x20string,\x20`\"\"`.\n\n\x0c\n\x05\x04\0\x02\x02\x05\
    \x12\x03B\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03B\t\x14\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03B\x17\x18\n\\\n\x04\x04\0\x02\x03\x12\x03F\
    \x02\x14\x1aO\x20The\x20filter\x20used\x20to\x20determine\x20which\x20mo\
    nitored\x20resources\x20belong\x20to\x20this\n\x20group.\n\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03F\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03F\t\x0f\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03F\x12\x13\n\x9b\x01\n\
    \x04\x04\0\x02\x04\x12\x03J\x02\x16\x1a\x8d\x01\x20If\x20true,\x20the\
    \x20members\x20of\x20this\x20group\x20are\x20considered\x20to\x20be\x20a\
    \x20cluster.\n\x20The\x20system\x20can\x20perform\x20additional\x20analy\
    sis\x20on\x20groups\x20that\x20are\x20clusters.\n\n\x0c\n\x05\x04\0\x02\
    \x04\x05\x12\x03J\x02\x06\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03J\x07\x11\
    \n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03J\x14\x15b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
