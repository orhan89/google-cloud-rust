// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/monitoring/v3/uptime.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct InternalChecker {
    // message fields
    pub name: ::std::string::String,
    pub display_name: ::std::string::String,
    pub network: ::std::string::String,
    pub gcp_zone: ::std::string::String,
    pub peer_project_id: ::std::string::String,
    pub state: InternalChecker_State,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InternalChecker {
    fn default() -> &'a InternalChecker {
        <InternalChecker as ::protobuf::Message>::default_instance()
    }
}

impl InternalChecker {
    pub fn new() -> InternalChecker {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string display_name = 2;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // string network = 3;


    pub fn get_network(&self) -> &str {
        &self.network
    }
    pub fn clear_network(&mut self) {
        self.network.clear();
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: ::std::string::String) {
        self.network = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network(&mut self) -> &mut ::std::string::String {
        &mut self.network
    }

    // Take field
    pub fn take_network(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.network, ::std::string::String::new())
    }

    // string gcp_zone = 4;


    pub fn get_gcp_zone(&self) -> &str {
        &self.gcp_zone
    }
    pub fn clear_gcp_zone(&mut self) {
        self.gcp_zone.clear();
    }

    // Param is passed by value, moved
    pub fn set_gcp_zone(&mut self, v: ::std::string::String) {
        self.gcp_zone = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gcp_zone(&mut self) -> &mut ::std::string::String {
        &mut self.gcp_zone
    }

    // Take field
    pub fn take_gcp_zone(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gcp_zone, ::std::string::String::new())
    }

    // string peer_project_id = 6;


    pub fn get_peer_project_id(&self) -> &str {
        &self.peer_project_id
    }
    pub fn clear_peer_project_id(&mut self) {
        self.peer_project_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_peer_project_id(&mut self, v: ::std::string::String) {
        self.peer_project_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_project_id(&mut self) -> &mut ::std::string::String {
        &mut self.peer_project_id
    }

    // Take field
    pub fn take_peer_project_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.peer_project_id, ::std::string::String::new())
    }

    // .google.monitoring.v3.InternalChecker.State state = 7;


    pub fn get_state(&self) -> InternalChecker_State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = InternalChecker_State::UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: InternalChecker_State) {
        self.state = v;
    }
}

impl ::protobuf::Message for InternalChecker {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.network)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gcp_zone)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.peer_project_id)?;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 7, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.display_name);
        }
        if !self.network.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.network);
        }
        if !self.gcp_zone.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.gcp_zone);
        }
        if !self.peer_project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.peer_project_id);
        }
        if self.state != InternalChecker_State::UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(7, self.state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(2, &self.display_name)?;
        }
        if !self.network.is_empty() {
            os.write_string(3, &self.network)?;
        }
        if !self.gcp_zone.is_empty() {
            os.write_string(4, &self.gcp_zone)?;
        }
        if !self.peer_project_id.is_empty() {
            os.write_string(6, &self.peer_project_id)?;
        }
        if self.state != InternalChecker_State::UNSPECIFIED {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InternalChecker {
        InternalChecker::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &InternalChecker| { &m.name },
                |m: &mut InternalChecker| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &InternalChecker| { &m.display_name },
                |m: &mut InternalChecker| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "network",
                |m: &InternalChecker| { &m.network },
                |m: &mut InternalChecker| { &mut m.network },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gcp_zone",
                |m: &InternalChecker| { &m.gcp_zone },
                |m: &mut InternalChecker| { &mut m.gcp_zone },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "peer_project_id",
                |m: &InternalChecker| { &m.peer_project_id },
                |m: &mut InternalChecker| { &mut m.peer_project_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<InternalChecker_State>>(
                "state",
                |m: &InternalChecker| { &m.state },
                |m: &mut InternalChecker| { &mut m.state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InternalChecker>(
                "InternalChecker",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InternalChecker {
        static instance: ::protobuf::rt::LazyV2<InternalChecker> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InternalChecker::new)
    }
}

impl ::protobuf::Clear for InternalChecker {
    fn clear(&mut self) {
        self.name.clear();
        self.display_name.clear();
        self.network.clear();
        self.gcp_zone.clear();
        self.peer_project_id.clear();
        self.state = InternalChecker_State::UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InternalChecker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InternalChecker {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum InternalChecker_State {
    UNSPECIFIED = 0,
    CREATING = 1,
    RUNNING = 2,
}

impl ::protobuf::ProtobufEnum for InternalChecker_State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<InternalChecker_State> {
        match value {
            0 => ::std::option::Option::Some(InternalChecker_State::UNSPECIFIED),
            1 => ::std::option::Option::Some(InternalChecker_State::CREATING),
            2 => ::std::option::Option::Some(InternalChecker_State::RUNNING),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [InternalChecker_State] = &[
            InternalChecker_State::UNSPECIFIED,
            InternalChecker_State::CREATING,
            InternalChecker_State::RUNNING,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<InternalChecker_State>("InternalChecker.State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for InternalChecker_State {
}

impl ::std::default::Default for InternalChecker_State {
    fn default() -> Self {
        InternalChecker_State::UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for InternalChecker_State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UptimeCheckConfig {
    // message fields
    pub name: ::std::string::String,
    pub display_name: ::std::string::String,
    pub period: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub content_matchers: ::protobuf::RepeatedField<UptimeCheckConfig_ContentMatcher>,
    pub selected_regions: ::std::vec::Vec<UptimeCheckRegion>,
    pub is_internal: bool,
    pub internal_checkers: ::protobuf::RepeatedField<InternalChecker>,
    // message oneof groups
    pub resource: ::std::option::Option<UptimeCheckConfig_oneof_resource>,
    pub check_request_type: ::std::option::Option<UptimeCheckConfig_oneof_check_request_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UptimeCheckConfig {
    fn default() -> &'a UptimeCheckConfig {
        <UptimeCheckConfig as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum UptimeCheckConfig_oneof_resource {
    monitored_resource(super::monitored_resource::MonitoredResource),
    resource_group(UptimeCheckConfig_ResourceGroup),
}

#[derive(Clone,PartialEq,Debug)]
pub enum UptimeCheckConfig_oneof_check_request_type {
    http_check(UptimeCheckConfig_HttpCheck),
    tcp_check(UptimeCheckConfig_TcpCheck),
}

impl UptimeCheckConfig {
    pub fn new() -> UptimeCheckConfig {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string display_name = 2;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // .google.api.MonitoredResource monitored_resource = 3;


    pub fn get_monitored_resource(&self) -> &super::monitored_resource::MonitoredResource {
        match self.resource {
            ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::monitored_resource(ref v)) => v,
            _ => <super::monitored_resource::MonitoredResource as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_monitored_resource(&mut self) {
        self.resource = ::std::option::Option::None;
    }

    pub fn has_monitored_resource(&self) -> bool {
        match self.resource {
            ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::monitored_resource(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_monitored_resource(&mut self, v: super::monitored_resource::MonitoredResource) {
        self.resource = ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::monitored_resource(v))
    }

    // Mutable pointer to the field.
    pub fn mut_monitored_resource(&mut self) -> &mut super::monitored_resource::MonitoredResource {
        if let ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::monitored_resource(_)) = self.resource {
        } else {
            self.resource = ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::monitored_resource(super::monitored_resource::MonitoredResource::new()));
        }
        match self.resource {
            ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::monitored_resource(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_monitored_resource(&mut self) -> super::monitored_resource::MonitoredResource {
        if self.has_monitored_resource() {
            match self.resource.take() {
                ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::monitored_resource(v)) => v,
                _ => panic!(),
            }
        } else {
            super::monitored_resource::MonitoredResource::new()
        }
    }

    // .google.monitoring.v3.UptimeCheckConfig.ResourceGroup resource_group = 4;


    pub fn get_resource_group(&self) -> &UptimeCheckConfig_ResourceGroup {
        match self.resource {
            ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::resource_group(ref v)) => v,
            _ => <UptimeCheckConfig_ResourceGroup as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_resource_group(&mut self) {
        self.resource = ::std::option::Option::None;
    }

    pub fn has_resource_group(&self) -> bool {
        match self.resource {
            ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::resource_group(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_resource_group(&mut self, v: UptimeCheckConfig_ResourceGroup) {
        self.resource = ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::resource_group(v))
    }

    // Mutable pointer to the field.
    pub fn mut_resource_group(&mut self) -> &mut UptimeCheckConfig_ResourceGroup {
        if let ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::resource_group(_)) = self.resource {
        } else {
            self.resource = ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::resource_group(UptimeCheckConfig_ResourceGroup::new()));
        }
        match self.resource {
            ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::resource_group(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_resource_group(&mut self) -> UptimeCheckConfig_ResourceGroup {
        if self.has_resource_group() {
            match self.resource.take() {
                ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::resource_group(v)) => v,
                _ => panic!(),
            }
        } else {
            UptimeCheckConfig_ResourceGroup::new()
        }
    }

    // .google.monitoring.v3.UptimeCheckConfig.HttpCheck http_check = 5;


    pub fn get_http_check(&self) -> &UptimeCheckConfig_HttpCheck {
        match self.check_request_type {
            ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::http_check(ref v)) => v,
            _ => <UptimeCheckConfig_HttpCheck as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_check(&mut self) {
        self.check_request_type = ::std::option::Option::None;
    }

    pub fn has_http_check(&self) -> bool {
        match self.check_request_type {
            ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::http_check(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_check(&mut self, v: UptimeCheckConfig_HttpCheck) {
        self.check_request_type = ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::http_check(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_check(&mut self) -> &mut UptimeCheckConfig_HttpCheck {
        if let ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::http_check(_)) = self.check_request_type {
        } else {
            self.check_request_type = ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::http_check(UptimeCheckConfig_HttpCheck::new()));
        }
        match self.check_request_type {
            ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::http_check(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_check(&mut self) -> UptimeCheckConfig_HttpCheck {
        if self.has_http_check() {
            match self.check_request_type.take() {
                ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::http_check(v)) => v,
                _ => panic!(),
            }
        } else {
            UptimeCheckConfig_HttpCheck::new()
        }
    }

    // .google.monitoring.v3.UptimeCheckConfig.TcpCheck tcp_check = 6;


    pub fn get_tcp_check(&self) -> &UptimeCheckConfig_TcpCheck {
        match self.check_request_type {
            ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::tcp_check(ref v)) => v,
            _ => <UptimeCheckConfig_TcpCheck as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_tcp_check(&mut self) {
        self.check_request_type = ::std::option::Option::None;
    }

    pub fn has_tcp_check(&self) -> bool {
        match self.check_request_type {
            ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::tcp_check(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tcp_check(&mut self, v: UptimeCheckConfig_TcpCheck) {
        self.check_request_type = ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::tcp_check(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tcp_check(&mut self) -> &mut UptimeCheckConfig_TcpCheck {
        if let ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::tcp_check(_)) = self.check_request_type {
        } else {
            self.check_request_type = ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::tcp_check(UptimeCheckConfig_TcpCheck::new()));
        }
        match self.check_request_type {
            ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::tcp_check(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tcp_check(&mut self) -> UptimeCheckConfig_TcpCheck {
        if self.has_tcp_check() {
            match self.check_request_type.take() {
                ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::tcp_check(v)) => v,
                _ => panic!(),
            }
        } else {
            UptimeCheckConfig_TcpCheck::new()
        }
    }

    // .google.protobuf.Duration period = 7;


    pub fn get_period(&self) -> &::protobuf::well_known_types::Duration {
        self.period.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_period(&mut self) {
        self.period.clear();
    }

    pub fn has_period(&self) -> bool {
        self.period.is_some()
    }

    // Param is passed by value, moved
    pub fn set_period(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.period = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_period(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.period.is_none() {
            self.period.set_default();
        }
        self.period.as_mut().unwrap()
    }

    // Take field
    pub fn take_period(&mut self) -> ::protobuf::well_known_types::Duration {
        self.period.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration timeout = 8;


    pub fn get_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timeout(&mut self) {
        self.timeout.clear();
    }

    pub fn has_timeout(&self) -> bool {
        self.timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.timeout.is_none() {
            self.timeout.set_default();
        }
        self.timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // repeated .google.monitoring.v3.UptimeCheckConfig.ContentMatcher content_matchers = 9;


    pub fn get_content_matchers(&self) -> &[UptimeCheckConfig_ContentMatcher] {
        &self.content_matchers
    }
    pub fn clear_content_matchers(&mut self) {
        self.content_matchers.clear();
    }

    // Param is passed by value, moved
    pub fn set_content_matchers(&mut self, v: ::protobuf::RepeatedField<UptimeCheckConfig_ContentMatcher>) {
        self.content_matchers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_content_matchers(&mut self) -> &mut ::protobuf::RepeatedField<UptimeCheckConfig_ContentMatcher> {
        &mut self.content_matchers
    }

    // Take field
    pub fn take_content_matchers(&mut self) -> ::protobuf::RepeatedField<UptimeCheckConfig_ContentMatcher> {
        ::std::mem::replace(&mut self.content_matchers, ::protobuf::RepeatedField::new())
    }

    // repeated .google.monitoring.v3.UptimeCheckRegion selected_regions = 10;


    pub fn get_selected_regions(&self) -> &[UptimeCheckRegion] {
        &self.selected_regions
    }
    pub fn clear_selected_regions(&mut self) {
        self.selected_regions.clear();
    }

    // Param is passed by value, moved
    pub fn set_selected_regions(&mut self, v: ::std::vec::Vec<UptimeCheckRegion>) {
        self.selected_regions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_selected_regions(&mut self) -> &mut ::std::vec::Vec<UptimeCheckRegion> {
        &mut self.selected_regions
    }

    // Take field
    pub fn take_selected_regions(&mut self) -> ::std::vec::Vec<UptimeCheckRegion> {
        ::std::mem::replace(&mut self.selected_regions, ::std::vec::Vec::new())
    }

    // bool is_internal = 15;


    pub fn get_is_internal(&self) -> bool {
        self.is_internal
    }
    pub fn clear_is_internal(&mut self) {
        self.is_internal = false;
    }

    // Param is passed by value, moved
    pub fn set_is_internal(&mut self, v: bool) {
        self.is_internal = v;
    }

    // repeated .google.monitoring.v3.InternalChecker internal_checkers = 14;


    pub fn get_internal_checkers(&self) -> &[InternalChecker] {
        &self.internal_checkers
    }
    pub fn clear_internal_checkers(&mut self) {
        self.internal_checkers.clear();
    }

    // Param is passed by value, moved
    pub fn set_internal_checkers(&mut self, v: ::protobuf::RepeatedField<InternalChecker>) {
        self.internal_checkers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_internal_checkers(&mut self) -> &mut ::protobuf::RepeatedField<InternalChecker> {
        &mut self.internal_checkers
    }

    // Take field
    pub fn take_internal_checkers(&mut self) -> ::protobuf::RepeatedField<InternalChecker> {
        ::std::mem::replace(&mut self.internal_checkers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for UptimeCheckConfig {
    fn is_initialized(&self) -> bool {
        if let Some(UptimeCheckConfig_oneof_resource::monitored_resource(ref v)) = self.resource {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(UptimeCheckConfig_oneof_resource::resource_group(ref v)) = self.resource {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(UptimeCheckConfig_oneof_check_request_type::http_check(ref v)) = self.check_request_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(UptimeCheckConfig_oneof_check_request_type::tcp_check(ref v)) = self.check_request_type {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.period {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.content_matchers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.internal_checkers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.resource = ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::monitored_resource(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.resource = ::std::option::Option::Some(UptimeCheckConfig_oneof_resource::resource_group(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.check_request_type = ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::http_check(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.check_request_type = ::std::option::Option::Some(UptimeCheckConfig_oneof_check_request_type::tcp_check(is.read_message()?));
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.period)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timeout)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.content_matchers)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.selected_regions, 10, &mut self.unknown_fields)?
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_internal = tmp;
                },
                14 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.internal_checkers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.display_name);
        }
        if let Some(ref v) = self.period.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.content_matchers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.selected_regions {
            my_size += ::protobuf::rt::enum_size(10, *value);
        };
        if self.is_internal != false {
            my_size += 2;
        }
        for value in &self.internal_checkers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.resource {
            match v {
                &UptimeCheckConfig_oneof_resource::monitored_resource(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &UptimeCheckConfig_oneof_resource::resource_group(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.check_request_type {
            match v {
                &UptimeCheckConfig_oneof_check_request_type::http_check(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &UptimeCheckConfig_oneof_check_request_type::tcp_check(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(2, &self.display_name)?;
        }
        if let Some(ref v) = self.period.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.timeout.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.content_matchers {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.selected_regions {
            os.write_enum(10, ::protobuf::ProtobufEnum::value(v))?;
        };
        if self.is_internal != false {
            os.write_bool(15, self.is_internal)?;
        }
        for v in &self.internal_checkers {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.resource {
            match v {
                &UptimeCheckConfig_oneof_resource::monitored_resource(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &UptimeCheckConfig_oneof_resource::resource_group(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.check_request_type {
            match v {
                &UptimeCheckConfig_oneof_check_request_type::http_check(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &UptimeCheckConfig_oneof_check_request_type::tcp_check(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UptimeCheckConfig {
        UptimeCheckConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &UptimeCheckConfig| { &m.name },
                |m: &mut UptimeCheckConfig| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &UptimeCheckConfig| { &m.display_name },
                |m: &mut UptimeCheckConfig| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::monitored_resource::MonitoredResource>(
                "monitored_resource",
                UptimeCheckConfig::has_monitored_resource,
                UptimeCheckConfig::get_monitored_resource,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, UptimeCheckConfig_ResourceGroup>(
                "resource_group",
                UptimeCheckConfig::has_resource_group,
                UptimeCheckConfig::get_resource_group,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, UptimeCheckConfig_HttpCheck>(
                "http_check",
                UptimeCheckConfig::has_http_check,
                UptimeCheckConfig::get_http_check,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, UptimeCheckConfig_TcpCheck>(
                "tcp_check",
                UptimeCheckConfig::has_tcp_check,
                UptimeCheckConfig::get_tcp_check,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "period",
                |m: &UptimeCheckConfig| { &m.period },
                |m: &mut UptimeCheckConfig| { &mut m.period },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "timeout",
                |m: &UptimeCheckConfig| { &m.timeout },
                |m: &mut UptimeCheckConfig| { &mut m.timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UptimeCheckConfig_ContentMatcher>>(
                "content_matchers",
                |m: &UptimeCheckConfig| { &m.content_matchers },
                |m: &mut UptimeCheckConfig| { &mut m.content_matchers },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<UptimeCheckRegion>>(
                "selected_regions",
                |m: &UptimeCheckConfig| { &m.selected_regions },
                |m: &mut UptimeCheckConfig| { &mut m.selected_regions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_internal",
                |m: &UptimeCheckConfig| { &m.is_internal },
                |m: &mut UptimeCheckConfig| { &mut m.is_internal },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InternalChecker>>(
                "internal_checkers",
                |m: &UptimeCheckConfig| { &m.internal_checkers },
                |m: &mut UptimeCheckConfig| { &mut m.internal_checkers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UptimeCheckConfig>(
                "UptimeCheckConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UptimeCheckConfig {
        static instance: ::protobuf::rt::LazyV2<UptimeCheckConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UptimeCheckConfig::new)
    }
}

impl ::protobuf::Clear for UptimeCheckConfig {
    fn clear(&mut self) {
        self.name.clear();
        self.display_name.clear();
        self.resource = ::std::option::Option::None;
        self.resource = ::std::option::Option::None;
        self.check_request_type = ::std::option::Option::None;
        self.check_request_type = ::std::option::Option::None;
        self.period.clear();
        self.timeout.clear();
        self.content_matchers.clear();
        self.selected_regions.clear();
        self.is_internal = false;
        self.internal_checkers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UptimeCheckConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UptimeCheckConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UptimeCheckConfig_ResourceGroup {
    // message fields
    pub group_id: ::std::string::String,
    pub resource_type: GroupResourceType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UptimeCheckConfig_ResourceGroup {
    fn default() -> &'a UptimeCheckConfig_ResourceGroup {
        <UptimeCheckConfig_ResourceGroup as ::protobuf::Message>::default_instance()
    }
}

impl UptimeCheckConfig_ResourceGroup {
    pub fn new() -> UptimeCheckConfig_ResourceGroup {
        ::std::default::Default::default()
    }

    // string group_id = 1;


    pub fn get_group_id(&self) -> &str {
        &self.group_id
    }
    pub fn clear_group_id(&mut self) {
        self.group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: ::std::string::String) {
        self.group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group_id(&mut self) -> &mut ::std::string::String {
        &mut self.group_id
    }

    // Take field
    pub fn take_group_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group_id, ::std::string::String::new())
    }

    // .google.monitoring.v3.GroupResourceType resource_type = 2;


    pub fn get_resource_type(&self) -> GroupResourceType {
        self.resource_type
    }
    pub fn clear_resource_type(&mut self) {
        self.resource_type = GroupResourceType::RESOURCE_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_resource_type(&mut self, v: GroupResourceType) {
        self.resource_type = v;
    }
}

impl ::protobuf::Message for UptimeCheckConfig_ResourceGroup {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group_id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.resource_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.group_id);
        }
        if self.resource_type != GroupResourceType::RESOURCE_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.resource_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.group_id.is_empty() {
            os.write_string(1, &self.group_id)?;
        }
        if self.resource_type != GroupResourceType::RESOURCE_TYPE_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.resource_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UptimeCheckConfig_ResourceGroup {
        UptimeCheckConfig_ResourceGroup::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group_id",
                |m: &UptimeCheckConfig_ResourceGroup| { &m.group_id },
                |m: &mut UptimeCheckConfig_ResourceGroup| { &mut m.group_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<GroupResourceType>>(
                "resource_type",
                |m: &UptimeCheckConfig_ResourceGroup| { &m.resource_type },
                |m: &mut UptimeCheckConfig_ResourceGroup| { &mut m.resource_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UptimeCheckConfig_ResourceGroup>(
                "UptimeCheckConfig.ResourceGroup",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UptimeCheckConfig_ResourceGroup {
        static instance: ::protobuf::rt::LazyV2<UptimeCheckConfig_ResourceGroup> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UptimeCheckConfig_ResourceGroup::new)
    }
}

impl ::protobuf::Clear for UptimeCheckConfig_ResourceGroup {
    fn clear(&mut self) {
        self.group_id.clear();
        self.resource_type = GroupResourceType::RESOURCE_TYPE_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UptimeCheckConfig_ResourceGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UptimeCheckConfig_ResourceGroup {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UptimeCheckConfig_HttpCheck {
    // message fields
    pub use_ssl: bool,
    pub path: ::std::string::String,
    pub port: i32,
    pub auth_info: ::protobuf::SingularPtrField<UptimeCheckConfig_HttpCheck_BasicAuthentication>,
    pub mask_headers: bool,
    pub headers: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub validate_ssl: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UptimeCheckConfig_HttpCheck {
    fn default() -> &'a UptimeCheckConfig_HttpCheck {
        <UptimeCheckConfig_HttpCheck as ::protobuf::Message>::default_instance()
    }
}

impl UptimeCheckConfig_HttpCheck {
    pub fn new() -> UptimeCheckConfig_HttpCheck {
        ::std::default::Default::default()
    }

    // bool use_ssl = 1;


    pub fn get_use_ssl(&self) -> bool {
        self.use_ssl
    }
    pub fn clear_use_ssl(&mut self) {
        self.use_ssl = false;
    }

    // Param is passed by value, moved
    pub fn set_use_ssl(&mut self, v: bool) {
        self.use_ssl = v;
    }

    // string path = 2;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // int32 port = 3;


    pub fn get_port(&self) -> i32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = v;
    }

    // .google.monitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthentication auth_info = 4;


    pub fn get_auth_info(&self) -> &UptimeCheckConfig_HttpCheck_BasicAuthentication {
        self.auth_info.as_ref().unwrap_or_else(|| <UptimeCheckConfig_HttpCheck_BasicAuthentication as ::protobuf::Message>::default_instance())
    }
    pub fn clear_auth_info(&mut self) {
        self.auth_info.clear();
    }

    pub fn has_auth_info(&self) -> bool {
        self.auth_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_info(&mut self, v: UptimeCheckConfig_HttpCheck_BasicAuthentication) {
        self.auth_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auth_info(&mut self) -> &mut UptimeCheckConfig_HttpCheck_BasicAuthentication {
        if self.auth_info.is_none() {
            self.auth_info.set_default();
        }
        self.auth_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_auth_info(&mut self) -> UptimeCheckConfig_HttpCheck_BasicAuthentication {
        self.auth_info.take().unwrap_or_else(|| UptimeCheckConfig_HttpCheck_BasicAuthentication::new())
    }

    // bool mask_headers = 5;


    pub fn get_mask_headers(&self) -> bool {
        self.mask_headers
    }
    pub fn clear_mask_headers(&mut self) {
        self.mask_headers = false;
    }

    // Param is passed by value, moved
    pub fn set_mask_headers(&mut self, v: bool) {
        self.mask_headers = v;
    }

    // repeated .google.monitoring.v3.UptimeCheckConfig.HttpCheck.HeadersEntry headers = 6;


    pub fn get_headers(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.headers, ::std::collections::HashMap::new())
    }

    // bool validate_ssl = 7;


    pub fn get_validate_ssl(&self) -> bool {
        self.validate_ssl
    }
    pub fn clear_validate_ssl(&mut self) {
        self.validate_ssl = false;
    }

    // Param is passed by value, moved
    pub fn set_validate_ssl(&mut self, v: bool) {
        self.validate_ssl = v;
    }
}

impl ::protobuf::Message for UptimeCheckConfig_HttpCheck {
    fn is_initialized(&self) -> bool {
        for v in &self.auth_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_ssl = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.port = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.auth_info)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.mask_headers = tmp;
                },
                6 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.headers)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.validate_ssl = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.use_ssl != false {
            my_size += 2;
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(3, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.auth_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.mask_headers != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.headers);
        if self.validate_ssl != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.use_ssl != false {
            os.write_bool(1, self.use_ssl)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        if self.port != 0 {
            os.write_int32(3, self.port)?;
        }
        if let Some(ref v) = self.auth_info.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.mask_headers != false {
            os.write_bool(5, self.mask_headers)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.headers, os)?;
        if self.validate_ssl != false {
            os.write_bool(7, self.validate_ssl)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UptimeCheckConfig_HttpCheck {
        UptimeCheckConfig_HttpCheck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "use_ssl",
                |m: &UptimeCheckConfig_HttpCheck| { &m.use_ssl },
                |m: &mut UptimeCheckConfig_HttpCheck| { &mut m.use_ssl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &UptimeCheckConfig_HttpCheck| { &m.path },
                |m: &mut UptimeCheckConfig_HttpCheck| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "port",
                |m: &UptimeCheckConfig_HttpCheck| { &m.port },
                |m: &mut UptimeCheckConfig_HttpCheck| { &mut m.port },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UptimeCheckConfig_HttpCheck_BasicAuthentication>>(
                "auth_info",
                |m: &UptimeCheckConfig_HttpCheck| { &m.auth_info },
                |m: &mut UptimeCheckConfig_HttpCheck| { &mut m.auth_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "mask_headers",
                |m: &UptimeCheckConfig_HttpCheck| { &m.mask_headers },
                |m: &mut UptimeCheckConfig_HttpCheck| { &mut m.mask_headers },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "headers",
                |m: &UptimeCheckConfig_HttpCheck| { &m.headers },
                |m: &mut UptimeCheckConfig_HttpCheck| { &mut m.headers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "validate_ssl",
                |m: &UptimeCheckConfig_HttpCheck| { &m.validate_ssl },
                |m: &mut UptimeCheckConfig_HttpCheck| { &mut m.validate_ssl },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UptimeCheckConfig_HttpCheck>(
                "UptimeCheckConfig.HttpCheck",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UptimeCheckConfig_HttpCheck {
        static instance: ::protobuf::rt::LazyV2<UptimeCheckConfig_HttpCheck> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UptimeCheckConfig_HttpCheck::new)
    }
}

impl ::protobuf::Clear for UptimeCheckConfig_HttpCheck {
    fn clear(&mut self) {
        self.use_ssl = false;
        self.path.clear();
        self.port = 0;
        self.auth_info.clear();
        self.mask_headers = false;
        self.headers.clear();
        self.validate_ssl = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UptimeCheckConfig_HttpCheck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UptimeCheckConfig_HttpCheck {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UptimeCheckConfig_HttpCheck_BasicAuthentication {
    // message fields
    pub username: ::std::string::String,
    pub password: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UptimeCheckConfig_HttpCheck_BasicAuthentication {
    fn default() -> &'a UptimeCheckConfig_HttpCheck_BasicAuthentication {
        <UptimeCheckConfig_HttpCheck_BasicAuthentication as ::protobuf::Message>::default_instance()
    }
}

impl UptimeCheckConfig_HttpCheck_BasicAuthentication {
    pub fn new() -> UptimeCheckConfig_HttpCheck_BasicAuthentication {
        ::std::default::Default::default()
    }

    // string username = 1;


    pub fn get_username(&self) -> &str {
        &self.username
    }
    pub fn clear_username(&mut self) {
        self.username.clear();
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        &mut self.username
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.username, ::std::string::String::new())
    }

    // string password = 2;


    pub fn get_password(&self) -> &str {
        &self.password
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        &mut self.password
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.password, ::std::string::String::new())
    }
}

impl ::protobuf::Message for UptimeCheckConfig_HttpCheck_BasicAuthentication {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.username)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.password)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.username);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.password);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.username.is_empty() {
            os.write_string(1, &self.username)?;
        }
        if !self.password.is_empty() {
            os.write_string(2, &self.password)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UptimeCheckConfig_HttpCheck_BasicAuthentication {
        UptimeCheckConfig_HttpCheck_BasicAuthentication::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "username",
                |m: &UptimeCheckConfig_HttpCheck_BasicAuthentication| { &m.username },
                |m: &mut UptimeCheckConfig_HttpCheck_BasicAuthentication| { &mut m.username },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "password",
                |m: &UptimeCheckConfig_HttpCheck_BasicAuthentication| { &m.password },
                |m: &mut UptimeCheckConfig_HttpCheck_BasicAuthentication| { &mut m.password },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UptimeCheckConfig_HttpCheck_BasicAuthentication>(
                "UptimeCheckConfig.HttpCheck.BasicAuthentication",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UptimeCheckConfig_HttpCheck_BasicAuthentication {
        static instance: ::protobuf::rt::LazyV2<UptimeCheckConfig_HttpCheck_BasicAuthentication> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UptimeCheckConfig_HttpCheck_BasicAuthentication::new)
    }
}

impl ::protobuf::Clear for UptimeCheckConfig_HttpCheck_BasicAuthentication {
    fn clear(&mut self) {
        self.username.clear();
        self.password.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UptimeCheckConfig_HttpCheck_BasicAuthentication {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UptimeCheckConfig_HttpCheck_BasicAuthentication {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UptimeCheckConfig_TcpCheck {
    // message fields
    pub port: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UptimeCheckConfig_TcpCheck {
    fn default() -> &'a UptimeCheckConfig_TcpCheck {
        <UptimeCheckConfig_TcpCheck as ::protobuf::Message>::default_instance()
    }
}

impl UptimeCheckConfig_TcpCheck {
    pub fn new() -> UptimeCheckConfig_TcpCheck {
        ::std::default::Default::default()
    }

    // int32 port = 1;


    pub fn get_port(&self) -> i32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = v;
    }
}

impl ::protobuf::Message for UptimeCheckConfig_TcpCheck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(1, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.port != 0 {
            os.write_int32(1, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UptimeCheckConfig_TcpCheck {
        UptimeCheckConfig_TcpCheck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "port",
                |m: &UptimeCheckConfig_TcpCheck| { &m.port },
                |m: &mut UptimeCheckConfig_TcpCheck| { &mut m.port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UptimeCheckConfig_TcpCheck>(
                "UptimeCheckConfig.TcpCheck",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UptimeCheckConfig_TcpCheck {
        static instance: ::protobuf::rt::LazyV2<UptimeCheckConfig_TcpCheck> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UptimeCheckConfig_TcpCheck::new)
    }
}

impl ::protobuf::Clear for UptimeCheckConfig_TcpCheck {
    fn clear(&mut self) {
        self.port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UptimeCheckConfig_TcpCheck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UptimeCheckConfig_TcpCheck {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UptimeCheckConfig_ContentMatcher {
    // message fields
    pub content: ::std::string::String,
    pub matcher: UptimeCheckConfig_ContentMatcher_ContentMatcherOption,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UptimeCheckConfig_ContentMatcher {
    fn default() -> &'a UptimeCheckConfig_ContentMatcher {
        <UptimeCheckConfig_ContentMatcher as ::protobuf::Message>::default_instance()
    }
}

impl UptimeCheckConfig_ContentMatcher {
    pub fn new() -> UptimeCheckConfig_ContentMatcher {
        ::std::default::Default::default()
    }

    // string content = 1;


    pub fn get_content(&self) -> &str {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::string::String) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::string::String {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.content, ::std::string::String::new())
    }

    // .google.monitoring.v3.UptimeCheckConfig.ContentMatcher.ContentMatcherOption matcher = 2;


    pub fn get_matcher(&self) -> UptimeCheckConfig_ContentMatcher_ContentMatcherOption {
        self.matcher
    }
    pub fn clear_matcher(&mut self) {
        self.matcher = UptimeCheckConfig_ContentMatcher_ContentMatcherOption::CONTENT_MATCHER_OPTION_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_matcher(&mut self, v: UptimeCheckConfig_ContentMatcher_ContentMatcherOption) {
        self.matcher = v;
    }
}

impl ::protobuf::Message for UptimeCheckConfig_ContentMatcher {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.content)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.matcher, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.content);
        }
        if self.matcher != UptimeCheckConfig_ContentMatcher_ContentMatcherOption::CONTENT_MATCHER_OPTION_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.matcher);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.content.is_empty() {
            os.write_string(1, &self.content)?;
        }
        if self.matcher != UptimeCheckConfig_ContentMatcher_ContentMatcherOption::CONTENT_MATCHER_OPTION_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.matcher))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UptimeCheckConfig_ContentMatcher {
        UptimeCheckConfig_ContentMatcher::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "content",
                |m: &UptimeCheckConfig_ContentMatcher| { &m.content },
                |m: &mut UptimeCheckConfig_ContentMatcher| { &mut m.content },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<UptimeCheckConfig_ContentMatcher_ContentMatcherOption>>(
                "matcher",
                |m: &UptimeCheckConfig_ContentMatcher| { &m.matcher },
                |m: &mut UptimeCheckConfig_ContentMatcher| { &mut m.matcher },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UptimeCheckConfig_ContentMatcher>(
                "UptimeCheckConfig.ContentMatcher",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UptimeCheckConfig_ContentMatcher {
        static instance: ::protobuf::rt::LazyV2<UptimeCheckConfig_ContentMatcher> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UptimeCheckConfig_ContentMatcher::new)
    }
}

impl ::protobuf::Clear for UptimeCheckConfig_ContentMatcher {
    fn clear(&mut self) {
        self.content.clear();
        self.matcher = UptimeCheckConfig_ContentMatcher_ContentMatcherOption::CONTENT_MATCHER_OPTION_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UptimeCheckConfig_ContentMatcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UptimeCheckConfig_ContentMatcher {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum UptimeCheckConfig_ContentMatcher_ContentMatcherOption {
    CONTENT_MATCHER_OPTION_UNSPECIFIED = 0,
    CONTAINS_STRING = 1,
    NOT_CONTAINS_STRING = 2,
    MATCHES_REGEX = 3,
    NOT_MATCHES_REGEX = 4,
}

impl ::protobuf::ProtobufEnum for UptimeCheckConfig_ContentMatcher_ContentMatcherOption {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<UptimeCheckConfig_ContentMatcher_ContentMatcherOption> {
        match value {
            0 => ::std::option::Option::Some(UptimeCheckConfig_ContentMatcher_ContentMatcherOption::CONTENT_MATCHER_OPTION_UNSPECIFIED),
            1 => ::std::option::Option::Some(UptimeCheckConfig_ContentMatcher_ContentMatcherOption::CONTAINS_STRING),
            2 => ::std::option::Option::Some(UptimeCheckConfig_ContentMatcher_ContentMatcherOption::NOT_CONTAINS_STRING),
            3 => ::std::option::Option::Some(UptimeCheckConfig_ContentMatcher_ContentMatcherOption::MATCHES_REGEX),
            4 => ::std::option::Option::Some(UptimeCheckConfig_ContentMatcher_ContentMatcherOption::NOT_MATCHES_REGEX),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [UptimeCheckConfig_ContentMatcher_ContentMatcherOption] = &[
            UptimeCheckConfig_ContentMatcher_ContentMatcherOption::CONTENT_MATCHER_OPTION_UNSPECIFIED,
            UptimeCheckConfig_ContentMatcher_ContentMatcherOption::CONTAINS_STRING,
            UptimeCheckConfig_ContentMatcher_ContentMatcherOption::NOT_CONTAINS_STRING,
            UptimeCheckConfig_ContentMatcher_ContentMatcherOption::MATCHES_REGEX,
            UptimeCheckConfig_ContentMatcher_ContentMatcherOption::NOT_MATCHES_REGEX,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<UptimeCheckConfig_ContentMatcher_ContentMatcherOption>("UptimeCheckConfig.ContentMatcher.ContentMatcherOption", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for UptimeCheckConfig_ContentMatcher_ContentMatcherOption {
}

impl ::std::default::Default for UptimeCheckConfig_ContentMatcher_ContentMatcherOption {
    fn default() -> Self {
        UptimeCheckConfig_ContentMatcher_ContentMatcherOption::CONTENT_MATCHER_OPTION_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for UptimeCheckConfig_ContentMatcher_ContentMatcherOption {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UptimeCheckIp {
    // message fields
    pub region: UptimeCheckRegion,
    pub location: ::std::string::String,
    pub ip_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UptimeCheckIp {
    fn default() -> &'a UptimeCheckIp {
        <UptimeCheckIp as ::protobuf::Message>::default_instance()
    }
}

impl UptimeCheckIp {
    pub fn new() -> UptimeCheckIp {
        ::std::default::Default::default()
    }

    // .google.monitoring.v3.UptimeCheckRegion region = 1;


    pub fn get_region(&self) -> UptimeCheckRegion {
        self.region
    }
    pub fn clear_region(&mut self) {
        self.region = UptimeCheckRegion::REGION_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_region(&mut self, v: UptimeCheckRegion) {
        self.region = v;
    }

    // string location = 2;


    pub fn get_location(&self) -> &str {
        &self.location
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: ::std::string::String) {
        self.location = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut ::std::string::String {
        &mut self.location
    }

    // Take field
    pub fn take_location(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.location, ::std::string::String::new())
    }

    // string ip_address = 3;


    pub fn get_ip_address(&self) -> &str {
        &self.ip_address
    }
    pub fn clear_ip_address(&mut self) {
        self.ip_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip_address(&mut self, v: ::std::string::String) {
        self.ip_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip_address(&mut self) -> &mut ::std::string::String {
        &mut self.ip_address
    }

    // Take field
    pub fn take_ip_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ip_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for UptimeCheckIp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.region, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.location)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ip_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.region != UptimeCheckRegion::REGION_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.region);
        }
        if !self.location.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.location);
        }
        if !self.ip_address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ip_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.region != UptimeCheckRegion::REGION_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.region))?;
        }
        if !self.location.is_empty() {
            os.write_string(2, &self.location)?;
        }
        if !self.ip_address.is_empty() {
            os.write_string(3, &self.ip_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UptimeCheckIp {
        UptimeCheckIp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<UptimeCheckRegion>>(
                "region",
                |m: &UptimeCheckIp| { &m.region },
                |m: &mut UptimeCheckIp| { &mut m.region },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "location",
                |m: &UptimeCheckIp| { &m.location },
                |m: &mut UptimeCheckIp| { &mut m.location },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ip_address",
                |m: &UptimeCheckIp| { &m.ip_address },
                |m: &mut UptimeCheckIp| { &mut m.ip_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UptimeCheckIp>(
                "UptimeCheckIp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UptimeCheckIp {
        static instance: ::protobuf::rt::LazyV2<UptimeCheckIp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UptimeCheckIp::new)
    }
}

impl ::protobuf::Clear for UptimeCheckIp {
    fn clear(&mut self) {
        self.region = UptimeCheckRegion::REGION_UNSPECIFIED;
        self.location.clear();
        self.ip_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UptimeCheckIp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UptimeCheckIp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum UptimeCheckRegion {
    REGION_UNSPECIFIED = 0,
    USA = 1,
    EUROPE = 2,
    SOUTH_AMERICA = 3,
    ASIA_PACIFIC = 4,
}

impl ::protobuf::ProtobufEnum for UptimeCheckRegion {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<UptimeCheckRegion> {
        match value {
            0 => ::std::option::Option::Some(UptimeCheckRegion::REGION_UNSPECIFIED),
            1 => ::std::option::Option::Some(UptimeCheckRegion::USA),
            2 => ::std::option::Option::Some(UptimeCheckRegion::EUROPE),
            3 => ::std::option::Option::Some(UptimeCheckRegion::SOUTH_AMERICA),
            4 => ::std::option::Option::Some(UptimeCheckRegion::ASIA_PACIFIC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [UptimeCheckRegion] = &[
            UptimeCheckRegion::REGION_UNSPECIFIED,
            UptimeCheckRegion::USA,
            UptimeCheckRegion::EUROPE,
            UptimeCheckRegion::SOUTH_AMERICA,
            UptimeCheckRegion::ASIA_PACIFIC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<UptimeCheckRegion>("UptimeCheckRegion", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for UptimeCheckRegion {
}

impl ::std::default::Default for UptimeCheckRegion {
    fn default() -> Self {
        UptimeCheckRegion::REGION_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for UptimeCheckRegion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum GroupResourceType {
    RESOURCE_TYPE_UNSPECIFIED = 0,
    INSTANCE = 1,
    AWS_ELB_LOAD_BALANCER = 2,
}

impl ::protobuf::ProtobufEnum for GroupResourceType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GroupResourceType> {
        match value {
            0 => ::std::option::Option::Some(GroupResourceType::RESOURCE_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(GroupResourceType::INSTANCE),
            2 => ::std::option::Option::Some(GroupResourceType::AWS_ELB_LOAD_BALANCER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [GroupResourceType] = &[
            GroupResourceType::RESOURCE_TYPE_UNSPECIFIED,
            GroupResourceType::INSTANCE,
            GroupResourceType::AWS_ELB_LOAD_BALANCER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<GroupResourceType>("GroupResourceType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for GroupResourceType {
}

impl ::std::default::Default for GroupResourceType {
    fn default() -> Self {
        GroupResourceType::RESOURCE_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for GroupResourceType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!google/monitoring/v3/uptime.proto\x12\x14google.monitoring.v3\x1a#goo\
    gle/api/monitored_resource.proto\x1a\x1egoogle/protobuf/duration.proto\"\
    \xa1\x02\n\x0fInternalChecker\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04n\
    ame\x12!\n\x0cdisplay_name\x18\x02\x20\x01(\tR\x0bdisplayName\x12\x18\n\
    \x07network\x18\x03\x20\x01(\tR\x07network\x12\x19\n\x08gcp_zone\x18\x04\
    \x20\x01(\tR\x07gcpZone\x12&\n\x0fpeer_project_id\x18\x06\x20\x01(\tR\rp\
    eerProjectId\x12A\n\x05state\x18\x07\x20\x01(\x0e2+.google.monitoring.v3\
    .InternalChecker.StateR\x05state\"3\n\x05State\x12\x0f\n\x0bUNSPECIFIED\
    \x10\0\x12\x0c\n\x08CREATING\x10\x01\x12\x0b\n\x07RUNNING\x10\x02:\x02\
    \x18\x01\"\x82\x0e\n\x11UptimeCheckConfig\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\x12!\n\x0cdisplay_name\x18\x02\x20\x01(\tR\x0bdisplayNa\
    me\x12N\n\x12monitored_resource\x18\x03\x20\x01(\x0b2\x1d.google.api.Mon\
    itoredResourceH\0R\x11monitoredResource\x12^\n\x0eresource_group\x18\x04\
    \x20\x01(\x0b25.google.monitoring.v3.UptimeCheckConfig.ResourceGroupH\0R\
    \rresourceGroup\x12R\n\nhttp_check\x18\x05\x20\x01(\x0b21.google.monitor\
    ing.v3.UptimeCheckConfig.HttpCheckH\x01R\thttpCheck\x12O\n\ttcp_check\
    \x18\x06\x20\x01(\x0b20.google.monitoring.v3.UptimeCheckConfig.TcpCheckH\
    \x01R\x08tcpCheck\x121\n\x06period\x18\x07\x20\x01(\x0b2\x19.google.prot\
    obuf.DurationR\x06period\x123\n\x07timeout\x18\x08\x20\x01(\x0b2\x19.goo\
    gle.protobuf.DurationR\x07timeout\x12a\n\x10content_matchers\x18\t\x20\
    \x03(\x0b26.google.monitoring.v3.UptimeCheckConfig.ContentMatcherR\x0fco\
    ntentMatchers\x12R\n\x10selected_regions\x18\n\x20\x03(\x0e2'.google.mon\
    itoring.v3.UptimeCheckRegionR\x0fselectedRegions\x12#\n\x0bis_internal\
    \x18\x0f\x20\x01(\x08R\nisInternalB\x02\x18\x01\x12V\n\x11internal_check\
    ers\x18\x0e\x20\x03(\x0b2%.google.monitoring.v3.InternalCheckerR\x10inte\
    rnalCheckersB\x02\x18\x01\x1ax\n\rResourceGroup\x12\x19\n\x08group_id\
    \x18\x01\x20\x01(\tR\x07groupId\x12L\n\rresource_type\x18\x02\x20\x01(\
    \x0e2'.google.monitoring.v3.GroupResourceTypeR\x0cresourceType\x1a\xdb\
    \x03\n\tHttpCheck\x12\x17\n\x07use_ssl\x18\x01\x20\x01(\x08R\x06useSsl\
    \x12\x12\n\x04path\x18\x02\x20\x01(\tR\x04path\x12\x12\n\x04port\x18\x03\
    \x20\x01(\x05R\x04port\x12b\n\tauth_info\x18\x04\x20\x01(\x0b2E.google.m\
    onitoring.v3.UptimeCheckConfig.HttpCheck.BasicAuthenticationR\x08authInf\
    o\x12!\n\x0cmask_headers\x18\x05\x20\x01(\x08R\x0bmaskHeaders\x12X\n\x07\
    headers\x18\x06\x20\x03(\x0b2>.google.monitoring.v3.UptimeCheckConfig.Ht\
    tpCheck.HeadersEntryR\x07headers\x12!\n\x0cvalidate_ssl\x18\x07\x20\x01(\
    \x08R\x0bvalidateSsl\x1aM\n\x13BasicAuthentication\x12\x1a\n\x08username\
    \x18\x01\x20\x01(\tR\x08username\x12\x1a\n\x08password\x18\x02\x20\x01(\
    \tR\x08password\x1a:\n\x0cHeadersEntry\x12\x10\n\x03key\x18\x01\x20\x01(\
    \tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\x1a\
    \x1e\n\x08TcpCheck\x12\x12\n\x04port\x18\x01\x20\x01(\x05R\x04port\x1a\
    \xaa\x02\n\x0eContentMatcher\x12\x18\n\x07content\x18\x01\x20\x01(\tR\
    \x07content\x12e\n\x07matcher\x18\x02\x20\x01(\x0e2K.google.monitoring.v\
    3.UptimeCheckConfig.ContentMatcher.ContentMatcherOptionR\x07matcher\"\
    \x96\x01\n\x14ContentMatcherOption\x12&\n\"CONTENT_MATCHER_OPTION_UNSPEC\
    IFIED\x10\0\x12\x13\n\x0fCONTAINS_STRING\x10\x01\x12\x17\n\x13NOT_CONTAI\
    NS_STRING\x10\x02\x12\x11\n\rMATCHES_REGEX\x10\x03\x12\x15\n\x11NOT_MATC\
    HES_REGEX\x10\x04B\n\n\x08resourceB\x14\n\x12check_request_type\"\x8b\
    \x01\n\rUptimeCheckIp\x12?\n\x06region\x18\x01\x20\x01(\x0e2'.google.mon\
    itoring.v3.UptimeCheckRegionR\x06region\x12\x1a\n\x08location\x18\x02\
    \x20\x01(\tR\x08location\x12\x1d\n\nip_address\x18\x03\x20\x01(\tR\tipAd\
    dress*e\n\x11UptimeCheckRegion\x12\x16\n\x12REGION_UNSPECIFIED\x10\0\x12\
    \x07\n\x03USA\x10\x01\x12\n\n\x06EUROPE\x10\x02\x12\x11\n\rSOUTH_AMERICA\
    \x10\x03\x12\x10\n\x0cASIA_PACIFIC\x10\x04*[\n\x11GroupResourceType\x12\
    \x1d\n\x19RESOURCE_TYPE_UNSPECIFIED\x10\0\x12\x0c\n\x08INSTANCE\x10\x01\
    \x12\x19\n\x15AWS_ELB_LOAD_BALANCER\x10\x02B\xa3\x01\n\x18com.google.mon\
    itoring.v3B\x0bUptimeProtoP\x01Z>google.golang.org/genproto/googleapis/m\
    onitoring/v3;monitoring\xaa\x02\x1aGoogle.Cloud.Monitoring.V3\xca\x02\
    \x1aGoogle\\Cloud\\Monitoring\\V3J\xbfq\n\x07\x12\x05\x0f\0\xd4\x02\x01\
    \n\xbe\x04\n\x01\x0c\x12\x03\x0f\0\x122\xb3\x04\x20Copyright\x202019\x20\
    Google\x20LLC.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20\
    Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\
    \x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License\
    .\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\
    \n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20\
    Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20i\
    n\x20writing,\x20software\n\x20distributed\x20under\x20the\x20License\
    \x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\
    \x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20ex\
    press\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20spec\
    ific\x20language\x20governing\x20permissions\x20and\n\x20limitations\x20\
    under\x20the\x20License.\n\n\n\x08\n\x01\x02\x12\x03\x11\0\x1d\n\t\n\x02\
    \x03\0\x12\x03\x13\0-\n\t\n\x02\x03\x01\x12\x03\x14\0(\n\x08\n\x01\x08\
    \x12\x03\x16\07\n\t\n\x02\x08%\x12\x03\x16\07\n\x08\n\x01\x08\x12\x03\
    \x17\0U\n\t\n\x02\x08\x0b\x12\x03\x17\0U\n\x08\n\x01\x08\x12\x03\x18\0\"\
    \n\t\n\x02\x08\n\x12\x03\x18\0\"\n\x08\n\x01\x08\x12\x03\x19\0,\n\t\n\
    \x02\x08\x08\x12\x03\x19\0,\n\x08\n\x01\x08\x12\x03\x1a\01\n\t\n\x02\x08\
    \x01\x12\x03\x1a\01\n\x08\n\x01\x08\x12\x03\x1b\07\n\t\n\x02\x08)\x12\
    \x03\x1b\07\na\n\x02\x04\0\x12\x04\x1f\0S\x01\x1aU\x20An\x20internal\x20\
    checker\x20allows\x20Uptime\x20checks\x20to\x20run\x20on\x20private/inte\
    rnal\x20GCP\n\x20resources.\n\n\n\n\x03\x04\0\x01\x12\x03\x1f\x08\x17\n\
    \n\n\x03\x04\0\x07\x12\x03\x20\x02\x1b\n\x0b\n\x04\x04\0\x07\x03\x12\x03\
    \x20\x02\x1b\n;\n\x04\x04\0\x04\0\x12\x04#\x026\x03\x1a-\x20Operational\
    \x20states\x20for\x20an\x20internal\x20checker.\n\n\x0c\n\x05\x04\0\x04\
    \0\x01\x12\x03#\x07\x0c\nN\n\x06\x04\0\x04\0\x02\0\x12\x03%\x04\x14\x1a?\
    \x20An\x20internal\x20checker\x20should\x20never\x20be\x20in\x20the\x20u\
    nspecified\x20state.\n\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03%\x04\
    \x0f\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03%\x12\x13\n\xbf\x02\n\x06\
    \x04\0\x04\0\x02\x01\x12\x03,\x04\x11\x1a\xaf\x02\x20The\x20checker\x20i\
    s\x20being\x20created,\x20provisioned,\x20and\x20configured.\x20A\x20che\
    cker\x20in\n\x20this\x20state\x20can\x20be\x20returned\x20by\x20`ListInt\
    ernalCheckers`\x20or\n\x20`GetInternalChecker`,\x20as\x20well\x20as\x20b\
    y\x20examining\x20the\x20[long\x20running\n\x20Operation](https://cloud.\
    google.com/apis/design/design_patterns#long_running_operations)\n\x20tha\
    t\x20created\x20it.\n\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03,\x04\
    \x0c\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03,\x0f\x10\n\xa1\x03\n\
    \x06\x04\0\x04\0\x02\x02\x12\x035\x04\x10\x1a\x91\x03\x20The\x20checker\
    \x20is\x20running\x20and\x20available\x20for\x20use.\x20A\x20checker\x20\
    in\x20this\x20state\n\x20can\x20be\x20returned\x20by\x20`ListInternalChe\
    ckers`\x20or\x20`GetInternalChecker`\x20as\n\x20well\x20as\x20by\x20exam\
    ining\x20the\x20[long\x20running\n\x20Operation](https://cloud.google.co\
    m/apis/design/design_patterns#long_running_operations)\n\x20that\x20crea\
    ted\x20it.\n\x20If\x20a\x20checker\x20is\x20being\x20torn\x20down,\x20it\
    \x20is\x20neither\x20visible\x20nor\x20usable,\x20so\n\x20there\x20is\
    \x20no\x20\"deleting\"\x20or\x20\"down\"\x20state.\n\n\x0e\n\x07\x04\0\
    \x04\0\x02\x02\x01\x12\x035\x04\x0b\n\x0e\n\x07\x04\0\x04\0\x02\x02\x02\
    \x12\x035\x0e\x0f\n\x8c\x02\n\x04\x04\0\x02\0\x12\x03>\x02\x12\x1a\xfe\
    \x01\x20A\x20unique\x20resource\x20name\x20for\x20this\x20InternalChecke\
    r.\x20The\x20format\x20is:\n\n\x20\x20\x20`projects/[PROJECT_ID]/interna\
    lCheckers/[INTERNAL_CHECKER_ID]`.\n\n\x20`[PROJECT_ID]`\x20is\x20the\x20\
    Stackdriver\x20Workspace\x20project\x20for\x20the\n\x20Uptime\x20check\
    \x20config\x20associated\x20with\x20the\x20internal\x20checker.\n\n\x0c\
    \n\x05\x04\0\x02\0\x05\x12\x03>\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03>\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03>\x10\x11\n\xc2\x01\n\x04\
    \x04\0\x02\x01\x12\x03C\x02\x1a\x1a\xb4\x01\x20The\x20checker's\x20human\
    -readable\x20name.\x20The\x20display\x20name\n\x20should\x20be\x20unique\
    \x20within\x20a\x20Stackdriver\x20Workspace\x20in\x20order\x20to\x20make\
    \x20it\x20easier\n\x20to\x20identify;\x20however,\x20uniqueness\x20is\
    \x20not\x20enforced.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03C\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03C\t\x15\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03C\x18\x19\n\x7f\n\x04\x04\0\x02\x02\x12\x03G\x02\x15\x1ar\
    \x20The\x20[GCP\x20VPC\x20network](https://cloud.google.com/vpc/docs/vpc\
    )\x20where\x20the\n\x20internal\x20resource\x20lives\x20(ex:\x20\"defaul\
    t\").\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03G\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03G\t\x10\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03G\x13\
    \x14\n\x92\x01\n\x04\x04\0\x02\x03\x12\x03K\x02\x16\x1a\x84\x01\x20The\
    \x20GCP\x20zone\x20the\x20Uptime\x20check\x20should\x20egress\x20from.\
    \x20Only\x20respected\x20for\n\x20internal\x20Uptime\x20checks,\x20where\
    \x20internal_network\x20is\x20specified.\n\n\x0c\n\x05\x04\0\x02\x03\x05\
    \x12\x03K\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03K\t\x11\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03K\x14\x15\nu\n\x04\x04\0\x02\x04\x12\x03O\
    \x02\x1d\x1ah\x20The\x20GCP\x20project\x20ID\x20where\x20the\x20internal\
    \x20checker\x20lives.\x20Not\x20necessary\n\x20the\x20same\x20as\x20the\
    \x20Workspace\x20project.\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03O\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03O\t\x18\n\x0c\n\x05\x04\0\x02\
    \x04\x03\x12\x03O\x1b\x1c\nE\n\x04\x04\0\x02\x05\x12\x03R\x02\x12\x1a8\
    \x20The\x20current\x20operational\x20state\x20of\x20the\x20internal\x20c\
    hecker.\n\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03R\x02\x07\n\x0c\n\x05\x04\
    \0\x02\x05\x01\x12\x03R\x08\r\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03R\x10\
    \x11\n@\n\x02\x05\0\x12\x04V\0h\x01\x1a4\x20The\x20regions\x20from\x20wh\
    ich\x20an\x20Uptime\x20check\x20can\x20be\x20run.\n\n\n\n\x03\x05\0\x01\
    \x12\x03V\x05\x16\no\n\x04\x05\0\x02\0\x12\x03Y\x02\x19\x1ab\x20Default\
    \x20value\x20if\x20no\x20region\x20is\x20specified.\x20Will\x20result\
    \x20in\x20Uptime\x20checks\n\x20running\x20from\x20all\x20regions.\n\n\
    \x0c\n\x05\x05\0\x02\0\x01\x12\x03Y\x02\x14\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03Y\x17\x18\nW\n\x04\x05\0\x02\x01\x12\x03\\\x02\n\x1aJ\x20Allows\
    \x20checks\x20to\x20run\x20from\x20locations\x20within\x20the\x20United\
    \x20States\x20of\x20America.\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\\\
    \x02\x05\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\\\x08\t\nR\n\x04\x05\0\
    \x02\x02\x12\x03_\x02\r\x1aE\x20Allows\x20checks\x20to\x20run\x20from\
    \x20locations\x20within\x20the\x20continent\x20of\x20Europe.\n\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03_\x02\x08\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03_\x0b\x0c\nZ\n\x04\x05\0\x02\x03\x12\x03c\x02\x14\x1aM\x20Allows\
    \x20checks\x20to\x20run\x20from\x20locations\x20within\x20the\x20contine\
    nt\x20of\x20South\n\x20America.\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03c\
    \x02\x0f\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03c\x12\x13\na\n\x04\x05\0\
    \x02\x04\x12\x03g\x02\x13\x1aT\x20Allows\x20checks\x20to\x20run\x20from\
    \x20locations\x20within\x20the\x20Asia\x20Pacific\x20area\x20(ex:\n\x20S\
    ingapore).\n\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03g\x02\x0e\n\x0c\n\x05\
    \x05\0\x02\x04\x02\x12\x03g\x11\x12\na\n\x02\x04\x01\x12\x05l\0\xb0\x02\
    \x01\x1aT\x20This\x20message\x20configures\x20which\x20resources\x20and\
    \x20services\x20to\x20monitor\x20for\n\x20availability.\n\n\n\n\x03\x04\
    \x01\x01\x12\x03l\x08\x19\n\x98\x01\n\x04\x04\x01\x03\0\x12\x04o\x02v\
    \x03\x1a\x89\x01\x20The\x20resource\x20submessage\x20for\x20group\x20che\
    cks.\x20It\x20can\x20be\x20used\x20instead\x20of\x20a\n\x20monitored\x20\
    resource,\x20when\x20multiple\x20resources\x20are\x20being\x20monitored.\
    \n\n\x0c\n\x05\x04\x01\x03\0\x01\x12\x03o\n\x17\n\x9c\x01\n\x06\x04\x01\
    \x03\0\x02\0\x12\x03r\x04\x18\x1a\x8c\x01\x20The\x20group\x20of\x20resou\
    rces\x20being\x20monitored.\x20Should\x20be\x20only\x20the\x20`[GROUP_ID\
    ]`,\n\x20and\x20not\x20the\x20full-path\x20`projects/[PROJECT_ID]/groups\
    /[GROUP_ID]`.\n\n\x0e\n\x07\x04\x01\x03\0\x02\0\x05\x12\x03r\x04\n\n\x0e\
    \n\x07\x04\x01\x03\0\x02\0\x01\x12\x03r\x0b\x13\n\x0e\n\x07\x04\x01\x03\
    \0\x02\0\x03\x12\x03r\x16\x17\n8\n\x06\x04\x01\x03\0\x02\x01\x12\x03u\
    \x04(\x1a)\x20The\x20resource\x20type\x20of\x20the\x20group\x20members.\
    \n\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x06\x12\x03u\x04\x15\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x01\x01\x12\x03u\x16#\n\x0e\n\x07\x04\x01\x03\0\x02\
    \x01\x03\x12\x03u&'\nL\n\x04\x04\x01\x03\x01\x12\x05y\x02\xb1\x01\x03\
    \x1a=\x20Information\x20involved\x20in\x20an\x20HTTP/HTTPS\x20Uptime\x20\
    check\x20request.\n\n\x0c\n\x05\x04\x01\x03\x01\x01\x12\x03y\n\x13\n\xf7\
    \x01\n\x06\x04\x01\x03\x01\x03\0\x12\x05~\x04\x84\x01\x05\x1a\xe5\x01\
    \x20The\x20authentication\x20parameters\x20to\x20provide\x20to\x20the\
    \x20specified\x20resource\x20or\n\x20URL\x20that\x20requires\x20a\x20use\
    rname\x20and\x20password.\x20Currently,\x20only\n\x20[Basic\x20HTTP\x20a\
    uthentication](https://tools.ietf.org/html/rfc7617)\x20is\n\x20supported\
    \x20in\x20Uptime\x20checks.\n\n\x0e\n\x07\x04\x01\x03\x01\x03\0\x01\x12\
    \x03~\x0c\x1f\nQ\n\x08\x04\x01\x03\x01\x03\0\x02\0\x12\x04\x80\x01\x06\
    \x1a\x1a?\x20The\x20username\x20to\x20use\x20when\x20authenticating\x20w\
    ith\x20the\x20HTTP\x20server.\n\n\x11\n\t\x04\x01\x03\x01\x03\0\x02\0\
    \x05\x12\x04\x80\x01\x06\x0c\n\x11\n\t\x04\x01\x03\x01\x03\0\x02\0\x01\
    \x12\x04\x80\x01\r\x15\n\x11\n\t\x04\x01\x03\x01\x03\0\x02\0\x03\x12\x04\
    \x80\x01\x18\x19\nQ\n\x08\x04\x01\x03\x01\x03\0\x02\x01\x12\x04\x83\x01\
    \x06\x1a\x1a?\x20The\x20password\x20to\x20use\x20when\x20authenticating\
    \x20with\x20the\x20HTTP\x20server.\n\n\x11\n\t\x04\x01\x03\x01\x03\0\x02\
    \x01\x05\x12\x04\x83\x01\x06\x0c\n\x11\n\t\x04\x01\x03\x01\x03\0\x02\x01\
    \x01\x12\x04\x83\x01\r\x15\n\x11\n\t\x04\x01\x03\x01\x03\0\x02\x01\x03\
    \x12\x04\x83\x01\x18\x19\nH\n\x06\x04\x01\x03\x01\x02\0\x12\x04\x87\x01\
    \x04\x15\x1a8\x20If\x20`true`,\x20use\x20HTTPS\x20instead\x20of\x20HTTP\
    \x20to\x20run\x20the\x20check.\n\n\x0f\n\x07\x04\x01\x03\x01\x02\0\x05\
    \x12\x04\x87\x01\x04\x08\n\x0f\n\x07\x04\x01\x03\x01\x02\0\x01\x12\x04\
    \x87\x01\t\x10\n\x0f\n\x07\x04\x01\x03\x01\x02\0\x03\x12\x04\x87\x01\x13\
    \x14\n\xaf\x02\n\x06\x04\x01\x03\x01\x02\x01\x12\x04\x8e\x01\x04\x14\x1a\
    \x9e\x02\x20Optional\x20(defaults\x20to\x20\"/\").\x20The\x20path\x20to\
    \x20the\x20page\x20against\x20which\x20to\x20run\n\x20the\x20check.\x20W\
    ill\x20be\x20combined\x20with\x20the\x20`host`\x20(specified\x20within\
    \x20the\n\x20`monitored_resource`)\x20and\x20`port`\x20to\x20construct\
    \x20the\x20full\x20URL.\x20If\x20the\n\x20provided\x20path\x20does\x20no\
    t\x20begin\x20with\x20\"/\",\x20a\x20\"/\"\x20will\x20be\x20prepended\n\
    \x20automatically.\n\n\x0f\n\x07\x04\x01\x03\x01\x02\x01\x05\x12\x04\x8e\
    \x01\x04\n\n\x0f\n\x07\x04\x01\x03\x01\x02\x01\x01\x12\x04\x8e\x01\x0b\
    \x0f\n\x0f\n\x07\x04\x01\x03\x01\x02\x01\x03\x12\x04\x8e\x01\x12\x13\n\
    \x99\x02\n\x06\x04\x01\x03\x01\x02\x02\x12\x04\x94\x01\x04\x13\x1a\x88\
    \x02\x20Optional\x20(defaults\x20to\x2080\x20when\x20`use_ssl`\x20is\x20\
    `false`,\x20and\x20443\x20when\n\x20`use_ssl`\x20is\x20`true`).\x20The\
    \x20TCP\x20port\x20on\x20the\x20HTTP\x20server\x20against\x20which\x20to\
    \n\x20run\x20the\x20check.\x20Will\x20be\x20combined\x20with\x20host\x20\
    (specified\x20within\x20the\n\x20`monitored_resource`)\x20and\x20`path`\
    \x20to\x20construct\x20the\x20full\x20URL.\n\n\x0f\n\x07\x04\x01\x03\x01\
    \x02\x02\x05\x12\x04\x94\x01\x04\t\n\x0f\n\x07\x04\x01\x03\x01\x02\x02\
    \x01\x12\x04\x94\x01\n\x0e\n\x0f\n\x07\x04\x01\x03\x01\x02\x02\x03\x12\
    \x04\x94\x01\x11\x12\nk\n\x06\x04\x01\x03\x01\x02\x03\x12\x04\x98\x01\
    \x04&\x1a[\x20The\x20authentication\x20information.\x20Optional\x20when\
    \x20creating\x20an\x20HTTP\x20check;\n\x20defaults\x20to\x20empty.\n\n\
    \x0f\n\x07\x04\x01\x03\x01\x02\x03\x06\x12\x04\x98\x01\x04\x17\n\x0f\n\
    \x07\x04\x01\x03\x01\x02\x03\x01\x12\x04\x98\x01\x18!\n\x0f\n\x07\x04\
    \x01\x03\x01\x02\x03\x03\x12\x04\x98\x01$%\n\x84\x03\n\x06\x04\x01\x03\
    \x01\x02\x04\x12\x04\xa0\x01\x04\x1a\x1a\xf3\x02\x20Boolean\x20specifiyi\
    ng\x20whether\x20to\x20encrypt\x20the\x20header\x20information.\n\x20Enc\
    ryption\x20should\x20be\x20specified\x20for\x20any\x20headers\x20related\
    \x20to\x20authentication\n\x20that\x20you\x20do\x20not\x20wish\x20to\x20\
    be\x20seen\x20when\x20retrieving\x20the\x20configuration.\x20The\n\x20se\
    rver\x20will\x20be\x20responsible\x20for\x20encrypting\x20the\x20headers\
    .\n\x20On\x20Get/List\x20calls,\x20if\x20`mask_headers`\x20is\x20set\x20\
    to\x20`true`\x20then\x20the\x20headers\n\x20will\x20be\x20obscured\x20wi\
    th\x20`******.`\n\n\x0f\n\x07\x04\x01\x03\x01\x02\x04\x05\x12\x04\xa0\
    \x01\x04\x08\n\x0f\n\x07\x04\x01\x03\x01\x02\x04\x01\x12\x04\xa0\x01\t\
    \x15\n\x0f\n\x07\x04\x01\x03\x01\x02\x04\x03\x12\x04\xa0\x01\x18\x19\n\
    \xf3\x03\n\x06\x04\x01\x03\x01\x02\x05\x12\x04\xaa\x01\x04$\x1a\xe2\x03\
    \x20The\x20list\x20of\x20headers\x20to\x20send\x20as\x20part\x20of\x20th\
    e\x20Uptime\x20check\x20request.\n\x20If\x20two\x20headers\x20have\x20th\
    e\x20same\x20key\x20and\x20different\x20values,\x20they\x20should\n\x20b\
    e\x20entered\x20as\x20a\x20single\x20header,\x20with\x20the\x20value\x20\
    being\x20a\x20comma-separated\n\x20list\x20of\x20all\x20the\x20desired\
    \x20values\x20as\x20described\x20at\n\x20https://www.w3.org/Protocols/rf\
    c2616/rfc2616.txt\x20(page\x2031).\n\x20Entering\x20two\x20separate\x20h\
    eaders\x20with\x20the\x20same\x20key\x20in\x20a\x20Create\x20call\x20wil\
    l\n\x20cause\x20the\x20first\x20to\x20be\x20overwritten\x20by\x20the\x20\
    second.\n\x20The\x20maximum\x20number\x20of\x20headers\x20allowed\x20is\
    \x20100.\n\n\x0f\n\x07\x04\x01\x03\x01\x02\x05\x06\x12\x04\xaa\x01\x04\
    \x17\n\x0f\n\x07\x04\x01\x03\x01\x02\x05\x01\x12\x04\xaa\x01\x18\x1f\n\
    \x0f\n\x07\x04\x01\x03\x01\x02\x05\x03\x12\x04\xaa\x01\"#\n\x88\x02\n\
    \x06\x04\x01\x03\x01\x02\x06\x12\x04\xb0\x01\x04\x1a\x1a\xf7\x01\x20Bool\
    ean\x20specifying\x20whether\x20to\x20include\x20SSL\x20certificate\x20v\
    alidation\x20as\x20a\n\x20part\x20of\x20the\x20Uptime\x20check.\x20Only\
    \x20applies\x20to\x20checks\x20where\n\x20`monitored_resource`\x20is\x20\
    set\x20to\x20`uptime_url`.\x20If\x20`use_ssl`\x20is\x20`false`,\n\x20set\
    ting\x20`validate_ssl`\x20to\x20`true`\x20has\x20no\x20effect.\n\n\x0f\n\
    \x07\x04\x01\x03\x01\x02\x06\x05\x12\x04\xb0\x01\x04\x08\n\x0f\n\x07\x04\
    \x01\x03\x01\x02\x06\x01\x12\x04\xb0\x01\t\x15\n\x0f\n\x07\x04\x01\x03\
    \x01\x02\x06\x03\x12\x04\xb0\x01\x18\x19\nF\n\x04\x04\x01\x03\x02\x12\
    \x06\xb4\x01\x02\xb9\x01\x03\x1a6\x20Information\x20required\x20for\x20a\
    \x20TCP\x20Uptime\x20check\x20request.\n\n\r\n\x05\x04\x01\x03\x02\x01\
    \x12\x04\xb4\x01\n\x12\n\xbb\x01\n\x06\x04\x01\x03\x02\x02\0\x12\x04\xb8\
    \x01\x04\x13\x1a\xaa\x01\x20The\x20TCP\x20port\x20on\x20the\x20server\
    \x20against\x20which\x20to\x20run\x20the\x20check.\x20Will\x20be\n\x20co\
    mbined\x20with\x20host\x20(specified\x20within\x20the\x20`monitored_reso\
    urce`)\x20to\n\x20construct\x20the\x20full\x20URL.\x20Required.\n\n\x0f\
    \n\x07\x04\x01\x03\x02\x02\0\x05\x12\x04\xb8\x01\x04\t\n\x0f\n\x07\x04\
    \x01\x03\x02\x02\0\x01\x12\x04\xb8\x01\n\x0e\n\x0f\n\x07\x04\x01\x03\x02\
    \x02\0\x03\x12\x04\xb8\x01\x11\x12\n\xc4\x02\n\x04\x04\x01\x03\x03\x12\
    \x06\xc0\x01\x02\xe3\x01\x03\x1a\xb3\x02\x20Optional.\x20Used\x20to\x20p\
    erform\x20content\x20matching.\x20This\x20allows\x20matching\x20based\
    \x20on\n\x20substrings\x20and\x20regular\x20expressions,\x20together\x20\
    with\x20their\x20negations.\x20Only\x20the\n\x20first\x204&nbsp;MB\x20of\
    \x20an\x20HTTP\x20or\x20HTTPS\x20check's\x20response\x20(and\x20the\x20f\
    irst\n\x201&nbsp;MB\x20of\x20a\x20TCP\x20check's\x20response)\x20are\x20\
    examined\x20for\x20purposes\x20of\x20content\n\x20matching.\n\n\r\n\x05\
    \x04\x01\x03\x03\x01\x12\x04\xc0\x01\n\x18\n8\n\x06\x04\x01\x03\x03\x04\
    \0\x12\x06\xc2\x01\x04\xda\x01\x05\x1a&\x20Options\x20to\x20perform\x20c\
    ontent\x20matching.\n\n\x0f\n\x07\x04\x01\x03\x03\x04\0\x01\x12\x04\xc2\
    \x01\t\x1d\n\x9e\x01\n\x08\x04\x01\x03\x03\x04\0\x02\0\x12\x04\xc6\x01\
    \x06-\x1a\x8b\x01\x20No\x20content\x20matcher\x20type\x20specified\x20(m\
    aintained\x20for\x20backward\n\x20compatibility,\x20but\x20deprecated\
    \x20for\x20future\x20use).\n\x20Treated\x20as\x20`CONTAINS_STRING`.\n\n\
    \x11\n\t\x04\x01\x03\x03\x04\0\x02\0\x01\x12\x04\xc6\x01\x06(\n\x11\n\t\
    \x04\x01\x03\x03\x04\0\x02\0\x02\x12\x04\xc6\x01+,\n\xfe\x01\n\x08\x04\
    \x01\x03\x03\x04\0\x02\x01\x12\x04\xcc\x01\x06\x1a\x1a\xeb\x01\x20Select\
    s\x20substring\x20matching.\x20The\x20match\x20succeeds\x20if\x20the\x20\
    output\x20contains\n\x20the\x20`content`\x20string.\x20\x20This\x20is\
    \x20the\x20default\x20value\x20for\x20checks\x20without\n\x20a\x20`match\
    er`\x20option,\x20or\x20where\x20the\x20value\x20of\x20`matcher`\x20is\n\
    \x20`CONTENT_MATCHER_OPTION_UNSPECIFIED`.\n\n\x11\n\t\x04\x01\x03\x03\
    \x04\0\x02\x01\x01\x12\x04\xcc\x01\x06\x15\n\x11\n\t\x04\x01\x03\x03\x04\
    \0\x02\x01\x02\x12\x04\xcc\x01\x18\x19\n\x86\x01\n\x08\x04\x01\x03\x03\
    \x04\0\x02\x02\x12\x04\xd0\x01\x06\x1e\x1at\x20Selects\x20negation\x20of\
    \x20substring\x20matching.\x20The\x20match\x20succeeds\x20if\x20the\n\
    \x20output\x20does\x20_NOT_\x20contain\x20the\x20`content`\x20string.\n\
    \n\x11\n\t\x04\x01\x03\x03\x04\0\x02\x02\x01\x12\x04\xd0\x01\x06\x19\n\
    \x11\n\t\x04\x01\x03\x03\x04\0\x02\x02\x02\x12\x04\xd0\x01\x1c\x1d\n\x9d\
    \x01\n\x08\x04\x01\x03\x03\x04\0\x02\x03\x12\x04\xd4\x01\x06\x18\x1a\x8a\
    \x01\x20Selects\x20regular-expression\x20matching.\x20The\x20match\x20su\
    cceeds\x20of\x20the\x20output\n\x20matches\x20the\x20regular\x20expressi\
    on\x20specified\x20in\x20the\x20`content`\x20string.\n\n\x11\n\t\x04\x01\
    \x03\x03\x04\0\x02\x03\x01\x12\x04\xd4\x01\x06\x13\n\x11\n\t\x04\x01\x03\
    \x03\x04\0\x02\x03\x02\x12\x04\xd4\x01\x16\x17\n\xb3\x01\n\x08\x04\x01\
    \x03\x03\x04\0\x02\x04\x12\x04\xd9\x01\x06\x1c\x1a\xa0\x01\x20Selects\
    \x20negation\x20of\x20regular-expression\x20matching.\x20The\x20match\
    \x20succeeds\x20if\n\x20the\x20output\x20does\x20_NOT_\x20match\x20the\
    \x20regular\x20expression\x20specified\x20in\x20the\n\x20`content`\x20st\
    ring.\n\n\x11\n\t\x04\x01\x03\x03\x04\0\x02\x04\x01\x12\x04\xd9\x01\x06\
    \x17\n\x11\n\t\x04\x01\x03\x03\x04\0\x02\x04\x02\x12\x04\xd9\x01\x1a\x1b\
    \n\x95\x01\n\x06\x04\x01\x03\x03\x02\0\x12\x04\xde\x01\x04\x17\x1a\x84\
    \x01\x20String\x20or\x20regex\x20content\x20to\x20match.\x20Maximum\x201\
    024\x20bytes.\x20An\x20empty\x20`content`\n\x20string\x20indicates\x20no\
    \x20content\x20matching\x20is\x20to\x20be\x20performed.\n\n\x0f\n\x07\
    \x04\x01\x03\x03\x02\0\x05\x12\x04\xde\x01\x04\n\n\x0f\n\x07\x04\x01\x03\
    \x03\x02\0\x01\x12\x04\xde\x01\x0b\x12\n\x0f\n\x07\x04\x01\x03\x03\x02\0\
    \x03\x12\x04\xde\x01\x15\x16\n\x92\x01\n\x06\x04\x01\x03\x03\x02\x01\x12\
    \x04\xe2\x01\x04%\x1a\x81\x01\x20The\x20type\x20of\x20content\x20matcher\
    \x20that\x20will\x20be\x20applied\x20to\x20the\x20server\x20output,\n\
    \x20compared\x20to\x20the\x20`content`\x20string\x20when\x20the\x20check\
    \x20is\x20run.\n\n\x0f\n\x07\x04\x01\x03\x03\x02\x01\x06\x12\x04\xe2\x01\
    \x04\x18\n\x0f\n\x07\x04\x01\x03\x03\x02\x01\x01\x12\x04\xe2\x01\x19\x20\
    \n\x0f\n\x07\x04\x01\x03\x03\x02\x01\x03\x12\x04\xe2\x01#$\n\xc1\x02\n\
    \x04\x04\x01\x02\0\x12\x04\xec\x01\x02\x12\x1a\xb2\x02\x20A\x20unique\
    \x20resource\x20name\x20for\x20this\x20Uptime\x20check\x20configuration.\
    \x20The\x20format\x20is:\n\n\x20\x20\x20`projects/[PROJECT_ID]/uptimeChe\
    ckConfigs/[UPTIME_CHECK_ID]`.\n\n\x20This\x20field\x20should\x20be\x20om\
    itted\x20when\x20creating\x20the\x20Uptime\x20check\x20configuration;\n\
    \x20on\x20create,\x20the\x20resource\x20name\x20is\x20assigned\x20by\x20\
    the\x20server\x20and\x20included\x20in\x20the\n\x20response.\n\n\r\n\x05\
    \x04\x01\x02\0\x05\x12\x04\xec\x01\x02\x08\n\r\n\x05\x04\x01\x02\0\x01\
    \x12\x04\xec\x01\t\r\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\xec\x01\x10\x11\
    \n\xe4\x01\n\x04\x04\x01\x02\x01\x12\x04\xf1\x01\x02\x1a\x1a\xd5\x01\x20\
    A\x20human-friendly\x20name\x20for\x20the\x20Uptime\x20check\x20configur\
    ation.\x20The\x20display\x20name\n\x20should\x20be\x20unique\x20within\
    \x20a\x20Stackdriver\x20Workspace\x20in\x20order\x20to\x20make\x20it\x20\
    easier\n\x20to\x20identify;\x20however,\x20uniqueness\x20is\x20not\x20en\
    forced.\x20Required.\n\n\r\n\x05\x04\x01\x02\x01\x05\x12\x04\xf1\x01\x02\
    \x08\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\xf1\x01\t\x15\n\r\n\x05\x04\
    \x01\x02\x01\x03\x12\x04\xf1\x01\x18\x19\n?\n\x04\x04\x01\x08\0\x12\x06\
    \xf4\x01\x02\x82\x02\x03\x1a/\x20The\x20resource\x20the\x20check\x20is\
    \x20checking.\x20Required.\n\n\r\n\x05\x04\x01\x08\0\x01\x12\x04\xf4\x01\
    \x08\x10\n\xae\x02\n\x04\x04\x01\x02\x02\x12\x04\xfe\x01\x048\x1a\x9f\
    \x02\x20The\x20[monitored\n\x20resource](https://cloud.google.com/monito\
    ring/api/resources)\x20associated\n\x20with\x20the\x20configuration.\n\
    \x20The\x20following\x20monitored\x20resource\x20types\x20are\x20support\
    ed\x20for\x20Uptime\x20checks:\n\x20\x20\x20`uptime_url`,\n\x20\x20\x20`\
    gce_instance`,\n\x20\x20\x20`gae_app`,\n\x20\x20\x20`aws_ec2_instance`,\
    \n\x20\x20\x20`aws_elb_load_balancer`\n\n\r\n\x05\x04\x01\x02\x02\x06\
    \x12\x04\xfe\x01\x04\x20\n\r\n\x05\x04\x01\x02\x02\x01\x12\x04\xfe\x01!3\
    \n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\xfe\x0167\nE\n\x04\x04\x01\x02\
    \x03\x12\x04\x81\x02\x04%\x1a7\x20The\x20group\x20resource\x20associated\
    \x20with\x20the\x20configuration.\n\n\r\n\x05\x04\x01\x02\x03\x06\x12\
    \x04\x81\x02\x04\x11\n\r\n\x05\x04\x01\x02\x03\x01\x12\x04\x81\x02\x12\
    \x20\n\r\n\x05\x04\x01\x02\x03\x03\x12\x04\x81\x02#$\n3\n\x04\x04\x01\
    \x08\x01\x12\x06\x85\x02\x02\x8b\x02\x03\x1a#\x20The\x20type\x20of\x20Up\
    time\x20check\x20request.\n\n\r\n\x05\x04\x01\x08\x01\x01\x12\x04\x85\
    \x02\x08\x1a\nK\n\x04\x04\x01\x02\x04\x12\x04\x87\x02\x04\x1d\x1a=\x20Co\
    ntains\x20information\x20needed\x20to\x20make\x20an\x20HTTP\x20or\x20HTT\
    PS\x20check.\n\n\r\n\x05\x04\x01\x02\x04\x06\x12\x04\x87\x02\x04\r\n\r\n\
    \x05\x04\x01\x02\x04\x01\x12\x04\x87\x02\x0e\x18\n\r\n\x05\x04\x01\x02\
    \x04\x03\x12\x04\x87\x02\x1b\x1c\n@\n\x04\x04\x01\x02\x05\x12\x04\x8a\
    \x02\x04\x1b\x1a2\x20Contains\x20information\x20needed\x20to\x20make\x20\
    a\x20TCP\x20check.\n\n\r\n\x05\x04\x01\x02\x05\x06\x12\x04\x8a\x02\x04\
    \x0c\n\r\n\x05\x04\x01\x02\x05\x01\x12\x04\x8a\x02\r\x16\n\r\n\x05\x04\
    \x01\x02\x05\x03\x12\x04\x8a\x02\x19\x1a\n\xe3\x01\n\x04\x04\x01\x02\x06\
    \x12\x04\x91\x02\x02&\x1a\xd4\x01\x20How\x20often,\x20in\x20seconds,\x20\
    the\x20Uptime\x20check\x20is\x20performed.\n\x20Currently,\x20the\x20onl\
    y\x20supported\x20values\x20are\x20`60s`\x20(1\x20minute),\x20`300s`\n\
    \x20(5\x20minutes),\x20`600s`\x20(10\x20minutes),\x20and\x20`900s`\x20(1\
    5\x20minutes).\x20Optional,\n\x20defaults\x20to\x20`60s`.\n\n\r\n\x05\
    \x04\x01\x02\x06\x06\x12\x04\x91\x02\x02\x1a\n\r\n\x05\x04\x01\x02\x06\
    \x01\x12\x04\x91\x02\x1b!\n\r\n\x05\x04\x01\x02\x06\x03\x12\x04\x91\x02$\
    %\n}\n\x04\x04\x01\x02\x07\x12\x04\x95\x02\x02'\x1ao\x20The\x20maximum\
    \x20amount\x20of\x20time\x20to\x20wait\x20for\x20the\x20request\x20to\
    \x20complete\x20(must\x20be\n\x20between\x201\x20and\x2060\x20seconds).\
    \x20Required.\n\n\r\n\x05\x04\x01\x02\x07\x06\x12\x04\x95\x02\x02\x1a\n\
    \r\n\x05\x04\x01\x02\x07\x01\x12\x04\x95\x02\x1b\"\n\r\n\x05\x04\x01\x02\
    \x07\x03\x12\x04\x95\x02%&\n\xec\x02\n\x04\x04\x01\x02\x08\x12\x04\x9c\
    \x02\x02/\x1a\xdd\x02\x20The\x20content\x20that\x20is\x20expected\x20to\
    \x20appear\x20in\x20the\x20data\x20returned\x20by\x20the\x20target\n\x20\
    server\x20against\x20which\x20the\x20check\x20is\x20run.\x20\x20Currentl\
    y,\x20only\x20the\x20first\x20entry\n\x20in\x20the\x20`content_matchers`\
    \x20list\x20is\x20supported,\x20and\x20additional\x20entries\x20will\n\
    \x20be\x20ignored.\x20This\x20field\x20is\x20optional\x20and\x20should\
    \x20only\x20be\x20specified\x20if\x20a\n\x20content\x20match\x20is\x20re\
    quired\x20as\x20part\x20of\x20the/\x20Uptime\x20check.\n\n\r\n\x05\x04\
    \x01\x02\x08\x04\x12\x04\x9c\x02\x02\n\n\r\n\x05\x04\x01\x02\x08\x06\x12\
    \x04\x9c\x02\x0b\x19\n\r\n\x05\x04\x01\x02\x08\x01\x12\x04\x9c\x02\x1a*\
    \n\r\n\x05\x04\x01\x02\x08\x03\x12\x04\x9c\x02-.\n\xcc\x02\n\x04\x04\x01\
    \x02\t\x12\x04\xa3\x02\x023\x1a\xbd\x02\x20The\x20list\x20of\x20regions\
    \x20from\x20which\x20the\x20check\x20will\x20be\x20run.\n\x20Some\x20reg\
    ions\x20contain\x20one\x20location,\x20and\x20others\x20contain\x20more\
    \x20than\x20one.\n\x20If\x20this\x20field\x20is\x20specified,\x20enough\
    \x20regions\x20must\x20be\x20provided\x20to\x20include\x20a\n\x20minimum\
    \x20of\x203\x20locations.\x20\x20Not\x20specifying\x20this\x20field\x20w\
    ill\x20result\x20in\x20Uptime\n\x20checks\x20running\x20from\x20all\x20a\
    vailable\x20regions.\n\n\r\n\x05\x04\x01\x02\t\x04\x12\x04\xa3\x02\x02\n\
    \n\r\n\x05\x04\x01\x02\t\x06\x12\x04\xa3\x02\x0b\x1c\n\r\n\x05\x04\x01\
    \x02\t\x01\x12\x04\xa3\x02\x1d-\n\r\n\x05\x04\x01\x02\t\x03\x12\x04\xa3\
    \x0202\n\xaf\x02\n\x04\x04\x01\x02\n\x12\x04\xa9\x02\x02,\x1a\xa0\x02\
    \x20If\x20this\x20is\x20`true`,\x20then\x20checks\x20are\x20made\x20only\
    \x20from\x20the\x20'internal_checkers'.\n\x20If\x20it\x20is\x20`false`,\
    \x20then\x20checks\x20are\x20made\x20only\x20from\x20the\x20'selected_re\
    gions'.\n\x20It\x20is\x20an\x20error\x20to\x20provide\x20'selected_regio\
    ns'\x20when\x20is_internal\x20is\x20`true`,\n\x20or\x20to\x20provide\x20\
    'internal_checkers'\x20when\x20is_internal\x20is\x20`false`.\n\n\r\n\x05\
    \x04\x01\x02\n\x05\x12\x04\xa9\x02\x02\x06\n\r\n\x05\x04\x01\x02\n\x01\
    \x12\x04\xa9\x02\x07\x12\n\r\n\x05\x04\x01\x02\n\x03\x12\x04\xa9\x02\x15\
    \x17\n\r\n\x05\x04\x01\x02\n\x08\x12\x04\xa9\x02\x18+\n\x0e\n\x06\x04\
    \x01\x02\n\x08\x03\x12\x04\xa9\x02\x19*\n\xf1\x01\n\x04\x04\x01\x02\x0b\
    \x12\x04\xaf\x02\x02F\x1a\xe2\x01\x20The\x20internal\x20checkers\x20that\
    \x20this\x20check\x20will\x20egress\x20from.\x20If\x20`is_internal`\x20i\
    s\n\x20`true`\x20and\x20this\x20list\x20is\x20empty,\x20the\x20check\x20\
    will\x20egress\x20from\x20all\x20the\n\x20InternalCheckers\x20configured\
    \x20for\x20the\x20project\x20that\x20owns\x20this\n\x20`UptimeCheckConfi\
    g`.\n\n\r\n\x05\x04\x01\x02\x0b\x04\x12\x04\xaf\x02\x02\n\n\r\n\x05\x04\
    \x01\x02\x0b\x06\x12\x04\xaf\x02\x0b\x1a\n\r\n\x05\x04\x01\x02\x0b\x01\
    \x12\x04\xaf\x02\x1b,\n\r\n\x05\x04\x01\x02\x0b\x03\x12\x04\xaf\x02/1\n\
    \r\n\x05\x04\x01\x02\x0b\x08\x12\x04\xaf\x022E\n\x0e\n\x06\x04\x01\x02\
    \x0b\x08\x03\x12\x04\xaf\x023D\nq\n\x02\x04\x02\x12\x06\xb4\x02\0\xc3\
    \x02\x01\x1ac\x20Contains\x20the\x20region,\x20location,\x20and\x20list\
    \x20of\x20IP\n\x20addresses\x20where\x20checkers\x20in\x20the\x20locatio\
    n\x20run\x20from.\n\n\x0b\n\x03\x04\x02\x01\x12\x04\xb4\x02\x08\x15\nK\n\
    \x04\x04\x02\x02\0\x12\x04\xb6\x02\x02\x1f\x1a=\x20A\x20broad\x20region\
    \x20category\x20in\x20which\x20the\x20IP\x20address\x20is\x20located.\n\
    \n\r\n\x05\x04\x02\x02\0\x06\x12\x04\xb6\x02\x02\x13\n\r\n\x05\x04\x02\
    \x02\0\x01\x12\x04\xb6\x02\x14\x1a\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\
    \xb6\x02\x1d\x1e\n\xcd\x01\n\x04\x04\x02\x02\x01\x12\x04\xbb\x02\x02\x16\
    \x1a\xbe\x01\x20A\x20more\x20specific\x20location\x20within\x20the\x20re\
    gion\x20that\x20typically\x20encodes\n\x20a\x20particular\x20city/town/m\
    etro\x20(and\x20its\x20containing\x20state/province\x20or\x20country)\n\
    \x20within\x20the\x20broader\x20umbrella\x20region\x20category.\n\n\r\n\
    \x05\x04\x02\x02\x01\x05\x12\x04\xbb\x02\x02\x08\n\r\n\x05\x04\x02\x02\
    \x01\x01\x12\x04\xbb\x02\t\x11\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\xbb\
    \x02\x14\x15\n\xe8\x02\n\x04\x04\x02\x02\x02\x12\x04\xc2\x02\x02\x18\x1a\
    \xd9\x02\x20The\x20IP\x20address\x20from\x20which\x20the\x20Uptime\x20ch\
    eck\x20originates.\x20This\x20is\x20a\x20fully\n\x20specified\x20IP\x20a\
    ddress\x20(not\x20an\x20IP\x20address\x20range).\x20Most\x20IP\x20addres\
    ses,\x20as\x20of\n\x20this\x20publication,\x20are\x20in\x20IPv4\x20forma\
    t;\x20however,\x20one\x20should\x20not\x20rely\x20on\x20the\n\x20IP\x20a\
    ddresses\x20being\x20in\x20IPv4\x20format\x20indefinitely,\x20and\x20sho\
    uld\x20support\n\x20interpreting\x20this\x20field\x20in\x20either\x20IPv\
    4\x20or\x20IPv6\x20format.\n\n\r\n\x05\x04\x02\x02\x02\x05\x12\x04\xc2\
    \x02\x02\x08\n\r\n\x05\x04\x02\x02\x02\x01\x12\x04\xc2\x02\t\x13\n\r\n\
    \x05\x04\x02\x02\x02\x03\x12\x04\xc2\x02\x16\x17\n\xbf\x02\n\x02\x05\x01\
    \x12\x06\xca\x02\0\xd4\x02\x01\x1a\xb0\x02\x20The\x20supported\x20resour\
    ce\x20types\x20that\x20can\x20be\x20used\x20as\x20values\x20of\n\x20`gro\
    up_resource.resource_type`.\n\x20`INSTANCE`\x20includes\x20`gce_instance\
    `\x20and\x20`aws_ec2_instance`\x20resource\x20types.\n\x20The\x20resourc\
    e\x20types\x20`gae_app`\x20and\x20`uptime_url`\x20are\x20not\x20valid\
    \x20here\x20because\n\x20group\x20checks\x20on\x20App\x20Engine\x20modul\
    es\x20and\x20URLs\x20are\x20not\x20allowed.\n\n\x0b\n\x03\x05\x01\x01\
    \x12\x04\xca\x02\x05\x16\n*\n\x04\x05\x01\x02\0\x12\x04\xcc\x02\x02\x20\
    \x1a\x1c\x20Default\x20value\x20(not\x20valid).\n\n\r\n\x05\x05\x01\x02\
    \0\x01\x12\x04\xcc\x02\x02\x1b\n\r\n\x05\x05\x01\x02\0\x02\x12\x04\xcc\
    \x02\x1e\x1f\nd\n\x04\x05\x01\x02\x01\x12\x04\xd0\x02\x02\x0f\x1aV\x20A\
    \x20group\x20of\x20instances\x20from\x20Google\x20Cloud\x20Platform\x20(\
    GCP)\x20or\n\x20Amazon\x20Web\x20Services\x20(AWS).\n\n\r\n\x05\x05\x01\
    \x02\x01\x01\x12\x04\xd0\x02\x02\n\n\r\n\x05\x05\x01\x02\x01\x02\x12\x04\
    \xd0\x02\r\x0e\n5\n\x04\x05\x01\x02\x02\x12\x04\xd3\x02\x02\x1c\x1a'\x20\
    A\x20group\x20of\x20Amazon\x20ELB\x20load\x20balancers.\n\n\r\n\x05\x05\
    \x01\x02\x02\x01\x12\x04\xd3\x02\x02\x17\n\r\n\x05\x05\x01\x02\x02\x02\
    \x12\x04\xd3\x02\x1a\x1bb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
